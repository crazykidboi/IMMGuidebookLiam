[{"id":0,"href":"/IMMTechSite-Temporary/docs/programming/fundamentals/basic-syntax/","title":"Syntax of Variables and Functions","section":"Fundamentals","content":"Basic Syntax: Variables and Functions #  Variables #  Declaring Variables #  The keywords to declare a variable are as follows:\n [scope][space][type][space][variableName][semicolon]\nscope type variableName;\n When naming our variables, we use lowercaseCamelCase. Also called pascalCase.\nYou cannot start a variable with a number.\nC# requires that we declare the variable type. We can\u0026rsquo;t just say \u0026ldquo;let x be some variable. A number? A word? I dunno, you figure it out\u0026rdquo;. You can think of types as letting the compiler know how to interpret the sequence of bits (1s and 0s) that the variable is storing. Does 01011001 refer to the 8-bit binary number 89, Or the ascii character code for \u0026ldquo;Y\u0026rdquo;? In every programming language, the computer needs to know, and in C# it\u0026rsquo;s our responsibility to tell it.  Common data types are: string, int, float, bool, char.\nDeclaring data variables: #  public string weUseCamelCase;//Variable names uppercase every word except the first, and cannot start with numbers. We do not use snake_case. private int someNumber = 4;//you set values during declaration bool isAwesome = true; //The scope is \u0026#39;private\u0026#39; by default, so we don\u0026#39;t have to type \u0026#39;private\u0026#39;.  Data Structures #  Declaring structs is very similar to regular variables. We just use the type of the struct for the type: private Vector3 someVelocity; public Quaternion rotationStorage; Vector2 inputDir;\nWhere it differs is how we create structs. Structs use the same constructor/deconstructor syntax as classes. We type \u0026ldquo;new\u0026rdquo; then the type name, followed by parenthesis, and then we put our appropriate values in the parenthesis like parameters to a function. Vector3, the most common struct we use in Unity, takes 3 float values for its x, y,and z values in that order.  private Vector3 someVelocity = new Vector3(0,0,3);//0 on the x axis, 0 on the y axis, 3 on the z axis. Vector2 inputDir = new Vector2(-1,0); Vecto2 newInputDir = inputDir;//We don\u0026#39;t need to create new variables, we can copy other structs values. Vector3 otherDir = Vector3.right;//Here we copy a built-in variable, see below.  Vector3.right is a shorthand, its basically an already existing variable thats equal to Vector3(1,0,0). In the above example, we simply copied these values into our variable. Vector3.right (and the other short-hands) are much easier to type than \u0026ldquo;new Vector3(1,0,0)\u0026rdquo;, and makes the code easier to understand when reading it..  Declaring Classes #  The syntax for variables that store a class (or a reference to an instance of a class) is the same as structs. \u0026ldquo;private Thing something = new Thing();\u0026rdquo; There is just one notable exception: They do not have default values. When you declare a class, it will be null. We have to either set it equal to a new instance of the class. ( =new Thing() )\nFunctions #  Functions are also called methods in C#. There are pedantic differences, and these pedantic differences can differ between languages. I don\u0026rsquo;t want students to worry about it. We will use the terms \u0026ldquo;method\u0026rdquo; and \u0026ldquo;function\u0026rdquo; interchangably.\nSome programmers will be mad at me for this, so I\u0026rsquo;ll give you the 1 sentence version: In C#, \u0026lsquo;Function\u0026rsquo; is a more broad term for \u0026lsquo;things that include executable code\u0026rsquo;, where methods are a type of function. Other functions that aren\u0026rsquo;t methods include constructors, properties, indexers, events, and operators.  The Syntax for a function is simple. Just like variables, we start with the scope (public/private), then the return type, and then the function name (CapitalizedCamelCase). What makes a function a function (syntactically speaking) is parenthesis. They follow the function name without a space.\nThe parenthesis hold are \u0026lsquo;arguments\u0026rsquo; or \u0026lsquo;parameters\u0026rsquo;, but even when we don\u0026rsquo;t have any arguments, we still need the parenthesis. The () is how we can always recognize a function. After the parenthesis we put curly braces, which contain the code that makes up our function.\n [scope][space][returnType][space][FunctionName][(parenthesis)][{curlyBraces}]\nscope returntype functionName(){}\n private void Start() { //Code here, indented. } Creating Functions With Parameters #  To pass data into a function, we declare variables inside of the parenthesis. We declare them like a regular syntax for declaring a variable (without scope), inside of the parenthesis, separated by commas. They can only be used inside the function.\nVariables created this way are called \u0026ldquo;parameters\u0026rdquo; or \u0026ldquo;arguments\u0026rdquo;.  private void GiveMeSomeNumbersToWorkWith(int a, int b) { //This code now has two integer variables to work with, a and b. } private void GiveMeOtherInformation(string words, int andANumber) { //This function has been given a string variable and an integer variable. } private void GiveMeOtherInformation(float someNumber) { //This function has the same name as the above function. This is allowed so long as the paremeters are different. } Functions with the same name but different parameters are allowed in C#. We would say it has a different \u0026ldquo;method signature\u0026rdquo;. One would expect the functions to do the same thing. This is a way of writing the same function multiple times, except to allow for different types of input from the parameters. We have seen this with the \u0026ldquo;Instantiate\u0026rdquo; function from the intro roll-a-ball lesson.\nTake a look at the documentation for the Instantiate function built into Unity. Notice it has a number of different declarations.\n Indentation and spacing #  While C# does not care about your indentation, and doesn\u0026rsquo;t care about extra white-space, there are a set of standards that developers follow. It\u0026rsquo;s important for everyone on the same team to follow the same conventions, also called \u0026ldquo;standards\u0026rdquo;. Jetbrains Rider has a common set of standards built-into it, which are customizable. Setting up your IDE to use the same standard you follow makes it really easy.\nI recommend starting curly braces on a new line, and indenting code inside of curly braces. This way, one can draw a vertical line straight down from where a curly brace starts. If we see any other code at that indentation level, we can quickly identify that either 1) we need to indent it, or 2) we have messed something up. It makes seeing your code structure easy, which makes it easier to find bugs.\nIf statements do not need curly braces. If they don\u0026rsquo;t have one, they will automatically execute the single next line. This is a shorthand, and I do not recommend you follow it when you start coding. It is easier to make mistakes when you code isn\u0026rsquo;t formatted consistently. You have to remember that just these one-liner if statements are special. I say: don\u0026rsquo;t bother.\nWhatever standard you prefer, just remember to be consistent.\n//C# Does not care about line breaks. private void Start(){} //C# Does not care about line breaks. private void Start() {//We put the first curly brace on a new line \t//we indent every line of code inside of the curly braces \tif(something == true) { //Some other code inside curly braces, indented again. \tDebug.Log(\u0026#34;something is true.\u0026#34;); } }//the closing curly brace is at the same indentation as the first one, so we can tell which ones go with which. \nCalling Functions #  To execute a function, we just type the name of the function followed by parenthesis, and a semicolon. Just like any other statement in C#\nprivate void Start() { SayHelloWorld(); } private void SayHelloWorld() { Debug.Log(\u0026#34;Hello, World\u0026#34;); } \u0026ldquo;Executing\u0026rdquo;, \u0026ldquo;Running\u0026rdquo; and \u0026ldquo;Calling\u0026rdquo; functions are all perfectly fine ways to refer to the same thing: make it do it\u0026rsquo;s thing.  If the function has parameters, we pass those in, in order, separated by commas. We can type the values directly, or use a different variable whose value or reference will be passed along.\nprivate void Start() { SayHelloToMe(\u0026#34;World\u0026#34;);//prints \u0026#34;Hello, World\u0026#34;  string myName = \u0026#34;Abby\u0026#34;; SayHelloToUs(myName,\u0026#34;Ben\u0026#34;,\u0026#34;Chris\u0026#34;)//prints \u0026#34;Hello Abby, Ben, and Chris.\u0026#34; } private void SayHelloToMe(string yourName) { Debug.Log(\u0026#34;Hello, \u0026#34; + yourName); } private void SayHelloToUs(string a, string b, string c) { Debug.Log(\u0026#34;Hello \u0026#34;+a+\u0026#34;, \u0026#34;+b+\u0026#34;, and \u0026#34;+c+\u0026#34;.\u0026#34;); } "},{"id":1,"href":"/IMMTechSite-Temporary/docs/programming/architecture/the-architecture-lecture/","title":"The Architecture Lecture","section":"Architecture","content":"The Architecture Lecture\n  "},{"id":2,"href":"/IMMTechSite-Temporary/docs/unity/unity-fundamentals/project-basics/","title":"Unity Project Basics","section":"Fundamentals","content":"Unity Project Basics #    "},{"id":3,"href":"/IMMTechSite-Temporary/docs/programming/fundamentals/conditionals/","title":"Conditionals","section":"Fundamentals","content":"Conditionals #  A conditional is something that can be true or false.\nBoolean #  The simplest conditional is a \u0026ldquo;boolean\u0026rdquo; data type. A boolean is a variable that can be equal to either \u0026ldquo;True\u0026rdquo; or \u0026ldquo;False\u0026rdquo;, and Nothing else. They are stored as a single bit, a 1 or a 0, so they literally, can only be true or false.\nIn C#, and in most programming languages, this data type is called \u0026ldquo;bool\u0026rdquo;.\nThe word \u0026ldquo;Boolean\u0026rdquo; comes from a mathematician named George Boole.  private bool trueOrFalse;//false by default. private bool isAmazing = true; We often use \u0026ldquo;is\u0026rdquo;, \u0026ldquo;are\u0026rdquo;, \u0026ldquo;can\u0026rdquo;, and similar prefixes in our variable names. (such as \u0026ldquo;bool isCool;\u0026quot;). This naming helps us read the code, it is grammatically easy to understand that this variable is something true or false.  Conditional Operators #  Booleans are great for storing something that is true or false, but they don\u0026rsquo;t help us dynamically determine if something is true or false (You know, the thing that makes computers more special than calculators). For that, we need operators.\nYou are probably familiar with mathematical operators:\n plus: + minus: - multiplication: * division: \\   In programming, an operator is like shorthand syntax. It\u0026rsquo;s a symbol with data on either side of it. It takes the left and right side of the operator, and then turns the whole thing into a new data value. The \u0026ldquo;+\u0026rdquo; operator takes two numbers to either side of it, mathematically adds them together, and returns the new single number of whatever their sum is.\n Conditional operators returns a bool. Common conditional operators:\n Greater Than: \u0026gt; Less Than: \u0026lt; Greater Than or Equal To: \u0026gt;= Less Than or Equal To: \u0026lt;= Is Equal To: == Is Not Equal To: !=  Pay attention to the \u0026gt;= and \u0026lt;= operators. We cannot flip around the greater than or equal to symbols. =\u0026gt; and =\u0026lt; are different symbols that mean something else. For example, =\u0026gt; is a \u0026lsquo;lambda operator\u0026rsquo;, and that would be gibberish to the compiler in the context of a conditional. So you\u0026rsquo;ll end up with an error.  Also note the == operator. In C# programming, one equal sign (=) will very specifically take the right-hand value and assign it to the left hand side. Two equals signs (==) will compare the left-hand and right-hand sides, and then evaluate if they are equivalent or not. They are used in completely different ways.\nUnfortunately, in english, we say \u0026ldquo;equals\u0026rdquo; for both of these different things. I recommend you read \u0026ldquo;==\u0026rdquo; as \u0026ldquo;Is Equal To?\u0026rdquo; and \u0026ldquo;=\u0026rdquo; as \u0026ldquo;is\u0026rdquo;.\n Logical Operators #  Logical Operators are used to connect multiple conditionals together to form another greater conditional. Like all operators, they consider the information to their left and their right (in this case bools), and they give us a new value, another bool.\nLogical Operators:\n And: \u0026amp;\u0026amp; Or: || Not: !  The | is the \u0026lsquo;pipe symbol\u0026rsquo;, it\u0026rsquo;s often located above the enter key on keyboards. OR is two pipe symbols: ||.  The AND operator will return true if either side of it are both true. If one or both of them are false, then it will be false.\n true \u0026amp;\u0026amp; true == true true \u0026amp;\u0026amp; false == false false \u0026amp;\u0026amp; true == false false \u0026amp;\u0026amp; false == false  The Or operator will return true if one or both of its sides are true.\n true || true == true true || false == true false || true == true false || false == false  Why two ampersands? Or two pipe symbols? It turns out you can use single ones too.\nThe operator evaluates either side of it. The code on the left evaluates first, then the code on the right. For an AND operator, if the left side is true, it doesn\u0026rsquo;t matter what the right side is. The double \u0026amp;\u0026amp; and double || versions of the operator will not evaluate the right-hand side if it isn\u0026rsquo;t needed. This is more efficient code, and considered good practice. As a rule of thumb, you should use it by default.\nRead about them in the official documentation.\nKnowing this, we can write conditionals in a way that evaluates simple parts before complicated ones. Like first checking if the right button is pressed (simple) before doing a physics/raycast calculation to see if the space is open to move into (complex). if(RightKeyIsPressed() \u0026amp;\u0026amp; ComplexFunctionToCheckIfWeCanMoveRight()){}. If the right key isn\u0026rsquo;t pressed, the \u0026amp;\u0026amp; symbol means we won\u0026rsquo;t bother even calling the complex function.\n  Boolean Algebra #  Of course, we can combine conditional operators and logical operators in complicated ways. When we do so, we can use parenthesis to disambiguate our order of operations, just like PEMDOS in algebra. We evaluate in parenthesis first, then left-to-right. See the official documentation for operator precedence, but I recommend you default to using parenthesis to disambiguate, instead of relying on knowing the order of logical operations. It may technically be unnecessary, but if you err on the side of writing readable code over concise code, you\u0026rsquo;ll have fewer bugs.\nSee Syntax of Code Flow for an explainer of if statements, the most common use case for conditionals.\nint a = 4; if(a \u0026lt; 5 \u0026amp;\u0026amp; a \u0026gt; 0) { //a must be 1,2,3,or 4 for this code to run. } int a = 4; int b = 5; bool runAnyway = true; if((a \u0026lt; b \u0026amp;\u0026amp; b == 7) || runAnyway) { //a must be less than b and b must be exactly 7, or runAnyway is equal to true. } Not #  Also called the \u0026ldquo;Logical Negation Operator\u0026rdquo;. A ! placed before a conditional will negate it, flipping it from true to false and from false to true.\n! is not an operator in the way I described operators above, with a left and right side. It\u0026rsquo;s more of a prefix. It\u0026rsquo;s still called an operator in the programming syntax sense of a symbol that has a special purpose and function.\n !true == false !false == true !(a == b) and (a != b) evaluate the same  The ! symbol is called \u0026ldquo;bang\u0026rdquo;, which is much easier to say than \u0026ldquo;exclamation point\u0026rdquo;.  //Hypothetical jump code for some game bool inTheAir = !CheckIfGrounded(); //We read this part as \u0026#34;if JumpKeyIsPressed And Not inTheAir\u0026#34;. //This is almost grammatically coherent. Naming variables and functions in this way can make your code easier to understand if(JumpKeyIsPressed() \u0026amp;\u0026amp; !inTheAir) { Jump(); } Bonus: Exclusive Or. #  The or function is true if either value is true, but what about when we want only one value to be true? In english, we would still use the word \u0026ldquo;or\u0026rdquo;, in the world of logic, we need to be more specific and disambiguate. So: \u0026ldquo;Exclusive Or\u0026rdquo;. The exclusive or operator will be true so long as one and only one of the two values are true.\nThe exclusive or operator is the ^ symbol.\n true ^ true == false true ^ false == true false ^ true == true false ^ false == false  "},{"id":4,"href":"/IMMTechSite-Temporary/docs/programming/fundamentals/syntax-of-code-flow/","title":"Syntax of Code Flow","section":"Fundamentals","content":"Code Flow #  Inside of functions, there are a number of different ways to change how code executes. Without messing with code flow, and just having a bunch of statements, code will execute top to bottom, left to right. Code flow is how we get more complicated.\nThere are 2 main ways to manipulate code flow: Branches and Loops.\nBranches, which will likely never be referred to as \u0026ldquo;branches\u0026rdquo; again, are a way of executing functions only in some situations. We have two main forms: The If Statement and Switch Statements. Lets ignore switch statements for now, and focus on the if statement.\nStatement #  A statement is an action of a program. Usually, a single line of code is a statement. We generally end our statements with semicolons. Statements are the code doing some single thing.\nDeclaring a variable? Thats a statement. Assigning it a new value? That\u0026rsquo;s a statement.\nStatement Blocks #  Any code inside of curly braces could be considered a block, or statement block. We contain a number of statements inside some curly braces, and now we can put multiple statements, wrapped up in curly\u0026rsquo;s, and treat it like one statement from the outside.\nThe If Statement #  The If statement takes a conditional and will only execute statment if the conditional is true.\nThe syntax is: the word if, followed immediately by parenthesis that contain a conditional. The code will execute or not execute the statement that follows it depending on the conditional. if(conditional == true) DoSomething();\nExcept, you should basically never write your if statements without using a statment block \u0026ndash; curly braces. We use a curly braces basically 100% of the time. The above is valid, and considered a shorthand, but we want our code to be consistent and readable. So, in practice, the syntax of an if statement is:\nThe keyword \u0026lsquo;if\u0026rsquo;, followed by parenthesis that contain a conditional, immediately followed by curly braces.\nif(conditional == true) { DoSomething(); } The If-Else Statement #  The \u0026lsquo;else\u0026rsquo; keyword can be added to after the if statement to provide some code that will only happen if the conditional is false. It\u0026rsquo;s like an \u0026ldquo;otherwise\u0026rdquo; clause.\nif(conditional == true) { DoSomething(); } else { DoADifferentThing(); } if(conditional == true) { DoSomething(); } else //programmers will fight over the appropriate line spacing of the else statement. I have no strong opinions. { DoADifferentThing(); } You can chain if-else statements together if(inputDir == Vector2.left) { MoveInDir(Vector2.left); } else if(inputDir == Vector2.right) { MoveInDir(Vector2.right); }else if(inputDir == Vector2.up) { MoveInDir(Vector2.up); } else if(inputDir == Vector2.down) { MoveInDir(Vector2.down); }else { StopMoving(); }\nLoops #  Loops allow us to execute a statement block multiple times.\nThe simplest loop is the while loop.\nThe While Loop #  It\u0026rsquo;s basically the same syntax as a simple if statement, but with the keyword while.\nSo long as the conditional is true, the code in the blocks will execute.\nwhile(true) { //The word \u0026#39;true\u0026#39; is always true, so this code will run over and over again forever and crash your computer.  //This is called an infinite loop, and every programmer has made this mistake at least once. } We can use a while loop and an integer to build a simple counter. int i = 0;//A while(i \u0026lt; 10)//B { //Some code we want to run multiple times.  Debug.Log(i); i = i + 1;//C } //This will spit out 0 - 9 in the console. 10 numbers, starting at 0, and going to 9 - not including 10. \nIt turns out this little pattern is really common. We have some code that happens before the while loop (labeled A, above). Then some conditional we check every loop (i\u0026lt;10, labeled B). Then some code we run every single time in the loop (labeled C).\nThis pattern is so common, that the programming deities gave us a nicer way to type it out: the for loop.\nThe For Loop #  Actually, the for loop first appeared in ALGOL 58, a programming language developed in 1958, 63 years ago as I type this.  The for loop is simple loop that is much less prone to accidentally writing infinite loops. It\u0026rsquo;s syntax is:\nThe keyword for, followed by three statements inside of the parenthesis, seperated by commas. Then a curly brace containing our loop.\nfor(A;B;C){} The A,B,and C\u0026rsquo;s here match the functionality of the code labeled A,B, and C in the while loop example above.\nThe statements are:\n A: something that happens once at the top of a loop. B: a conditional C: something that happens every loop.  99% of the time we:\n A: Create a variable. int i = 0; B: Compare it to something. A \u0026lt; 10; C: Increment it: i++;  for(int i = 0;i\u0026lt;10;i++) { //do something 10 times, with access to the variable i.  Debug.Log(i); } We always use the variable \u0026ldquo;i\u0026rdquo; for a counter integer. i for iterator.  i++; is shorthand for writing i = i + 1; It\u0026rsquo;s just a little bit tidier. \u0026ldquo;++\u0026rdquo; as an operator will add 1 to the variable to it\u0026rsquo;s left.\nSimilarly, i\u0026ndash; will subtract one from a number.\n "},{"id":5,"href":"/IMMTechSite-Temporary/docs/unity/","title":"Unity Development","section":"Docs","content":"Unity Development. #  This section covers non-programming related Unity content.\n"},{"id":6,"href":"/IMMTechSite-Temporary/docs/programming/","title":"Programming in Unity","section":"Docs","content":"C# Programming In Unity #  See the sidebar for topics.\nExternal Resources:\n MSDN  "},{"id":7,"href":"/IMMTechSite-Temporary/docs/programming/fundamentals/arrays/","title":"Arrays","section":"Fundamentals","content":"Arrays #    "},{"id":8,"href":"/IMMTechSite-Temporary/docs/programming/fundamentals/classes-and-components/","title":"Classes and Components","section":"Fundamentals","content":"Classes and Components #  Classes are the fundamental building blocks of programming. A class allows us to create instances of the class, called objects, which we \u0026hellip; do everything with.\nOddly enough, in Unity programming, we don\u0026rsquo;t use classes that often. This is a lie. We use them in every single script we right, but we let Unity handle the creation and destruction of our classes for us. This is because most of our classes will be a unity component.\nA basic Unity Script has the following line of code. public class AgentMovement : MonoBehaviour { //everything goes in here }\nWhen we create a component, we are creating a public class that extends \u0026ldquo;MonoBehaviour\u0026rdquo;. We will learn more about extending classes and creating our own special classes in the future. Let\u0026rsquo;s focus on components for now.\n  "},{"id":9,"href":"/IMMTechSite-Temporary/docs/programming/advanced/","title":"Advanced","section":"Programming in Unity","content":"This section goes beyond the fundamentals of C#\n"},{"id":10,"href":"/IMMTechSite-Temporary/docs/programming/unity/tips-and-tricks/serialization-and-attributes/","title":"Serialization and Attributes","section":"Tips \u0026 Tricks","content":"Serialization and Attributes #    "},{"id":11,"href":"/IMMTechSite-Temporary/docs/programming/architecture/","title":"Architecture","section":"Programming in Unity","content":"Architecture #  Architecture is the big picture stuff.\n"},{"id":12,"href":"/IMMTechSite-Temporary/docs/programming/unity/","title":"Code \u0026 Unity","section":"Programming in Unity","content":"Unity #  This section is for programming-related or adjacent topics that are more specific to the Unity game engine. For general Unity, see the Unity section.\n"},{"id":13,"href":"/IMMTechSite-Temporary/docs/unity/3d-models/","title":"3D Models","section":"Unity Development","content":"Working with 3D Models in Unity #  "},{"id":14,"href":"/IMMTechSite-Temporary/docs/programming/architecture/simple-state-machine/","title":"A Simple State Machine","section":"Architecture","content":"Creating a simple state machine in Unity #    Additional Resources #   One Wheel Studio - The State Pattern Habrador - State Pattern Tutorial Game Programming Patterns Book. Chapter on State  "},{"id":15,"href":"/IMMTechSite-Temporary/docs/unity/unity-interface/layouts/","title":"Adjusting Layouts","section":"Interface","content":"Adjusting Layouts and Customizing Unity #    "},{"id":16,"href":"/IMMTechSite-Temporary/docs/unity/unity-fundamentals/assets/","title":"Assets","section":"Fundamentals","content":"What are Assets? #  An asset is an actual file on your computer. We store Assets in the “Assets” folder inside of our unity project folder. Assets are any item in Unity that we may want to use.\nWhen we select an asset in the project window, the Inspector will show us it’s import properties. These are often very important, they tell Unity how to handle the file. For example: fixing scale issues with 3D models.\nIt\u0026rsquo;s easier to explain assets if we consider their uses.\nCommon Asset Types #  Image Files #  Images, like BMP or Jpeg’s, and even Photoshop documents directly (I haven’t utilized this new feature and still export all my sprites as PNG’s with transparency).\n3D Models #  Unity supports FBX files for your 3D models. It also supports saving your native file format into the asset folder (ie: .max, .blend, .mb, .ma), and Unity turns them into .fbx’s when it runs and builds the game. This is useful if you are going back and forth a lot, but it’s still generally wise to export as FBX, especially if you are sharing/collaborating with others. Keep things from getting too messy.\nSee the unity manual for information on importing models, Model File Formats. Getting textures and animations to import with a model correctly (or to associate these things with models that have already been imported) can be tricky, and I won’t get into the details of this here.\nAudio Files #  Unity supports a wide variety of audio, and will (by default) compress it to when it builds the game. Unity supports mp3, .ogg, .wac, .aif audio files, and\n.mod, .it, .s3m, and .xm tracker modules files.\nIf you don’t know what tracker modules are, don’t worry. Think midi, they are sequence data and short audio samples to build out tracks. This helps create long songs without large file sizes.\nScripts #  As we work in Unity, we will create lots of Scripts. These are C# or JavaScript files. You can make the files from within unity.\nIf you click the **Add Component **in the Inspector and create a **New Script **from here, it will put that script in the base assets folder. Before we open it up in our text editor, we should remember to move it to a Scripts folder, or wherever we want to move it. Unity will keep track of objects that we move around (from within Unity’s project window), but our IDE/text editors may not.  File Structure #  Unity technically doesn’t care where in your project you store your assets. Technically you can have them all just sitting in your assets folder. Don’t do this. Create folders that categorize your asset. Generally based on type. Almost all of my projects have the following folders: “Scripts”, “Materials”, “Models”, “Images”, “Scenes”. Your’s probably should soon.\nThis organization isn’t just to keep things pretty. Unity projects can get complicated quickly, and finding assets is going to be important.\nYou should adopt a standard naming convention for your files, as well. But i won’t yell at you about that. At the very least, keep things descriptive.\n"},{"id":17,"href":"/IMMTechSite-Temporary/docs/programming/fundamentals/collapsing-code/","title":"Collapsing Code Exercise","section":"Fundamentals","content":"Collapsing Code #  A basic exercise to help you think about code execution.\n  "},{"id":18,"href":"/IMMTechSite-Temporary/docs/unity/unity-fundamentals/builds/","title":"Creating Builds","section":"Fundamentals","content":"Unity Builds #  Scene Information #  Unity supports a number of \u0026lsquo;Build Targets\u0026rsquo;, or platforms that it can create executable files for. Desktop software for Windows, Mac, and Linux - of course, but also mobile platforms like Android and iOS, WebGL targets for playing games in the web browser on sites like itch.io, and game consoles like the Xbox or the Playstation .\nI will use the terms \u0026lsquo;Build Target\u0026rsquo; and \u0026lsquo;Platform\u0026rsquo; interchangeably on this page.  The empty rectangle at the top is a list of all of the scenes that will be included in the build. If your scene isn\u0026rsquo;t in this list, Unity will exclude it, and you can\u0026rsquo;t load it. Unity will also do it\u0026rsquo;s best to only include necessary assets in your project, and it uses the scene list to figure out what it does and doesn\u0026rsquo;t need.\nHere is a full build scenes list for an actual game:\nOn the right, you can see the \u0026lsquo;build index\u0026rsquo; of each scene, and reorder the scenes. The scene at the top of the list - build index 0 - will be the first scene to be loaded when the project launches. After that, it\u0026rsquo;s up to you to switch scenes and do what you need to do to play the game.\nUnity can load multiple scenes at a time. In the above example, the game first loads the \u0026ldquo;init\u0026rdquo; scene, which is a small scene that is in charge of loading all of the other scenes. This game has no main menu, the Init scene simply additively loads the UIHUD scene and the first scene of the game. At the end of each level, it unloads the level and loads the next one.\nThis empty \u0026ldquo;init\u0026rdquo; manager scene is a common design pattern in Unity development.\n Switching Platforms #  Unity needs to know what platform it is targeting while working internally. While you can build to multiple platforms, and switch at any time, the currently selected build target will determine how Unity imports assets. For example, Windows builds, Unity internally converts audio files to a .wav format, while on Android it uses .ogg.\nWhen you switch targets, Unity will need to reimport every single asset in your project. For large projects, this can take a long time. It\u0026rsquo;s generally always best to have the appropriate build target selected, and switch to it early on in development.\nYou can always test your app in play mode no matter what your build target is.\nYou switch from the Build Settings menu, simply select the appropriate target and click \u0026lsquo;Switch Platform\u0026rsquo;\nAdding Build Targets #  By default, Unity only supports building an executable file for the same operating system it is installed on. This is because they take up a lot of file space, and are often not needed. In order to build for other operating systems (building for windows from a mac computer, or vise-versa), we need to add more build targets.\nWe add a build target from the Unity Hub. Close any open Unity projects, and go to the Installs section of the Hub. Click the three dots next to the appropriate unity version, and select \u0026lsquo;add modules\u0026rsquo;.\nYou can see what build targets are installed via icons in the Hub.\nIf you don\u0026rsquo;t know better, choose the \u0026ldquo;Mono\u0026rdquo; versions instead of \u0026ldquo;IL2CPP\u0026rdquo;. For the curious, you can read more about IL2CPP from the Unity documentation.  Android Information For Android, you want to be sure to include the checkboxes for SDK, NDK, and JDK tools. These are necessary for android to work, and Unity can download and install them automatically.\nIf you have done android development with other IDEs (like Android Studio or Unreal Engine), you already have the SDK, NDK, and JDK downloaded on your computer somewhere. If this is the case, you can uncheck these sub-check boxes, and not bother downloading it again, but leave \u0026lsquo;Android Build Support\u0026rsquo; Checked.\nYou can set the locations of these tools manually in Unity (not the Unity Hub). Go to Preferences\u0026hellip; \u0026gt; External Tools.\n  Windows Executable Information When you make a build for windows, Unity will prompt you to select a folder. It\u0026rsquo;s standard practice to create a \u0026lsquo;Builds\u0026rsquo; folder in your project, and then a folder for each build in this folder.\nName the folder something appropriate (its smart to number or date your builds, so you never mess up and grab an out-of-date version).\nUnity creates the .exe file, a standalone file. This means we don\u0026rsquo;t have to install the app. All of the information it needs to run is here. It also means you can\u0026rsquo;t just send someone the .exe file. We need to have all of the files - the gameName_data folder, the MonoBleedingEdge folder, and UnityPlayer.dll.\nIf any of these files or folders are missing, the game will throw an error.\nFurther, the .exe filename and the _Data folder name need to match. If you rename one, you have to rename the other too. The executable file looks at its own name and searches for that+ \u0026ldquo;_Data\u0026rdquo; for a folder full of important game data.\nWhen sending this file to someone, or uploading to a site like itch.io, its best to put all the files in a compressed (zip) folder.\n  macOS Executable Information On the build settings menu, there is an\u0026quot;Architecture\u0026quot; drop-down. Choose between Intel, Apple silicon, or \u0026lsquo;both\u0026rsquo;. If you don\u0026rsquo;t know better, select both. This creates a much larger file size than just selecting one or the other, so if you do know the architecture is running (apple silicon includes apple \u0026ldquo;M1\u0026rdquo; devices), you should select it. You can also make multiple builds. If you are hosting your game online for someone to download, you can let them choose the appropriate version for them.\nMac creates a .app file. This single file is everything the game needs to run, no extra folders to worry about including.\nFor someone to run the game, and you aren\u0026rsquo;t worrying about code signing or notarization, they may need to \u0026ldquo;Allow apps downloaded from anywhere\u0026rdquo; in their security and privacy settings. Read more about apple\u0026rsquo;s security practices from apple support.\n  "},{"id":19,"href":"/IMMTechSite-Temporary/docs/programming/architecture/data-oriented-design-scriptable-objects/","title":"Data-Oriented Design with Scriptable Objects","section":"Architecture","content":"Data-oriented Design #  I think one of the best introductions to pragmatic data-oriented design is the 2017 talk that Ryan Hipple gave at the Unity Connect conference. It also introduces the basics of ScriptableObjects.\n   After you have watched the above video, I recommend checking out the asset ScriptableObject-Architecture on the asset store. It\u0026rsquo;s an implementation of the ideas of the above talk, but really nicely done. It\u0026rsquo;s open source too.\n"},{"id":20,"href":"/IMMTechSite-Temporary/docs/programming/architecture/event-systems/","title":"Event Systems","section":"Architecture","content":"Event Systems #    "},{"id":21,"href":"/IMMTechSite-Temporary/docs/unity/3d-models/from-sketchfab-to-unity/","title":"From Sketchfab To Unity","section":"3D Models","content":"From Sketchfab To Unity #  This video was recorded as review for the in-class lecture on the Exquisite museum project, posted here for future reference.\n  "},{"id":22,"href":"/IMMTechSite-Temporary/docs/digital-media-fundamentals/notes-on-file-management/","title":"Notes on File Management","section":"Digital Media Fundamentals","content":"Notes on File Management #    "},{"id":23,"href":"/IMMTechSite-Temporary/docs/unity/3d-models/rig-with-mixamo/","title":"Setting up a Rig with Mixamo","section":"3D Models","content":"Setting up a Rig with Mixamo #  This is an older video, I promise some useful information is hidden in there somewhere.\nThe video got demonitized (it was never monitized) because of an automatic copywrite claim by Katy Perry. So that\u0026rsquo;s fun. You should be able to watch it on youtube.   "},{"id":24,"href":"/IMMTechSite-Temporary/docs/programming/advanced/static-objects-and-unity/","title":"Static Objects in C# and Unity","section":"Advanced","content":"Static Objects #    "},{"id":25,"href":"/IMMTechSite-Temporary/docs/programming/unity/tips-and-tricks/string-formatting/","title":"String Formatting","section":"Tips \u0026 Tricks","content":"String Formatting and Debug.Log: Unity Nice-to-knows #    "},{"id":26,"href":"/IMMTechSite-Temporary/docs/unity/unity-fundamentals/hierarchy/","title":"The Hierarchy Window","section":"Fundamentals","content":"The Hierarchy #  The hierarchy window shows us a list of all of our GameObjects in a scene. It\u0026rsquo;s a one-dimensional view of the scene, represented as a list.   It also is where we can group GameObjects together by dragging and dropping them. This is called “parenting”. It’s not just a visual organizational tool, it can have a major impact on how objects in the scene behave.\nSee the official [manual](https://docs.unity3d.com/Manual/Hierarchy.html on the hierarchy window).\n  "},{"id":27,"href":"/IMMTechSite-Temporary/docs/unity/unity-interface/scene-view/","title":"The Scene View","section":"Interface","content":"The Scene View #  The Scene View, or Scene Window, is where we will spend the majority of our time in Unity. It allows us to see our scene, and edit and select objects.\nThe scene View is most closely linked to the Hierarchy – they are both ways to edit a scene, and the Game View.\nRead the page in the Unity Manual on the Scene View, the Scene View Control Bar, and Gizmos.\nCommon Scene View Trouble #  There are a few features in the scene view that can really mess you up if you are not aware of them.\nThe 2D Mode Toggle #  The 2D mode toggle will switch your scene view to 2D mode, the camera will become orthographic and you won\u0026rsquo;t be able to rotate the camera.\nThe ISO/Perspective Gizmo Lock #  This button below the gizmo in the top-right of the scene view will switch the camera between \u0026ldquo;ISO\u0026rdquo;, or orthographic, and \u0026ldquo;Persp\u0026rdquo; or perspective projections. If you are in \u0026ldquo;ISO\u0026rdquo; (which is short for Isometric), it\u0026rsquo;s the same as if the camera were a perspective projection. You can still rotate the scene, but further things won\u0026rsquo;t appear smaller.\nRotation Lock #  To the top right of the gizmo is a small lock icon that can be easy to accidentlly press, and hard to notice if it has been pressed.\nThe gizmo that lets you rotate the scene will be grayed out.\nUnity Official video on the Scene View #    "}]