<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The IMM Tech Repo on IMM Technical Resource Site Preview</title>
    <link>http://hdyar.com/IMMTechSite-Temporary/</link>
    <description>Recent content in The IMM Tech Repo on IMM Technical Resource Site Preview</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://hdyar.com/IMMTechSite-Temporary/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Syntax of Variables and Functions</title>
      <link>http://hdyar.com/IMMTechSite-Temporary/docs/programming/fundamentals/basic-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hdyar.com/IMMTechSite-Temporary/docs/programming/fundamentals/basic-syntax/</guid>
      <description>Basic Syntax: Variables and Functions #  Variables #  Declaring Variables #  The keywords to declare a variable are as follows:
 [scope][space][type][space][variableName][semicolon]
scope type variableName;
 When naming our variables, we use lowercaseCamelCase. Also called pascalCase.
You cannot start a variable with a number.
C# requires that we declare the variable type. We can&amp;rsquo;t just say &amp;ldquo;let x be some variable. A number? A word? I dunno, you figure it out&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>The Architecture Lecture</title>
      <link>http://hdyar.com/IMMTechSite-Temporary/docs/programming/architecture/the-architecture-lecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hdyar.com/IMMTechSite-Temporary/docs/programming/architecture/the-architecture-lecture/</guid>
      <description>The Architecture Lecture
  </description>
    </item>
    
    <item>
      <title>Unity Project Basics</title>
      <link>http://hdyar.com/IMMTechSite-Temporary/docs/unity/unity-fundamentals/project-basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hdyar.com/IMMTechSite-Temporary/docs/unity/unity-fundamentals/project-basics/</guid>
      <description>Unity Project Basics #    </description>
    </item>
    
    <item>
      <title>Conditionals</title>
      <link>http://hdyar.com/IMMTechSite-Temporary/docs/programming/fundamentals/conditionals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hdyar.com/IMMTechSite-Temporary/docs/programming/fundamentals/conditionals/</guid>
      <description>Conditionals #  A conditional is something that can be true or false.
Boolean #  The simplest conditional is a &amp;ldquo;boolean&amp;rdquo; data type. A boolean is a variable that can be equal to either &amp;ldquo;True&amp;rdquo; or &amp;ldquo;False&amp;rdquo;, and Nothing else. They are stored as a single bit, a 1 or a 0, so they literally, can only be true or false.
In C#, and in most programming languages, this data type is called &amp;ldquo;bool&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Syntax of Code Flow</title>
      <link>http://hdyar.com/IMMTechSite-Temporary/docs/programming/fundamentals/syntax-of-code-flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hdyar.com/IMMTechSite-Temporary/docs/programming/fundamentals/syntax-of-code-flow/</guid>
      <description>Code Flow #  Inside of functions, there are a number of different ways to change how code executes. Without messing with code flow, and just having a bunch of statements, code will execute top to bottom, left to right. Code flow is how we get more complicated.
There are 2 main ways to manipulate code flow: Branches and Loops.
Branches, which will likely never be referred to as &amp;ldquo;branches&amp;rdquo; again, are a way of executing functions only in some situations.</description>
    </item>
    
    <item>
      <title>Arrays</title>
      <link>http://hdyar.com/IMMTechSite-Temporary/docs/programming/fundamentals/arrays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hdyar.com/IMMTechSite-Temporary/docs/programming/fundamentals/arrays/</guid>
      <description>Arrays #    </description>
    </item>
    
    <item>
      <title>Classes and Components</title>
      <link>http://hdyar.com/IMMTechSite-Temporary/docs/programming/fundamentals/classes-and-components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hdyar.com/IMMTechSite-Temporary/docs/programming/fundamentals/classes-and-components/</guid>
      <description>Classes and Components #  Classes are the fundamental building blocks of programming. A class allows us to create instances of the class, called objects, which we &amp;hellip; do everything with.
Oddly enough, in Unity programming, we don&amp;rsquo;t use classes that often. This is a lie. We use them in every single script we right, but we let Unity handle the creation and destruction of our classes for us. This is because most of our classes will be a unity component.</description>
    </item>
    
    <item>
      <title>Serialization and Attributes</title>
      <link>http://hdyar.com/IMMTechSite-Temporary/docs/programming/unity/tips-and-tricks/serialization-and-attributes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hdyar.com/IMMTechSite-Temporary/docs/programming/unity/tips-and-tricks/serialization-and-attributes/</guid>
      <description>Serialization and Attributes #    </description>
    </item>
    
    <item>
      <title></title>
      <link>http://hdyar.com/IMMTechSite-Temporary/docs/unity/virtual-reality/from-zero-to-oculus-quest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hdyar.com/IMMTechSite-Temporary/docs/unity/virtual-reality/from-zero-to-oculus-quest/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Simple State Machine</title>
      <link>http://hdyar.com/IMMTechSite-Temporary/docs/programming/architecture/simple-state-machine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hdyar.com/IMMTechSite-Temporary/docs/programming/architecture/simple-state-machine/</guid>
      <description>Creating a simple state machine in Unity #    Additional Resources #   One Wheel Studio - The State Pattern Habrador - State Pattern Tutorial Game Programming Patterns Book. Chapter on State  </description>
    </item>
    
    <item>
      <title>Adjusting Layouts</title>
      <link>http://hdyar.com/IMMTechSite-Temporary/docs/unity/unity-interface/layouts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hdyar.com/IMMTechSite-Temporary/docs/unity/unity-interface/layouts/</guid>
      <description>Adjusting Layouts and Customizing Unity #    </description>
    </item>
    
    <item>
      <title>Assets</title>
      <link>http://hdyar.com/IMMTechSite-Temporary/docs/unity/unity-fundamentals/assets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hdyar.com/IMMTechSite-Temporary/docs/unity/unity-fundamentals/assets/</guid>
      <description>What are Assets? #  An asset is an actual file on your computer. We store Assets in the “Assets” folder inside of our unity project folder. Assets are any item in Unity that we may want to use.
When we select an asset in the project window, the Inspector will show us it’s import properties. These are often very important, they tell Unity how to handle the file. For example: fixing scale issues with 3D models.</description>
    </item>
    
    <item>
      <title>Collapsing Code Exercise</title>
      <link>http://hdyar.com/IMMTechSite-Temporary/docs/programming/fundamentals/collapsing-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hdyar.com/IMMTechSite-Temporary/docs/programming/fundamentals/collapsing-code/</guid>
      <description>Collapsing Code #  A basic exercise to help you think about code execution.
  </description>
    </item>
    
    <item>
      <title>Creating Builds</title>
      <link>http://hdyar.com/IMMTechSite-Temporary/docs/unity/unity-fundamentals/builds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hdyar.com/IMMTechSite-Temporary/docs/unity/unity-fundamentals/builds/</guid>
      <description>Unity Builds #  Scene Information #  Unity supports a number of &amp;lsquo;Build Targets&amp;rsquo;, or platforms that it can create executable files for. Desktop software for Windows, Mac, and Linux - of course, but also mobile platforms like Android and iOS, WebGL targets for playing games in the web browser on sites like itch.io, and game consoles like the Xbox or the Playstation .
I will use the terms &amp;lsquo;Build Target&amp;rsquo; and &amp;lsquo;Platform&amp;rsquo; interchangeably on this page.</description>
    </item>
    
    <item>
      <title>Data-Oriented Design with Scriptable Objects</title>
      <link>http://hdyar.com/IMMTechSite-Temporary/docs/programming/architecture/data-oriented-design-scriptable-objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hdyar.com/IMMTechSite-Temporary/docs/programming/architecture/data-oriented-design-scriptable-objects/</guid>
      <description>Data-oriented Design #  I think one of the best introductions to pragmatic data-oriented design is the 2017 talk that Ryan Hipple gave at the Unity Connect conference. It also introduces the basics of ScriptableObjects.
   After you have watched the above video, I recommend checking out the asset ScriptableObject-Architecture on the asset store. It&amp;rsquo;s an implementation of the ideas of the above talk, but really nicely done. It&amp;rsquo;s open source too.</description>
    </item>
    
    <item>
      <title>Event Systems</title>
      <link>http://hdyar.com/IMMTechSite-Temporary/docs/programming/architecture/event-systems/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hdyar.com/IMMTechSite-Temporary/docs/programming/architecture/event-systems/</guid>
      <description>Event Systems #    </description>
    </item>
    
    <item>
      <title>From Sketchfab To Unity</title>
      <link>http://hdyar.com/IMMTechSite-Temporary/docs/unity/3d-models/from-sketchfab-to-unity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hdyar.com/IMMTechSite-Temporary/docs/unity/3d-models/from-sketchfab-to-unity/</guid>
      <description>From Sketchfab To Unity #  This video was recorded as review for the in-class lecture on the Exquisite museum project, posted here for future reference.
  </description>
    </item>
    
    <item>
      <title>Notes on File Management</title>
      <link>http://hdyar.com/IMMTechSite-Temporary/docs/digital-media-fundamentals/notes-on-file-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hdyar.com/IMMTechSite-Temporary/docs/digital-media-fundamentals/notes-on-file-management/</guid>
      <description>Notes on File Management #    </description>
    </item>
    
    <item>
      <title>Setting up a Rig with Mixamo</title>
      <link>http://hdyar.com/IMMTechSite-Temporary/docs/unity/3d-models/rig-with-mixamo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hdyar.com/IMMTechSite-Temporary/docs/unity/3d-models/rig-with-mixamo/</guid>
      <description>Setting up a Rig with Mixamo #  This is an older video, I promise some useful information is hidden in there somewhere.
The video got demonitized (it was never monitized) because of an automatic copywrite claim by Katy Perry. So that&amp;rsquo;s fun. You should be able to watch it on youtube.   </description>
    </item>
    
    <item>
      <title>Static Objects in C# and Unity</title>
      <link>http://hdyar.com/IMMTechSite-Temporary/docs/programming/advanced/static-objects-and-unity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hdyar.com/IMMTechSite-Temporary/docs/programming/advanced/static-objects-and-unity/</guid>
      <description>Static Objects #    </description>
    </item>
    
    <item>
      <title>String Formatting</title>
      <link>http://hdyar.com/IMMTechSite-Temporary/docs/programming/unity/tips-and-tricks/string-formatting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hdyar.com/IMMTechSite-Temporary/docs/programming/unity/tips-and-tricks/string-formatting/</guid>
      <description>String Formatting and Debug.Log: Unity Nice-to-knows #    </description>
    </item>
    
    <item>
      <title>The Hierarchy Window</title>
      <link>http://hdyar.com/IMMTechSite-Temporary/docs/unity/unity-fundamentals/hierarchy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hdyar.com/IMMTechSite-Temporary/docs/unity/unity-fundamentals/hierarchy/</guid>
      <description>The Hierarchy #  The hierarchy window shows us a list of all of our GameObjects in a scene. It&amp;rsquo;s a one-dimensional view of the scene, represented as a list.   It also is where we can group GameObjects together by dragging and dropping them. This is called “parenting”. It’s not just a visual organizational tool, it can have a major impact on how objects in the scene behave.</description>
    </item>
    
    <item>
      <title>The Scene View</title>
      <link>http://hdyar.com/IMMTechSite-Temporary/docs/unity/unity-interface/scene-view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hdyar.com/IMMTechSite-Temporary/docs/unity/unity-interface/scene-view/</guid>
      <description>The Scene View #  The Scene View, or Scene Window, is where we will spend the majority of our time in Unity. It allows us to see our scene, and edit and select objects.
The scene View is most closely linked to the Hierarchy – they are both ways to edit a scene, and the Game View.
Read the page in the Unity Manual on the Scene View, the Scene View Control Bar, and Gizmos.</description>
    </item>
    
  </channel>
</rss>
