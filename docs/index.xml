<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Guidebook</title>
    <link>http://guidebook.hdyar.com/</link>
    <description>Recent content on The Guidebook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://guidebook.hdyar.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Syntax of Variables and Functions</title>
      <link>http://guidebook.hdyar.com/docs/programming/fundamentals/basic-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/fundamentals/basic-syntax/</guid>
      <description>Basic Syntax: Variables and Functions #  Variables #  Declaring Variables #  The keywords to declare a variable are as follows:
 [scope][space][type][space][variableName][semicolon]
scope type variableName;
 When naming our variables, we use lowercaseCamelCase. Also called pascalCase.
You cannot start a variable with a number.
C# requires that we declare the variable type. We can&amp;rsquo;t just say &amp;ldquo;let x be some variable. A number? A word? I dunno, you figure it out&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>The Architecture Lecture</title>
      <link>http://guidebook.hdyar.com/docs/programming/architecture/the-architecture-lecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/architecture/the-architecture-lecture/</guid>
      <description>The Architecture Lecture
  </description>
    </item>
    
    <item>
      <title>The Intro Lectures</title>
      <link>http://guidebook.hdyar.com/docs/unity/unity-fundamentals/the-intro-lectures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/unity/unity-fundamentals/the-intro-lectures/</guid>
      <description>The Intro Lectures #  These are recordings of in-class lectures I give about Unity. I hope most of this website will get to the point where Unity information is not hidden in these hour-long videos to reference, but It is still important for me to have the lectures proper recorded and online. They are not about a &amp;ldquo;easy win&amp;rdquo; or first &amp;ldquo;fun&amp;rdquo; project, and you won&amp;rsquo;t necessarily have the confidence to do much afterwards, but I am working on building out a solid foundation of knowledge to build on top of, so to speak.</description>
    </item>
    
    <item>
      <title>Unity Project Basics</title>
      <link>http://guidebook.hdyar.com/docs/unity/unity-fundamentals/project-basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/unity/unity-fundamentals/project-basics/</guid>
      <description>Unity Project Basics #    </description>
    </item>
    
    <item>
      <title>Conditionals</title>
      <link>http://guidebook.hdyar.com/docs/programming/fundamentals/conditionals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/fundamentals/conditionals/</guid>
      <description>Conditionals #  A conditional is something that can be true or false.
Boolean #  The simplest conditional is a &amp;ldquo;boolean&amp;rdquo; data type. A boolean is a variable that can be equal to either &amp;ldquo;True&amp;rdquo; or &amp;ldquo;False&amp;rdquo;, and Nothing else. They are stored as a single bit, a 1 or a 0, so they literally, can only be true or false.
In C#, and in most programming languages, this data type is called &amp;ldquo;bool&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Syntax of Code Flow</title>
      <link>http://guidebook.hdyar.com/docs/programming/fundamentals/syntax-of-code-flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/fundamentals/syntax-of-code-flow/</guid>
      <description>Code Flow #  Inside of functions, there are a number of different ways to change how code executes. Without messing with code flow, and just having a bunch of statements, code will execute top to bottom, left to right. Code flow is how we get more complicated.
There are 2 main ways to manipulate code flow: Branches and Loops.
Branches, which will likely never be referred to as &amp;ldquo;branches&amp;rdquo; again, are a way of executing functions only in some situations.</description>
    </item>
    
    <item>
      <title>Arrays</title>
      <link>http://guidebook.hdyar.com/docs/programming/fundamentals/arrays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/fundamentals/arrays/</guid>
      <description>Arrays #    </description>
    </item>
    
    <item>
      <title>Classes and Components</title>
      <link>http://guidebook.hdyar.com/docs/programming/fundamentals/classes-and-components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/fundamentals/classes-and-components/</guid>
      <description>Classes and Components #  Classes are the fundamental building blocks of programming. A class allows us to create instances of the class, called objects, which we &amp;hellip; do everything with.
Oddly enough, in Unity programming, we don&amp;rsquo;t use classes that often. This is a lie. We use them in every single script we right, but we let Unity handle the creation and destruction of our classes for us. This is because most of our classes will be a unity component.</description>
    </item>
    
    <item>
      <title>Serialization and Attributes</title>
      <link>http://guidebook.hdyar.com/docs/programming/unity-and-programming/tips-and-tricks/serialization-and-attributes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/unity-and-programming/tips-and-tricks/serialization-and-attributes/</guid>
      <description>Serialization and Attributes #    </description>
    </item>
    
    <item>
      <title>Serialization and Attributes</title>
      <link>http://guidebook.hdyar.com/docs/programming/unity/tips-and-tricks/serialization-and-attributes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/unity/tips-and-tricks/serialization-and-attributes/</guid>
      <description>Serialization and Attributes #    </description>
    </item>
    
    <item>
      <title></title>
      <link>http://guidebook.hdyar.com/docs/unity/virtual-reality/from-zero-to-oculus-quest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/unity/virtual-reality/from-zero-to-oculus-quest/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Basic Level Manager</title>
      <link>http://guidebook.hdyar.com/docs/unity/toolbox/basic-level-manager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/unity/toolbox/basic-level-manager/</guid>
      <description>A Basic Level Manager #  For an explanation of this code, see this video on scene switching, where the code is written and explained.
LevelManager.cs #  using UnityEngine; using UnityEngine.SceneManagement; public class LevelManager : MonoBehaviour { public void RestartLevel() { SceneManager.LoadScene(SceneManager.GetActiveScene().name); } public void GoToNextScene() { //Get the current level build Index  int current = SceneManager.GetActiveScene().buildIndex; //increase it by one  int next = current + 1; int total = SceneManager.</description>
    </item>
    
    <item>
      <title>A Few Metaphors</title>
      <link>http://guidebook.hdyar.com/docs/programming/fundamentals/a-few-metaphors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/fundamentals/a-few-metaphors/</guid>
      <description>A Few Metaphors #  I generally do not like teaching with metaphors. They can provide quick high-level insight, but I find they can get in the way when we wish to expand on the high-level concept in lower-level ways. It&amp;rsquo;s like learning a mental trick to do multiplication - you might be presented with a problem that you know the answer to, having memorized it, but instead of simply having it, you find yourself walking through the steps of your &amp;ldquo;trick&amp;rdquo; in your head.</description>
    </item>
    
    <item>
      <title>A Simple State Machine</title>
      <link>http://guidebook.hdyar.com/docs/programming/architecture/simple-state-machine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/architecture/simple-state-machine/</guid>
      <description>Creating a simple state machine in Unity #    Additional Resources #   One Wheel Studio - The State Pattern Habrador - State Pattern Tutorial Game Programming Patterns Book. Chapter on State  </description>
    </item>
    
    <item>
      <title>Accessing Data (from elsewhere)</title>
      <link>http://guidebook.hdyar.com/docs/programming/architecture/accessing-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/architecture/accessing-data/</guid>
      <description>How to Access Data From Another Script in Unity #  To access data that an object has, we need a reference to the appropriate instance of the object. The real challenge is, for the most part, getting the appropriate reference (&amp;ldquo;resolving&amp;rdquo; a &amp;ldquo;dependency&amp;rdquo;), and not actually accessing the data.
Also see: Data-oriented design.
Also see: Event Systems.
Public and Serialized Fields #  The simplest, easiest, minimum-viable option is to make a public field.</description>
    </item>
    
    <item>
      <title>Adjusting Layouts</title>
      <link>http://guidebook.hdyar.com/docs/unity/unity-interface/layouts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/unity/unity-interface/layouts/</guid>
      <description>Adjusting Layouts and Customizing Unity #    </description>
    </item>
    
    <item>
      <title>Aspect Ratios</title>
      <link>http://guidebook.hdyar.com/docs/digital-media-fundamentals/aspect-ratios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/digital-media-fundamentals/aspect-ratios/</guid>
      <description>Aspect Ratios #  What is an Aspect Ratio? #  Aspect ratios are proportional relationships of the length and width of an image or video. It is expressed as a number compared to another number (a:b).
They can also be written as a decimal number (1.78), which is just the two ratio divided. If one side is length 1, or a, the other side is length b, or the ratio.</description>
    </item>
    
    <item>
      <title>Assets</title>
      <link>http://guidebook.hdyar.com/docs/unity/unity-fundamentals/assets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/unity/unity-fundamentals/assets/</guid>
      <description>What are Assets? #  An asset is an actual file on your computer. We store Assets in the “Assets” folder inside of our unity project folder. Assets are any item in Unity that we may want to use.
When we select an asset in the project window, the Inspector will show us it’s import properties. These are often very important, they tell Unity how to handle the file. For example: fixing scale issues with 3D models.</description>
    </item>
    
    <item>
      <title>Binary</title>
      <link>http://guidebook.hdyar.com/docs/digital-media-fundamentals/binary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/digital-media-fundamentals/binary/</guid>
      <description>Binary #  &amp;lsquo;binary&amp;rsquo; Refers either to binary numbers or binary code, both of which are base 2 representations of information. We can do math with binary numbers, and store data (inclding numbers) with binary code, also called binary encoding.
Binary Numbers Basics #  A video I recorded on Binary:
  The youtube channel &amp;lsquo;Computerphile&amp;rsquo; has a number of good videos on the topic:
Why Use Binary? #    Floating Point Numbers #    </description>
    </item>
    
    <item>
      <title>Clicking On Objects in 3D</title>
      <link>http://guidebook.hdyar.com/docs/unity/toolbox/clicking-on-objects-in-3d/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/unity/toolbox/clicking-on-objects-in-3d/</guid>
      <description>Clicking On Objects in 3D #  Clicking on objects is a non-trivial task, despite how often we implement this behavior. Luckily, it&amp;rsquo;s not terribly difficult.
There are two challenges:
 The mouse is in screen-space, calculated in pixel-distance away from the top-left of the screen. Objects, on the other hand, are in world-space: they have a position in the scene. Objects in 3D can overlap each other visually. How do we know which one is &amp;ldquo;under&amp;rdquo; the mouse, and only select it?</description>
    </item>
    
    <item>
      <title>Collapsing Code Exercise</title>
      <link>http://guidebook.hdyar.com/docs/programming/fundamentals/collapsing-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/fundamentals/collapsing-code/</guid>
      <description>Collapsing Code #  A basic exercise to help you think about code execution.
  </description>
    </item>
    
    <item>
      <title>Collision Events</title>
      <link>http://guidebook.hdyar.com/docs/programming/unity-and-programming/collision-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/unity-and-programming/collision-events/</guid>
      <description>Unity Collision Events #  Overview Video #  A (slow) video walking through setup and common mistakes for using collision events.
  Example #  A really common pattern when using collision events is to check if the thing we hit has a certain tag, or has a certain component.
GetComponent is slower than using CompareTag, so we prefer that - however, it can quickly become impractical.
void OnCollisionEnter(Collision other) { if (other.</description>
    </item>
    
    <item>
      <title>Command Pattern</title>
      <link>http://guidebook.hdyar.com/docs/programming/architecture/patterns/command-pattern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/architecture/patterns/command-pattern/</guid>
      <description>Implementing a Command Pattern in Unity #    The code can be found here: https://github.com/hunterdyar/UnitySimpleSokabon.
Command Pattern video by Infallible Code #    </description>
    </item>
    
    <item>
      <title>Components</title>
      <link>http://guidebook.hdyar.com/docs/unity/unity-fundamentals/components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/unity/unity-fundamentals/components/</guid>
      <description>What are Components? #  Components are where the real functionality of GameObjects gets implemented.
The Transform component is part of every single GameObject in Unity. You can’t delete it, because every gameObject has to have one. An Empty game object still has a position in the scene. It gives objects positions, rotations, and scales. It also handles how objects can be “children” or “parents” of each other.
The Default Main Camera in new scenes have three components: Transform, Camera, and Audio Listener.</description>
    </item>
    
    <item>
      <title>Confusion vs. Complexity</title>
      <link>http://guidebook.hdyar.com/docs/digital-media-fundamentals/confusion-and-complexity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/digital-media-fundamentals/confusion-and-complexity/</guid>
      <description>Confusion vs. Complexity. #  Learn the difference between confusion and complexity.
Complexity is a status of a thing. Things can be complex. Confusion is a mental state. It is inside of you, a reflection of your relationship to the software.
When you are confused, stop and figure out what it is that is confusing you. &amp;ldquo;Why did this person in this video tutorial choose to do it this way?&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Coroutines</title>
      <link>http://guidebook.hdyar.com/docs/programming/advanced/coroutines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/advanced/coroutines/</guid>
      <description>Coroutines Overview Video #    Implementing Coroutines for grid movement in a project. #    Coroutine Syntax #  void Start() { //whenever we want to start a coroutine, we call &amp;#39;StartCoroutine&amp;#39;  StartCoroutine(CoroutineName()); } //a normal function of return type &amp;#34;IEnumerator&amp;#34;. Can take arguments. IEnumerator CoroutineName() { //do something  yield return null;//wait for right after next update loop  yield return new WaitForSeconds(0.5f);//wait for half a second } Movement With Coroutines Example #  public IEnumerator MoveTo(Vector3 destination, float timeToMove) { Vector3 start = transform.</description>
    </item>
    
    <item>
      <title>Creating Builds</title>
      <link>http://guidebook.hdyar.com/docs/unity/unity-fundamentals/builds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/unity/unity-fundamentals/builds/</guid>
      <description>Unity Builds #  Scene Information #  Unity supports a number of &amp;lsquo;Build Targets&amp;rsquo;, or platforms that it can create executable files for. Desktop software for Windows, Mac, and Linux - of course, but also mobile platforms like Android and iOS, WebGL targets for playing games in the web browser on sites like itch.io, and game consoles like the Xbox or the Playstation .
I will use the terms &amp;lsquo;Build Target&amp;rsquo; and &amp;lsquo;Platform&amp;rsquo; interchangeably on this page.</description>
    </item>
    
    <item>
      <title>Creativity vs. Execution</title>
      <link>http://guidebook.hdyar.com/docs/digital-media-fundamentals/creative-vs-execution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/digital-media-fundamentals/creative-vs-execution/</guid>
      <description>Creative Level Work vs. Execution Level Work #  Let us identify different ways working, which might also call &amp;ldquo;styles of problem solving&amp;rdquo;, &amp;ldquo;types of work&amp;rdquo;, or &amp;ldquo;methods of creative engagement&amp;rdquo;.
To start with an example, consider driving. When we all started learning how to drive, we had to think about every little mechanical action we took. Where do my hands go on the wheel. How hard do I press on the break.</description>
    </item>
    
    <item>
      <title>Data-Oriented Design with Scriptable Objects</title>
      <link>http://guidebook.hdyar.com/docs/programming/architecture/data-oriented-design-scriptable-objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/architecture/data-oriented-design-scriptable-objects/</guid>
      <description>Data-oriented Design #  I think one of the best introductions to pragmatic data-oriented design is the 2017 talk that Ryan Hipple gave at the Unity Connect conference. It also introduces the basics of ScriptableObjects.
   After you have watched the above video, I recommend checking out the asset ScriptableObject-Architecture on the asset store. It&amp;rsquo;s an implementation of the ideas of the above talk, but really nicely done. It&amp;rsquo;s open source too.</description>
    </item>
    
    <item>
      <title>Event Systems</title>
      <link>http://guidebook.hdyar.com/docs/programming/architecture/event-systems/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/architecture/event-systems/</guid>
      <description>Event Systems #    A &amp;lsquo;Real Life&amp;rsquo; Example #     The code for this example is part of this project.</description>
    </item>
    
    <item>
      <title>Follow-Along Project</title>
      <link>http://guidebook.hdyar.com/docs/programming/architecture/follow-along-project/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/architecture/follow-along-project/</guid>
      <description>The following project is for students to follow along with and create a project with me, one that focuses on actually making an entire thing that has multiple levels and a game state.
Playlist of videos.
Part 1 #    This part we think of our game, make a todo list, use Unity&amp;rsquo;s tilemap system to create a level, and create a player movement system. We write our first recursive function, and we manage picking up items as we move.</description>
    </item>
    
    <item>
      <title>From Sketchfab To Unity</title>
      <link>http://guidebook.hdyar.com/docs/unity/3d-models/from-sketchfab-to-unity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/unity/3d-models/from-sketchfab-to-unity/</guid>
      <description>From Sketchfab To Unity #  This video was recorded as review for the in-class lecture on the Exquisite museum project, posted here for future reference.
  </description>
    </item>
    
    <item>
      <title>Input System</title>
      <link>http://guidebook.hdyar.com/docs/programming/unity-and-programming/input-system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/unity-and-programming/input-system/</guid>
      <description>Unity has multiple Input Systems, which is confusing for beginners. Built into Unity by default is access to the &amp;ldquo;old&amp;rdquo; input system, which this page will detail. The &amp;ldquo;old&amp;rdquo; system is simpler and easier to use for beginners. Unity also has a &amp;ldquo;new&amp;rdquo; input system that you can switch to, which is far more advanced and capable, but requires a bit of setup before you can use, and utilizes more advanced c# features.</description>
    </item>
    
    <item>
      <title>Installing Unity and an IDE</title>
      <link>http://guidebook.hdyar.com/docs/unity/setup/installing-unity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/unity/setup/installing-unity/</guid>
      <description>Installing Unity - A Thorough Guide #  Unity is a large and complicated piece of software. This document is thorough, if you just want to get started, you can find more concise explainers elsewhere. I don&amp;rsquo;t recommend that - You will need to know all of the ins-and-outs of setting up a development environment, especially when troubleshooting.
To develop games in Unity, you need to do the following:
 Create a Unity Account Install the Unity Hub Activate a license for Unity (this is free) Install a version of Unity via the Hub Install an IDE (A fancy text editor) Tell Unity to use your IDE  The Unity Hub manages installing other versions of Unity for us.</description>
    </item>
    
    <item>
      <title>Instantiating GameObjects</title>
      <link>http://guidebook.hdyar.com/docs/unity/toolbox/instantiating/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/unity/toolbox/instantiating/</guid>
      <description>Instantiating Objects #  It is very common to need to create GameObjects during the games runtime.
Creating Objects from Scratch. #  To do that, one way is to simply create a new GameObject like we would any instance of a class. Doing this creates an empty GameObject. From there, we can use the AddComponent functions to set it up.
//Create a GameObject. Store a reference to it in a GameObject variable called &amp;#39;something&amp;#39;.</description>
    </item>
    
    <item>
      <title>Interfaces</title>
      <link>http://guidebook.hdyar.com/docs/programming/advanced/interfaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/advanced/interfaces/</guid>
      <description>Interfaces #  Introduction Video #  {{ youtube Qmlik-fBTW4 }}
Further Resources on Interfaces #   MSDN Documentation Page Infallible Code Video on Interfaces  </description>
    </item>
    
    <item>
      <title>Namespaces</title>
      <link>http://guidebook.hdyar.com/docs/programming/architecture/namespaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/architecture/namespaces/</guid>
      <description>Namespaces #    </description>
    </item>
    
    <item>
      <title>Notes on File Management</title>
      <link>http://guidebook.hdyar.com/docs/digital-media-fundamentals/notes-on-file-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/digital-media-fundamentals/notes-on-file-management/</guid>
      <description>Notes on File Management #    </description>
    </item>
    
    <item>
      <title>Object Oriented Programming</title>
      <link>http://guidebook.hdyar.com/docs/programming/advanced/object-oriented-programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/advanced/object-oriented-programming/</guid>
      <description>Object Oriented Programming #  Object oriented programming is not unique to C# programming. The concepts introduced here are utilized by an incredible number of programming languages. Java, C++, Python, R, Ruby, Swift, and Perl are some other languages that use an object-oriented paradigm.
Object oriented programming is programming around data structures that contain variables and functions.
There are three main &amp;ldquo;pillars&amp;rdquo; of object oriented programming: Encapsulation, Inheritance, and Polymorphism. Depending on who you ask, there is a fourth pillar: Abstraction.</description>
    </item>
    
    <item>
      <title>Object Oriented Syntax</title>
      <link>http://guidebook.hdyar.com/docs/programming/advanced/object-oriented-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/advanced/object-oriented-syntax/</guid>
      <description>Object-Oriented Syntax #  Declaring Classes #  The syntax for declaring a class is as demonstrated:
public class ClassName { } public class ChildClassName : ParentClassName { } We almost always write one class per file. We tend to keep sibling classes as sibling files in our file structure, although this is not necessary. C# does not care where your files are located, so you have the freedom to organize them in a way that makes sense to you, your project, your team, and your source control system.</description>
    </item>
    
    <item>
      <title>Order Of Development</title>
      <link>http://guidebook.hdyar.com/docs/digital-media-fundamentals/order-of-development/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/digital-media-fundamentals/order-of-development/</guid>
      <description>Order Of Development #  Work along your protects primary axis. Different projects require different workflows, and identifying this is often challenging for beginners.
Generally: work out a draft and refine. What constitutes draft? What elements are refinement? What is necessary for understanding core, fundamental, parts of your project?
In animation, One doesn&amp;rsquo;t animate Start to finish, timing is a key part or animation, so the animator starts with notable moment poses, and timings, and places key frames first, then they go add the ih between frames, after spending time tweaking the timing.</description>
    </item>
    
    <item>
      <title>Packages, Assets, and Modules</title>
      <link>http://guidebook.hdyar.com/docs/unity/setup/packages-assets-modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/unity/setup/packages-assets-modules/</guid>
      <description>Unity Package Manager, Importing Assets, and Adding Modules #    </description>
    </item>
    
    <item>
      <title>Parent-Child Relationships</title>
      <link>http://guidebook.hdyar.com/docs/unity/unity-fundamentals/parent-child-relationships/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/unity/unity-fundamentals/parent-child-relationships/</guid>
      <description>Parent-Child relationships #  One core concept to understand is that of &amp;lsquo;parenting&amp;rsquo;. Parent/Child relationships are edited in the hierarchy window.
If we remember that scenes are cartesian coordinate systems, we can define any point as a point on the number line. It can be thought of as the distance away from the scene origin on each axis. We will use the words scene and world interchangeably when talking about parenting.</description>
    </item>
    
    <item>
      <title>Prefabs</title>
      <link>http://guidebook.hdyar.com/docs/unity/unity-fundamentals/prefabs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/unity/unity-fundamentals/prefabs/</guid>
      <description>Prefabs #    </description>
    </item>
    
    <item>
      <title>Refactoring a Basic Script Example</title>
      <link>http://guidebook.hdyar.com/docs/programming/architecture/refactoring-a-basic-script-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/architecture/refactoring-a-basic-script-example/</guid>
      <description>Refactoring a Basic Script #    </description>
    </item>
    
    <item>
      <title>Scene Switching</title>
      <link>http://guidebook.hdyar.com/docs/unity/unity-102/scene-switching/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/unity/unity-102/scene-switching/</guid>
      <description>Scene Switching and a Basic Level Manager #    The Level Manager Code #  The code for just the level manager is here, and the entire project is available on Github here.</description>
    </item>
    
    <item>
      <title>Setting up a Rig with Mixamo</title>
      <link>http://guidebook.hdyar.com/docs/unity/3d-models/rig-with-mixamo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/unity/3d-models/rig-with-mixamo/</guid>
      <description>Setting up a Rig with Mixamo #  This is an older video, I promise some useful information is hidden in there somewhere.
The video got demonitized (it was never monitized) because of an automatic copywrite claim by Katy Perry. So that&amp;rsquo;s fun. You should be able to watch it on youtube.   </description>
    </item>
    
    <item>
      <title>Simple LERP with Coroutines</title>
      <link>http://guidebook.hdyar.com/docs/unity/toolbox/simple-lerp-with-coroutines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/unity/toolbox/simple-lerp-with-coroutines/</guid>
      <description>Simple Linear Interpolation with Coroutines #  Here is an example script that uses a coroutine to lerp between two provided positions.
There is some extra code to allow the script to ping-pong back and forth between the positions.
In a real-life usage, you probably don&amp;rsquo;t want to enter world-positions manually in the unity inspector. You might use offsets, calculating the real-world start and and position by adding them to the current position.</description>
    </item>
    
    <item>
      <title>Singletons</title>
      <link>http://guidebook.hdyar.com/docs/programming/architecture/singleton-pattern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/architecture/singleton-pattern/</guid>
      <description>Singletons #  Prerequisites #  Understanding Static Objects and having a solid grasp of object oriented principles is a prerequisite for being able to effectively use the Singleton pattern.
In my opinion, singleton patters are great for single-scene games, but cause trouble once we start having to load, unload, or manage multiple scenes. I much prefer other approaches over singletons, like scriptableObjects.
Overview Video #    </description>
    </item>
    
    <item>
      <title>Static Objects in C# and Unity</title>
      <link>http://guidebook.hdyar.com/docs/programming/advanced/static-objects-and-unity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/advanced/static-objects-and-unity/</guid>
      <description>Static Objects #    </description>
    </item>
    
    <item>
      <title>String Formatting</title>
      <link>http://guidebook.hdyar.com/docs/programming/unity-and-programming/tips-and-tricks/string-formatting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/unity-and-programming/tips-and-tricks/string-formatting/</guid>
      <description>String Formatting and Debug.Log: Unity Nice-to-knows #    </description>
    </item>
    
    <item>
      <title>String Formatting</title>
      <link>http://guidebook.hdyar.com/docs/programming/unity/tips-and-tricks/string-formatting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/unity/tips-and-tricks/string-formatting/</guid>
      <description>String Formatting and Debug.Log: Unity Nice-to-knows #    </description>
    </item>
    
    <item>
      <title>The Game View</title>
      <link>http://guidebook.hdyar.com/docs/unity/unity-interface/game-view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/unity/unity-interface/game-view/</guid>
      <description>The Game View #  The game view is where we run our games. See the unity manual on the Game View.
First, our scene view camera and our game view camera are two completely separate things. The scene view, and its &amp;lsquo;camera&amp;rsquo; that you control with the mouse, is an editor tool. The camera&amp;rsquo;s location has no impact on the final, finished, game. The game view, then, allows us to see the games current actual state, how it will be rendered.</description>
    </item>
    
    <item>
      <title>The Hierarchy Window</title>
      <link>http://guidebook.hdyar.com/docs/unity/unity-interface/hierarchy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/unity/unity-interface/hierarchy/</guid>
      <description>The Hierarchy #  The hierarchy window shows us a list of all of our GameObjects in a scene. It&amp;rsquo;s a one-dimensional view of the scene, represented as a list.   It also is where we can group GameObjects together by dragging and dropping them. This is called “parenting”. It’s not just a visual organizational tool, it can have a major impact on how objects in the scene behave.</description>
    </item>
    
    <item>
      <title>The Scene View</title>
      <link>http://guidebook.hdyar.com/docs/unity/unity-interface/scene-view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/unity/unity-interface/scene-view/</guid>
      <description>The Scene View #  The Scene View, or Scene Window, is where we will spend the majority of our time in Unity. It allows us to see our scene, and edit and select objects.
While the scene view has been updated twice since these screenshots have been taken, in different versions of Unity, the buttons have moved around. In 2021.1 most of the tools are now inside of, or along the top of, the scene window itself.</description>
    </item>
    
    <item>
      <title>Types of Error Messages</title>
      <link>http://guidebook.hdyar.com/docs/programming/fundamentals/types-of-error-messages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/fundamentals/types-of-error-messages/</guid>
      <description>Types of Error Messages #  Not all error messages are created equally, and understanding the differences is important to being able to hunt down and squash the bugs that are causing the messages.
As far as C# is concerned, there are two types of error messages: Compiler Errors and Runtime Errors.
In terms of how you will encounter errors, I would like to add a third type: IDE Errors.</description>
    </item>
    
    <item>
      <title>UI System Basics</title>
      <link>http://guidebook.hdyar.com/docs/unity/user-interface/ugui-basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/unity/user-interface/ugui-basics/</guid>
      <description>Unity UI Basics Overview #    Resources #   Comparison Page Unity UGUI Manual  </description>
    </item>
    
    <item>
      <title>Vectors</title>
      <link>http://guidebook.hdyar.com/docs/programming/unity-and-programming/vectors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/unity-and-programming/vectors/</guid>
      <description>Vectors #  Vectors are a simple data structure that contain a set of floats - numbers. They are incredibly useful!
After looking through this high-level-overview page, I recommend reading this page on Vectors in the Unity manual.
Vector Overview #    Types of Vectors in Unity #  In Unity, we have a number of different &amp;lsquo;vector&amp;rsquo; data structures:
 Vector2 Vector3 Vector4  The number refers to the number of floats that the vector contains.</description>
    </item>
    
  </channel>
</rss>
