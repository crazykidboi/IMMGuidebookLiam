[{"id":0,"href":"/docs/programming/architecture/patterns/","title":"Patterns","section":"Architecture","content":"Patterns #  Code Patterns are common solutions to common problems in programming. Programmers tend to talk about them in extremes, but they\u0026rsquo;re just strategies. Keep in mind that you will always be making various concessions and affordances for your project, and you can\u0026rsquo;t shouldn\u0026rsquo;t simply apply patterns because you like them.\n"},{"id":1,"href":"/docs/blender/install-blender/","title":"Installing Blender","section":"Blender","content":"Installing Blender #  You can always download and install the latest stable release of Blender at blender.org.\nBlender Launcher #  Only if you want to use brand new or experimental features (at the time of writing, new Geometry Nodes), you may want to explore different development branches of Blender. Dealing with multiple versions of Blender on one machine can be annoying. The best way to do this is with a piece the open source software Blender Launcher.\nBlender launcher will download and manage different blender versions, and easily let you change shortcuts/file associations for them.\nMeshLab #  I also recommend installing MeshLab. MeshLab is open source software for working with models. It\u0026rsquo;s not modeling software, itself, it\u0026rsquo;s more like a set of processes and utilities.\nIn it\u0026rsquo;s own words, MeshLab is a\n \u0026hellip;system for processing and editing 3D triangular meshes. It provides a set of tools for editing, cleaning, healing, inspecting, rendering, texturing and converting meshes. It offers features for processing raw data produced by 3D digitization tools/devices and for preparing models for 3D printing.\n The first reason I recommend MeshLab is because it can import many different file types, and convert them to new file types. It can also more-robustly attempt to read and understand a corrupted 3D model. If you get a 3D model in some esoteric format that Blender cannot support, of it is corrupt, or just incredibly large - try bringing into MeshLab to convert it into a model that Blender can understand.\nIt\u0026rsquo;s also great for decimating giant (multi-gigabyte) 3D models into smaller ones - reducing the polycount. Particularly useful when working with 3D Scan data.\nYou may not need it for most day-to-day modeling, but if you do you will be glad you have it.\n"},{"id":2,"href":"/docs/programming/fundamentals/basic-syntax/","title":"Syntax of Variables and Functions","section":"Fundamentals","content":"Basic Syntax: Variables and Functions #  Variables #  Declaring Variables #  The keywords to declare a variable are as follows:\n [scope][space][type][space][variableName][semicolon]\nscope type variableName;\n When naming our variables, we use lowercaseCamelCase. Also called pascalCase.\nYou cannot start a variable with a number.\nC# requires that we declare the variable type. We can\u0026rsquo;t just say \u0026ldquo;let x be some variable. A number? A word? I dunno, you figure it out\u0026rdquo;. You can think of types as letting the compiler know how to interpret the sequence of bits (1s and 0s) that the variable is storing. Does 01011001 refer to the 8-bit binary number 89, Or the ascii character code for \u0026ldquo;Y\u0026rdquo;? In every programming language, the computer needs to know, and in C# it\u0026rsquo;s our responsibility to tell it.  Common data types are: string, int, float, bool, char.\nDeclaring data variables: #  public string weUseCamelCase;//Variable names uppercase every word except the first, and cannot start with numbers. We do not use snake_case. private int someNumber = 4;//you set values during declaration bool isAwesome = true; //The scope is \u0026#39;private\u0026#39; by default, so we don\u0026#39;t have to type \u0026#39;private\u0026#39;.  Data Structures #  Declaring structs is very similar to regular variables. We just use the type of the struct for the type: private Vector3 someVelocity; public Quaternion rotationStorage; Vector2 inputDir;\nWhere it differs is how we create structs. Structs use the same constructor/deconstructor syntax as classes. We type \u0026ldquo;new\u0026rdquo; then the type name, followed by parenthesis, and then we put our appropriate values in the parenthesis like parameters to a function. Vector3, the most common struct we use in Unity, takes 3 float values for its x, y,and z values in that order.  private Vector3 someVelocity = new Vector3(0,0,3);//0 on the x axis, 0 on the y axis, 3 on the z axis. Vector2 inputDir = new Vector2(-1,0); Vecto2 newInputDir = inputDir;//We don\u0026#39;t need to create new variables, we can copy other structs values. Vector3 otherDir = Vector3.right;//Here we copy a built-in variable, see below.  Vector3.right is a shorthand, its basically an already existing variable thats equal to Vector3(1,0,0). In the above example, we simply copied these values into our variable. Vector3.right (and the other short-hands) are much easier to type than \u0026ldquo;new Vector3(1,0,0)\u0026rdquo;, and makes the code easier to understand when reading it..  Declaring Classes #  The syntax for variables that store a class (or a reference to an instance of a class) is the same as structs. \u0026ldquo;private Thing something = new Thing();\u0026rdquo; There is just one notable exception: They do not have default values. When you declare a class, it will be null. We have to either set it equal to a new instance of the class. ( =new Thing() )\nFunctions #  Functions are also called methods in C#. There are pedantic differences, and these pedantic differences can differ between languages. I don\u0026rsquo;t want students to worry about it. We will use the terms \u0026ldquo;method\u0026rdquo; and \u0026ldquo;function\u0026rdquo; interchangably.\nSome programmers will be mad at me for this, so I\u0026rsquo;ll give you the 1 sentence version: In C#, \u0026lsquo;Function\u0026rsquo; is a more broad term for \u0026lsquo;things that include executable code\u0026rsquo;, where methods are a type of function. Other functions that aren\u0026rsquo;t methods include constructors, properties, indexers, events, and operators.  The Syntax for a function is simple. Just like variables, we start with the scope (public/private), then the return type, and then the function name (CapitalizedCamelCase). What makes a function a function (syntactically speaking) is parenthesis. They follow the function name without a space.\nThe parenthesis hold are \u0026lsquo;arguments\u0026rsquo; or \u0026lsquo;parameters\u0026rsquo;, but even when we don\u0026rsquo;t have any arguments, we still need the parenthesis. The () is how we can always recognize a function. After the parenthesis we put curly braces, which contain the code that makes up our function.\n [scope][space][returnType][space][FunctionName][(parenthesis)][{curlyBraces}]\nscope returntype functionName(){}\n private void Start() { //Code here, indented. } Creating Functions With Parameters #  To pass data into a function, we declare variables inside of the parenthesis. We declare them like a regular syntax for declaring a variable (without scope), inside of the parenthesis, separated by commas. They can only be used inside the function.\nVariables created this way are called \u0026ldquo;parameters\u0026rdquo; or \u0026ldquo;arguments\u0026rdquo;.  private void GiveMeSomeNumbersToWorkWith(int a, int b) { //This code now has two integer variables to work with, a and b. } private void GiveMeOtherInformation(string words, int andANumber) { //This function has been given a string variable and an integer variable. } private void GiveMeOtherInformation(float someNumber) { //This function has the same name as the above function. This is allowed so long as the paremeters are different. } Functions with the same name but different parameters are allowed in C#. We would say it has a different \u0026ldquo;method signature\u0026rdquo;. One would expect the functions to do the same thing. This is a way of writing the same function multiple times, except to allow for different types of input from the parameters. We have seen this with the \u0026ldquo;Instantiate\u0026rdquo; function from the intro roll-a-ball lesson.\nTake a look at the documentation for the Instantiate function built into Unity. Notice it has a number of different declarations.\n Indentation and spacing #  While C# does not care about your indentation, and doesn\u0026rsquo;t care about extra white-space, there are a set of standards that developers follow. It\u0026rsquo;s important for everyone on the same team to follow the same conventions, also called \u0026ldquo;standards\u0026rdquo;. Jetbrains Rider has a common set of standards built-into it, which are customizable. Setting up your IDE to use the same standard you follow makes it really easy.\nI recommend starting curly braces on a new line, and indenting code inside of curly braces. This way, one can draw a vertical line straight down from where a curly brace starts. If we see any other code at that indentation level, we can quickly identify that either 1) we need to indent it, or 2) we have messed something up. It makes seeing your code structure easy, which makes it easier to find bugs.\nIf statements do not need curly braces. If they don\u0026rsquo;t have one, they will automatically execute the single next line. This is a shorthand, and I do not recommend you follow it when you start coding. It is easier to make mistakes when you code isn\u0026rsquo;t formatted consistently. You have to remember that just these one-liner if statements are special. I say: don\u0026rsquo;t bother.\nWhatever standard you prefer, just remember to be consistent.\n//C# Does not care about line breaks. private void Start(){} //C# Does not care about line breaks. private void Start() {//We put the first curly brace on a new line \t//we indent every line of code inside of the curly braces \tif(something == true) { //Some other code inside curly braces, indented again. \tDebug.Log(\u0026#34;something is true.\u0026#34;); } }//the closing curly brace is at the same indentation as the first one, so we can tell which ones go with which. \nCalling Functions #  To execute a function, we just type the name of the function followed by parenthesis, and a semicolon. Just like any other statement in C#\nprivate void Start() { SayHelloWorld(); } private void SayHelloWorld() { Debug.Log(\u0026#34;Hello, World\u0026#34;); } \u0026ldquo;Executing\u0026rdquo;, \u0026ldquo;Running\u0026rdquo; and \u0026ldquo;Calling\u0026rdquo; functions are all perfectly fine ways to refer to the same thing: make it do it\u0026rsquo;s thing.  If the function has parameters, we pass those in, in order, separated by commas. We can type the values directly, or use a different variable whose value or reference will be passed along.\nprivate void Start() { SayHelloToMe(\u0026#34;World\u0026#34;);//prints \u0026#34;Hello, World\u0026#34;  string myName = \u0026#34;Abby\u0026#34;; SayHelloToUs(myName,\u0026#34;Ben\u0026#34;,\u0026#34;Chris\u0026#34;)//prints \u0026#34;Hello Abby, Ben, and Chris.\u0026#34; } private void SayHelloToMe(string yourName) { Debug.Log(\u0026#34;Hello, \u0026#34; + yourName); } private void SayHelloToUs(string a, string b, string c) { Debug.Log(\u0026#34;Hello \u0026#34;+a+\u0026#34;, \u0026#34;+b+\u0026#34;, and \u0026#34;+c+\u0026#34;.\u0026#34;); } "},{"id":3,"href":"/docs/programming/architecture/the-architecture-lecture/","title":"The Architecture Lecture","section":"Architecture","content":"The Architecture Lecture\n  "},{"id":4,"href":"/docs/unity/unity-fundamentals/the-intro-lectures/","title":"The Intro Lectures","section":"Fundamentals","content":"The Intro Lectures #  These are recordings of in-class lectures I give about Unity. I hope most of this website will get to the point where Unity information is not hidden in these hour-long videos to reference, but It is still important for me to have the lectures proper recorded and online. They are not about a \u0026ldquo;easy win\u0026rdquo; or first \u0026ldquo;fun\u0026rdquo; project, and you won\u0026rsquo;t necessarily have the confidence to do much afterwards, but I am working on building out a solid foundation of knowledge to build on top of, so to speak.\nThe purpose is to give you the knowledge that makes teaching yourself Unity easier.\nThese are not lectures designed for video, they are designed for mostly-listening students who are clicking away in Unity while I talk. What\u0026rsquo;s more: in video format I have expanded room for some more detail than I usually go over, as I don\u0026rsquo;t spend time walking around the room and letting students practice. Thus: sorry about the long-winded and rambling nature (but not really).\nIf you don\u0026rsquo;t know where to start, and are starting from scratch, you can start here.\nThe Intro Lesson #    The Roll-a-Ball Project #  A slow introduction to writing your first component. Follow along with this one.\n  Your First Assignment #  The next step is to step away from long videos, and just poke around in Unity. Here is your first assignment: Make a level for your roll-a-ball.\nPractice creating and moving GameObjects, manipulating the scene view, and creating assets (materials). Enter play mode and try rolling the ball through the level, then go back and change things. Try changing the balls mass, angular drag, or other physics settings.\nParent-Child Relationships #  Next, read this page on Parent/Child relationships in Unity.\nBefore continuing, I also recommend reading overviews of some of the Unity windows the Unity Interface section.\nA Camera Follow Script #  The next step, after we did the above assignment practice, is to create another script - a behavior that lets the camera object follow along with the player.\nProgramming and Game Design can be thought of as being two discreet roles. When we write our code, we are creating a set of tools with which we use to create the game. When we design the game, we use and manipulate these tools. This distinction may seem trivial when we are, alone, creating games (or whatever the project may be). It\u0026rsquo;s important because it helps guide us to writing nice clean, reusable, editable code. Things that we might want to change - like the players movement speed - should be accessible in the Inspector, we should not have to go into code to change design elements of the project.\n  Now we have created a nice, compartmentalized little script that we can use in many places that adds a simple behavior to whatever our GameObjects we want. A lot of Unity development is doing this. We create systems that exist without us having to go in and edit it. For example: Physics. You don\u0026rsquo;t have to extend Unity classes to use the physics system. You just use the components, and use public functions (like \u0026ldquo;AddForce\u0026rdquo;). We should aim to create our systems with the same independent philosophy.\nPrefabs #  Next, head over to this page on Prefabs and watch the video there.\nPart 4 #  Part 4: GameObject properties, Instantiating Objects, The Unity Event System, Collision Events, Basic Loops, and some other miscellaneous things.\n  "},{"id":5,"href":"/docs/unity/unity-fundamentals/project-basics/","title":"Unity Project Basics","section":"Fundamentals","content":"Unity Project Basics #    "},{"id":6,"href":"/docs/programming/fundamentals/conditionals/","title":"Conditionals","section":"Fundamentals","content":"Conditionals #  A conditional is something that can be true or false.\nBoolean #  The simplest conditional is a \u0026ldquo;boolean\u0026rdquo; data type. A boolean is a variable that can be equal to either \u0026ldquo;True\u0026rdquo; or \u0026ldquo;False\u0026rdquo;, and Nothing else. They are stored as a single bit, a 1 or a 0, so they literally, can only be true or false.\nIn C#, and in most programming languages, this data type is called \u0026ldquo;bool\u0026rdquo;.\nThe word \u0026ldquo;Boolean\u0026rdquo; comes from a mathematician named George Boole.  private bool trueOrFalse;//false by default. private bool isAmazing = true; We often use \u0026ldquo;is\u0026rdquo;, \u0026ldquo;are\u0026rdquo;, \u0026ldquo;can\u0026rdquo;, and similar prefixes in our variable names. (such as \u0026ldquo;bool isCool;\u0026quot;). This naming helps us read the code, it is grammatically easy to understand that this variable is something true or false.  Conditional Operators #  Booleans are great for storing something that is true or false, but they don\u0026rsquo;t help us dynamically determine if something is true or false (You know, the thing that makes computers more special than calculators). For that, we need operators.\nYou are probably familiar with mathematical operators:\n plus: + minus: - multiplication: * division: \\   In programming, an operator is like shorthand syntax. It\u0026rsquo;s a symbol with data on either side of it. It takes the left and right side of the operator, and then turns the whole thing into a new data value. The \u0026ldquo;+\u0026rdquo; operator takes two numbers to either side of it, mathematically adds them together, and returns the new single number of whatever their sum is.\n Conditional operators returns a bool. Common conditional operators:\n Greater Than: \u0026gt; Less Than: \u0026lt; Greater Than or Equal To: \u0026gt;= Less Than or Equal To: \u0026lt;= Is Equal To: == Is Not Equal To: !=  Pay attention to the \u0026gt;= and \u0026lt;= operators. We cannot flip around the greater than or equal to symbols. =\u0026gt; and =\u0026lt; are different symbols that mean something else. For example, =\u0026gt; is a \u0026lsquo;lambda operator\u0026rsquo;, and that would be gibberish to the compiler in the context of a conditional. So you\u0026rsquo;ll end up with an error.  Also note the == operator. In C# programming, one equal sign (=) will very specifically take the right-hand value and assign it to the left hand side. Two equals signs (==) will compare the left-hand and right-hand sides, and then evaluate if they are equivalent or not. They are used in completely different ways.\nUnfortunately, in english, we say \u0026ldquo;equals\u0026rdquo; for both of these different things. I recommend you read \u0026ldquo;==\u0026rdquo; as \u0026ldquo;Is Equal To?\u0026rdquo; and \u0026ldquo;=\u0026rdquo; as \u0026ldquo;is\u0026rdquo;.\n Logical Operators #  Logical Operators are used to connect multiple conditionals together to form another greater conditional. Like all operators, they consider the information to their left and their right (in this case bools), and they give us a new value, another bool.\nLogical Operators:\n And: \u0026amp;\u0026amp; Or: || Not: !  The | is the \u0026lsquo;pipe symbol\u0026rsquo;, it\u0026rsquo;s often located above the enter key on keyboards. OR is two pipe symbols: ||.  The AND operator will return true if either side of it are both true. If one or both of them are false, then it will be false.\n true \u0026amp;\u0026amp; true == true true \u0026amp;\u0026amp; false == false false \u0026amp;\u0026amp; true == false false \u0026amp;\u0026amp; false == false  The Or operator will return true if one or both of its sides are true.\n true || true == true true || false == true false || true == true false || false == false  Why two ampersands? Or two pipe symbols? It turns out you can use single ones too.\nThe operator evaluates either side of it. The code on the left evaluates first, then the code on the right. For an AND operator, if the left side is true, it doesn\u0026rsquo;t matter what the right side is. The double \u0026amp;\u0026amp; and double || versions of the operator will not evaluate the right-hand side if it isn\u0026rsquo;t needed. This is more efficient code, and considered good practice. As a rule of thumb, you should use it by default.\nRead about them in the official documentation.\nKnowing this, we can write conditionals in a way that evaluates simple parts before complicated ones. Like first checking if the right button is pressed (simple) before doing a physics/raycast calculation to see if the space is open to move into (complex). if(RightKeyIsPressed() \u0026amp;\u0026amp; ComplexFunctionToCheckIfWeCanMoveRight()){}. If the right key isn\u0026rsquo;t pressed, the \u0026amp;\u0026amp; symbol means we won\u0026rsquo;t bother even calling the complex function.\n  Boolean Algebra #  Of course, we can combine conditional operators and logical operators in complicated ways. When we do so, we can use parenthesis to disambiguate our order of operations, just like PEMDOS in algebra. We evaluate in parenthesis first, then left-to-right. See the official documentation for operator precedence, but I recommend you default to using parenthesis to disambiguate, instead of relying on knowing the order of logical operations. It may technically be unnecessary, but if you err on the side of writing readable code over concise code, you\u0026rsquo;ll have fewer bugs.\nSee Syntax of Code Flow for an explainer of if statements, the most common use case for conditionals.\nint a = 4; if(a \u0026lt; 5 \u0026amp;\u0026amp; a \u0026gt; 0) { //a must be 1,2,3,or 4 for this code to run. } int a = 4; int b = 5; bool runAnyway = true; if((a \u0026lt; b \u0026amp;\u0026amp; b == 7) || runAnyway) { //a must be less than b and b must be exactly 7, or runAnyway is equal to true. } Not #  Also called the \u0026ldquo;Logical Negation Operator\u0026rdquo;. A ! placed before a conditional will negate it, flipping it from true to false and from false to true.\n! is not an operator in the way I described operators above, with a left and right side. It\u0026rsquo;s more of a prefix. It\u0026rsquo;s still called an operator in the programming syntax sense of a symbol that has a special purpose and function.\n !true == false !false == true !(a == b) and (a != b) evaluate the same  The ! symbol is called \u0026ldquo;bang\u0026rdquo;, which is much easier to say than \u0026ldquo;exclamation point\u0026rdquo;.  //Hypothetical jump code for some game bool inTheAir = !CheckIfGrounded(); //We read this part as \u0026#34;if JumpKeyIsPressed And Not inTheAir\u0026#34;. //This is almost grammatically coherent. Naming variables and functions in this way can make your code easier to understand if(JumpKeyIsPressed() \u0026amp;\u0026amp; !inTheAir) { Jump(); } Bonus: Exclusive Or. #  The or function is true if either value is true, but what about when we want only one value to be true? In english, we would still use the word \u0026ldquo;or\u0026rdquo;, in the world of logic, we need to be more specific and disambiguate. So: \u0026ldquo;Exclusive Or\u0026rdquo;. The exclusive or operator will be true so long as one and only one of the two values are true.\nThe exclusive or operator is the ^ symbol.\n true ^ true == false true ^ false == true false ^ true == true false ^ false == false  "},{"id":7,"href":"/docs/blender/learn-blender/","title":"Learn Blender","section":"Blender","content":"Blender Learning Path #  This page is a learning path for learning Blender. Assuming you know nothing, you can follow through from top to bottom and learn enough Blender that you can continue teaching yourself. The goal is twofold: First: Learn enough to get past the initial difficulty curve into the space where you can hack and learn easily through external resources. Second: Learn the skills for Immersive Media development.\nThis webpage avoids any single \u0026lsquo;full tutorial\u0026rsquo;, and encourages you to jump between guides. If you want to ignore all of that, then the infamous (but now updated and improved for 3.0) Donut Tutorial from Blender Guru is how many blender users first learned the software. I don\u0026rsquo;t recommend this tutorial simply because it is long, and covers a very wide breadth of Blender features, most of which my students do not need. It absolutely will not hurt you to follow along through it - the more Blender features you learn, the easier it is to pick up other Blender features, as Blender\u0026rsquo;s features have consistent design paradigms and patterns.\nThe First Steps #  First, of course, Install Blender.\nNext, keep your eye on the version of blender mentioned in tutorials/guides. Blender made a significant change to it\u0026rsquo;s user interface in version 2.8. Versions for 2.7 and previous are out of date, but versions for 2.8 and newer should be fine.\nThe Blender Manual #  One of your best resources is one of the most obvious but least used: The Blender Manual. It is unused because it contains so much information, and makes no note of which pieces of information are important or are unimportant. It doesn\u0026rsquo;t help you prioritize knowledge, which is challenging because blender has so many things in it, and a lot of it\u0026rsquo;s features we can safely ignore.\nFirst, the introductory pages of the manual are helpful, and written with a way that does not assume you already know everything else.\nSecond, the manual is a great place to find out a specific piece of information, or learn how a specific tool works. Most of it\u0026rsquo;s sections begin with an \u0026ldquo;Introduction\u0026rdquo; page that is almost always extremely helpful to read.\n3D Models #  Installing blender isn\u0026rsquo;t really the first step. The first step is understanding the basics of 3D models - what they are, how computers represent and work with 3D data, and (abstractly) how computers render graphics. This prerequisite knowledge will be more useful than any follow-along blender tutorial, and allow you to not get lost in the weeds.\n Blender Manual: Structure What\u0026rsquo;s a 3D Model Anyway? Elements of a 3D Model \u0026amp; How Mesh Data Works  Sorry for the poor audio on this one.   I encourage you to dig deeper into how 3D models work, but you may feel like jumping ahead and finally digging into making something with blender. That\u0026rsquo;s okay. If so, be sure to circle back on these fundamental concepts, such as learning about how mesh data works.\n  The Interface #  The next step is understanding the interface. This, of course, makes following other tutorials easier. We want to be comfortable in the software, and not forced to go exact-step by exact-step through a sequence of memorized processes. We need to know what operations will affect our model, and what operations won\u0026rsquo;t. You should be able to return to a comfortable starting place if we get tripped up. A lot of this, yes, will simply come with practice. I want to emphasize spending time learning how to get around Blender before doing follow-along tutorials.\nWhen you\u0026rsquo;re following along with a tutorial, you want to follow the higher-level operations, not focus on some specific sequence of button presses (unless you\u0026rsquo;re learning a keyboard shortcut, I suppose). In other words, do your best to think in terms of \u0026ldquo;switch to edit mode\u0026rdquo; and not \u0026ldquo;now press tab\u0026rdquo;.\n Read through the Blenders manual section on User Interface, while navigating through and identifying the same elements in the software. Blender official tutorial is very good: Interface Overview Another Blender interface overview video, this one recorded on a mac.    The Viewport #   Viewport Navigation Video Learn about the difference between Orthographic and Perspective projections. Blender Manual: Perspective/Orthographic Blender Manual: Navigating Viewport Blender Manual: Fly/Walk Navigation    The Number Pad #  The Number Pad (numpad) is the set of 9 number keys laid out in a grid, usually on the right-hand side of a keyboard. Some tutorials assume you have a numpad and will make no mention of what to do if you don\u0026rsquo;t.\nIf you don\u0026rsquo;t, I recommend picking up an external one. This Bluetooth one from Microsoft isn\u0026rsquo;t the cheapest out there, but it\u0026rsquo;s from a reputable brand.\nSome guides will tell you to enable the \u0026ldquo;Emulate Numpad\u0026rdquo; setting in Blender. I don\u0026rsquo;t recommend this, it can mess with other keyboard shortcuts, which is particularly frustrating when trying to follow a tutorial that may use those shortcuts. Instead, I suggest just pressing the ~ (Tilde) key to bring up a pie-menu that allows you to quickly switch between different views.\nVocabulary and Jargon #  A lot of 3D Modeling vocabulary will be strange and particular. Computer Scientists, in general, have a bad habit of borrowing terms that sort-of-kind-of mean what they want from all sorts of other disciplines like mathematics. Listening to 3D modeler and animators talk can sound like gibberish. It\u0026rsquo;s more like the gibberish of a modern English speaker reading Beowulf, not the gibberish of a modern English speaker reading Latin - you can recognize a lot of the words being said, but what they mean by them doesn\u0026rsquo;t make any sense.\nMy largest pet peeve is that a lot of explanations tend to briefly, and slightly incorrectly, half-define the various terms they are using. A lot of instructional youtubers may say things that are nominally correct but are lacking in specificity or even wrong by technicality. This should bother you. My advice is to, at least, never trust any one individual\u0026rsquo;s word on the matter. Eventually, pick up a book that had an editor read over it, or find other more academic sources. Or just head to the glossary page in the Blender manual.\nA lot of \u0026ldquo;helpful\u0026rdquo; guides will also try to tell you what you don\u0026rsquo;t need to know. The goal is to be less overwhelming and less intimidating. But 3D modeling is hard! It is overwhelming, and can be intimidating. It takes time to learn, that\u0026rsquo;s okay. Keep a notes document and fill it with questions or vocab that seemed like it was skipped, so you can remember to go back to it later.\nThese guides sell themselves as aimed at getting started quickly and easily, without having to bother learning \u0026ldquo;all the hard stuff\u0026rdquo;. Avoid this line of thinking. Pedagogically, I suggest you attack the subject from three sides.\n A bottom-up foundational approach (learn all the jargon) A top-down pragmatic approach (follow-along videos to learn various sequence of steps) A practice/project based approach (trial and error)  Do all of it. Learn everything. No knowledge is bad knowledge, no one approach is best.\nBlender Projects \u0026amp; The Outliner #  Blender projects are primarily interfaced with via the Outliner.\n Blender Manual: Scenes and Objects Learn about Collections Outliner overview  The Properties Window #   Blender Properties Window Overview    Modeling #  Selecting and Moving Objects Basics #  Learning goals: Selection, Object/Edit modes\n Blender Manual: Selections and Active Object Selecting Objects \u0026amp; Transform Object and Edit mode Box, Circle, or Lasso?  Lazy Tutorials #  The Lazy Tutorials series by Ian Hubert may not, exactly, teach you blender. It will more likely inspire you to create things with Blender, and to not worry too much about all the little details, or doing things some \u0026lsquo;correct\u0026rsquo; way. Especially when just getting started.\nI particularly enjoy Creating Custom Buildings, Make Cities with Blender, and Animate Moths in Blender.\nWhile you are at it, Ian Hubert\u0026rsquo;s talk from Blender Conference 2019, \u0026lsquo;World Building in Blender\u0026rsquo; is worth watching. Particularly, his comments at 28:03 on reference and mental models.\n  Modeling Basics #  2D to 3D Workflow #   Helpful video tutorial modeling low-poly animals Well paced step-by-step 2D Drawing to 3D Model aimed at character creation.    Extrude to Detail Workflow #   Extrude Blender 2.8 Beginner 3D Modeling Tutorial Common problems with extrude in Blender Loop Cut and Loop Select  Follow-Along #  At this point in your Blender journey, it\u0026rsquo;s past time to actually make something. If you haven\u0026rsquo;t followed along with some videos yet, please do follow one. They won\u0026rsquo;t explain why they are doing the various steps, or choosing various methods (you don\u0026rsquo;t want to only do follow-alongs), but going through the process can, nonetheless, reveal techniques and approaches. Just remember that there is no one correct way to do anything in Blender.\n Create a 3D Isometric Bedroom My own follow-along video about making mistakes and just trying things: Modeling a Mug in Blender (poorly)  Blender Daily Sketch Assignment #  In your Blender Projects folder (that you probably have by now?) create a new folder called \u0026ldquo;Dailies\u0026rdquo;. In that, create a new folder with the days date in YYYY-MM-DD format (so when sorted alphabetically, it sorts chronologically). In that, save a new blender project.\nUsing one of the follow-along\u0026rsquo;s as a workflow, close all of your YouTube browser tabs, open a new blender project, and model something. Grab a post-it note and sketch the shape of some object, like a mug, then just try to model it. You will probably mess something up. That\u0026rsquo;s okay! Try to get yourself somewhere useful, and see how far you can get. When you get stuck, don\u0026rsquo;t know how to do something, or mess something up, make note of it.\nTry to spend 30 minutes on it, and try not to spend more than an hour on it.\nWhen you\u0026rsquo;re done, stuck, ready to give up, close the file and never open it again. Tomorrow, another folder, another project, another 30 minutes attempting a small simple model of some item.\nOther Workflows #  Other approaches to modeling, like Curves, Geometry Nodes, or Sculpting are not covered on this page. That doesn\u0026rsquo;t mean they are not important (in fact, Geometry Nodes are my personal favorite).\nModifiers #  By this point, you should have seen some modifiers in use in some follow-along Tutorials.\n Blender Manual: Modifiers Introduction All You Need to Know about Modifiers in General Subdivision Surface Modeling Tutorial  Shading, Materials, Texturing #   About Vertex Normals  Models \u0026amp; Material Slots #  UV Maps #  Materials vs. Shaders #  Materials and Other Rendering Engines #  On How 3D Models Work #  Full page on topics of 3D models, independent of software, on this page.\n Face Orientation and Back-Face Culling  Complete Guides, Tutorials, and other resources #   Blender\u0026rsquo;s Blender Fundamentals Blender Guru: Donut Tutorial Grant Abbitt: Complete Beginner Guide Learn Sculpting in Blender 2.8 Grant Abbitt: Get Good At Blender (I recommend this practice-based approach) 3DBestie.com Blender Daily, particularly Blender Traps For Beginners Blender Secrets (youtube) Ksenia Starkova - No voice over or narration on videos, just slow but clear presentation. Nice approach to watch a process come together, and pick up some strategies.  "},{"id":8,"href":"/docs/programming/fundamentals/syntax-of-code-flow/","title":"Syntax of Code Flow","section":"Fundamentals","content":"Code Flow #  Inside of functions, there are a number of different ways to change how code executes. Without messing with code flow, and just having a bunch of statements, code will execute top to bottom, left to right. Code flow is how we get more complicated.\nThere are 2 main ways to manipulate code flow: Branches and Loops.\nBranches, which will likely never be referred to as \u0026ldquo;branches\u0026rdquo; again, are a way of executing functions only in some situations. We have two main forms: The If Statement and Switch Statements. Lets ignore switch statements for now, and focus on the if statement.\nStatement #  A statement is an action of a program. Usually, a single line of code is a statement. We generally end our statements with semicolons. Statements are the code doing some single thing.\nDeclaring a variable? Thats a statement. Assigning it a new value? That\u0026rsquo;s a statement.\nStatement Blocks #  Any code inside of curly braces could be considered a block, or statement block. We contain a number of statements inside some curly braces, and now we can put multiple statements, wrapped up in curly\u0026rsquo;s, and treat it like one statement from the outside.\nThe If Statement #  The If statement takes a conditional and will only execute statment if the conditional is true.\nThe syntax is: the word if, followed immediately by parenthesis that contain a conditional. The code will execute or not execute the statement that follows it depending on the conditional. if(conditional == true) DoSomething();\nExcept, you should basically never write your if statements without using a statment block \u0026ndash; curly braces. We use a curly braces basically 100% of the time. The above is valid, and considered a shorthand, but we want our code to be consistent and readable. So, in practice, the syntax of an if statement is:\nThe keyword \u0026lsquo;if\u0026rsquo;, followed by parenthesis that contain a conditional, immediately followed by curly braces.\nif(conditional == true) { DoSomething(); } The If-Else Statement #  The \u0026lsquo;else\u0026rsquo; keyword can be added to after the if statement to provide some code that will only happen if the conditional is false. It\u0026rsquo;s like an \u0026ldquo;otherwise\u0026rdquo; clause.\nif(conditional == true) { DoSomething(); } else { DoADifferentThing(); } if(conditional == true) { DoSomething(); } else //programmers will fight over the appropriate line spacing of the else statement. I have no strong opinions. { DoADifferentThing(); } You can chain if-else statements together if(inputDir == Vector2.left) { MoveInDir(Vector2.left); } else if(inputDir == Vector2.right) { MoveInDir(Vector2.right); }else if(inputDir == Vector2.up) { MoveInDir(Vector2.up); } else if(inputDir == Vector2.down) { MoveInDir(Vector2.down); }else { StopMoving(); }\nLoops #  Loops allow us to execute a statement block multiple times.\nThe simplest loop is the while loop.\nThe While Loop #  It\u0026rsquo;s basically the same syntax as a simple if statement, but with the keyword while.\nSo long as the conditional is true, the code in the blocks will execute.\nwhile(true) { //The word \u0026#39;true\u0026#39; is always true, so this code will run over and over again forever and crash your computer.  //This is called an infinite loop, and every programmer has made this mistake at least once. } We can use a while loop and an integer to build a simple counter. int i = 0;//A while(i \u0026lt; 10)//B { //Some code we want to run multiple times.  Debug.Log(i); i = i + 1;//C } //This will spit out 0 - 9 in the console. 10 numbers, starting at 0, and going to 9 - not including 10. \nIt turns out this little pattern is really common. We have some code that happens before the while loop (labeled A, above). Then some conditional we check every loop (i\u0026lt;10, labeled B). Then some code we run every single time in the loop (labeled C).\nThis pattern is so common, that the programming deities gave us a nicer way to type it out: the for loop.\nThe For Loop #  Actually, the for loop first appeared in ALGOL 58, a programming language developed in 1958, 63 years ago as I type this.  The for loop is simple loop that is much less prone to accidentally writing infinite loops. It\u0026rsquo;s syntax is:\nThe keyword for, followed by three statements inside of the parenthesis, seperated by commas. Then a curly brace containing our loop.\nfor(A;B;C){} The A,B,and C\u0026rsquo;s here match the functionality of the code labeled A,B, and C in the while loop example above.\nThe statements are:\n A: something that happens once at the top of a loop. B: a conditional C: something that happens every loop.  99% of the time we:\n A: Create a variable. int i = 0; B: Compare it to something. A \u0026lt; 10; C: Increment it: i++;  for(int i = 0;i\u0026lt;10;i++) { //do something 10 times, with access to the variable i.  Debug.Log(i); } We always use the variable \u0026ldquo;i\u0026rdquo; for a counter integer. i for iterator.  i++; is shorthand for writing i = i + 1; It\u0026rsquo;s just a little bit tidier. \u0026ldquo;++\u0026rdquo; as an operator will add 1 to the variable to it\u0026rsquo;s left.\nSimilarly, i\u0026ndash; will subtract one from a number.\n "},{"id":9,"href":"/docs/unity/user-interface/","title":"The UI System","section":"Unity Development","content":"This section is creating UI in Unity, the other UI section is the user interface of Unity.\n"},{"id":10,"href":"/docs/unity/","title":"Unity Development","section":"Docs","content":"Unity Development. #  This section covers non-programming related Unity content.\nResources #   Cyanilux\u0026rsquo;s Resource Repository - Collection of largely shader related Unity resources. Jason Weimann - Youtube channel with programming focus Tough Nut To Crack - Unity Youtube Channel, solving interesting challenges and devlogs. Catlike Coding - Excellent Unity tutorials Mix and Jam - Recreates game mechanics in Unity, explaining the process.  "},{"id":11,"href":"/docs/programming/","title":"Programming in Unity","section":"Docs","content":"C# Programming In Unity #  See the sidebar for topics.\nExternal Resources:\n Unity Scripting API Microsoft Video Series: C# 101 Jason Weimann Youtube Channel  "},{"id":12,"href":"/docs/programming/fundamentals/arrays/","title":"Arrays","section":"Fundamentals","content":"Arrays #    "},{"id":13,"href":"/docs/programming/fundamentals/classes-and-components/","title":"Classes and Components","section":"Fundamentals","content":"Classes and Components #  Classes are the fundamental building blocks of programming. A class allows us to create instances of the class, called objects, which we \u0026hellip; do everything with.\nOddly enough, in Unity programming, we don\u0026rsquo;t use classes that often. This is a lie. We use them in every single script we right, but we let Unity handle the creation and destruction of our classes for us. This is because most of our classes will be a unity component.\nA basic Unity Script has the following line of code. public class AgentMovement : MonoBehaviour { //everything goes in here }\nWhen we create a component, we are creating a public class that extends \u0026ldquo;MonoBehaviour\u0026rdquo;. We will learn more about extending classes and creating our own special classes in the future. Let\u0026rsquo;s focus on components for now.\n  "},{"id":14,"href":"/docs/blender/toolbox/addons/","title":"Useful Add-Ons","section":"Toolbox","content":"Useful Add-Ons. #  Blender ships with a lot of features that it keeps hidden, that can easily be activated by going into to File\u0026gt;Preferences\u0026gt;Add-Ons menu. Third party developers can create their own add-ons, and there is a marketplace of individuals writing such software.\nIn no particular order\nBlender Add-Ons #   Extra Objects in the add menu. A.N.T. Landscape can generate terrains. LoopTools contains many useful features, like circular-izing a selection of vertices. Node Wrangler everyone who uses nodes uses node wrangler.  Third-Party Free Add-Ons #   Noodler for managing nodes. Camera Shakify for adding realistic camera shake. Edge Flow for working with multiple edge loops. BlenderGIS for working with real world satellite/terrain data. Cut Corner cuts corners. Animation Nodes An entire system for animating with nodes.  "},{"id":15,"href":"/docs/unity/3d-models/","title":"3D Models","section":"Unity Development","content":"Working with 3D Models in Unity #  "},{"id":16,"href":"/docs/programming/advanced/","title":"Advanced","section":"Programming in Unity","content":"This section goes beyond the fundamentals of C#. It is labeled \u0026ldquo;advanced\u0026rdquo; but that is in the context of a single university course learning path and objectives. These are, in the broader scope of programming, still relatively fundamental concepts.\n"},{"id":17,"href":"/docs/programming/unity-and-programming/tips-and-tricks/serialization-and-attributes/","title":"Serialization and Attributes","section":"Tips \u0026 Tricks","content":"Serialization and Attributes #    "},{"id":18,"href":"/docs/programming/unity/tips-and-tricks/serialization-and-attributes/","title":"Serialization and Attributes","section":"Tips \u0026 Tricks","content":"Serialization and Attributes #    "},{"id":19,"href":"/docs/programming/architecture/","title":"Architecture","section":"Programming in Unity","content":"Architecture #  Architecture is the big picture stuff.\n"},{"id":20,"href":"/docs/programming/unity/","title":"Code \u0026 Unity","section":"Programming in Unity","content":"Unity #  This section is for programming-related or adjacent topics that are more specific to the Unity game engine. For general Unity, see the Unity section.\n"},{"id":21,"href":"/docs/programming/unity-and-programming/","title":"Unity Specific Programming","section":"Programming in Unity","content":"Unity #  This section is for programming-heavy topics that are more specific to the Unity game engine, like tricks or extending the editor.\nFor general Unity Development, see the Unity section.\nFor some useful development patterns in Unity, check out the Unity Development-\u0026gt;Toolbox section.\nThere is a lot of overlap, and I am trying my best to keep the programming-first concepts (that cover Unity) in the programming category, and the unity-first concepts with programming in the Unity category. It\u0026rsquo;s not ideal, but I hope it works well enough.\n"},{"id":22,"href":"/docs/unity/unity-102/","title":"Systems \u0026 Techniques","section":"Unity Development","content":"Systems \u0026amp; Techniques #  What comes after \u0026lsquo;fundamentals\u0026rsquo;? Depends on the kinds of things you want to make\u0026hellip; but many projects will use the systems and features of Unity in this section.\n"},{"id":23,"href":"/docs/unity/toolbox/basic-level-manager/","title":"A Basic Level Manager","section":"Toolbox","content":"A Basic Level Manager #  For an explanation of this code, see this video on scene switching, where the code is written and explained.\nLevelManager.cs #  using UnityEngine; using UnityEngine.SceneManagement; public class LevelManager : MonoBehaviour { public void RestartLevel() { SceneManager.LoadScene(SceneManager.GetActiveScene().name); } public void GoToNextScene() { //Get the current level build Index  int current = SceneManager.GetActiveScene().buildIndex; //increase it by one  int next = current + 1; int total = SceneManager.sceneCountInBuildSettings; //If we are at the end of our list, just go back to the first level in the list.  if (next \u0026gt;= total) { next = 0; } //go to build index  SceneManager.LoadScene(next); } void Update() { if (Input.GetKeyDown(KeyCode.R)) { RestartLevel(); } //Cheat codes! Maybe delete this part?  if (Input.GetKeyDown(KeyCode.N)) { GoToNextScene(); } } } "},{"id":24,"href":"/docs/programming/fundamentals/a-few-metaphors/","title":"A Few Metaphors","section":"Fundamentals","content":"A Few Metaphors #  I generally do not like teaching with metaphors. They can provide quick high-level insight, but I find they can get in the way when we wish to expand on the high-level concept in lower-level ways. It\u0026rsquo;s like learning a mental trick to do multiplication - you might be presented with a problem that you know the answer to, having memorized it, but instead of simply having it, you find yourself walking through the steps of your \u0026ldquo;trick\u0026rdquo; in your head. The shortcut has become an impedance.\nIt must be stated that they are not useless, particularly after one has become mildly comfortable with a concept and it\u0026rsquo;s applications. So, all this being said, some programming metaphors.\nFunction Properties are Pronouns #  Inside the \u0026ldquo;local context\u0026rdquo; of a function, we write code to work on unknown properties. We use placeholders, and they serve much the same function that a pronoun does in language. Many placeholder words exist in the English language, not just pronouns, like \u0026ldquo;it\u0026rdquo;, \u0026ldquo;that\u0026rdquo;, \u0026ldquo;thing\u0026rdquo;, \u0026ldquo;what\u0026rsquo;s-it\u0026rdquo;, \u0026ldquo;thingamajig\u0026rdquo;, \u0026ldquo;doodad\u0026rdquo;, \u0026ldquo;you-know-who\u0026rdquo;, \u0026ldquo;John Doe\u0026rdquo;, and so on.\nvoid Square(int them) { Debug.Log(them * them); } I can write a function - and speak a sentence - that is perfectly syntactically and programmatically - and grammatically - sound, while not actually knowing who \u0026ldquo;them\u0026rdquo; refers to. The function will not, until it is executed by the program.\nProcedures are Flow Charts #  Consider the equation to convert a number in Fahrenheit to Celsius: Subtract 32, then multiply by 5/9ths.\nWe could more concisely write this as a mathematical formula:\nThere are a number of operations that we must evaluate in the correct order. x-32 and 5 divided by 9 each must be evaluated, and then the answer to those operations should be multiplied. In that order. In mathematics, the order of operations (\u0026ldquo;PEMDOS\u0026rdquo;) provides clarity. In programming, PEMODOS is used as well, but there are further methods to control the way a process is executed.\nInstead of thinking of order-of-operations, one might consider the each operation as some block with inputs and outputs, and we evaluate the entire thing from left to right.\nEach grey line represents a number, connected from the output of one \u0026ldquo;function\u0026rdquo; or \u0026ldquo;process\u0026rdquo;, and determined by it\u0026rsquo;s various inputs.\nThis visualization can be quite useful for understanding programming, as it clearly shows how complex operations are grouped and chunked, and one can always trace a piece of data as it get\u0026rsquo;s processed. Many programming languages directly use a \u0026ldquo;flow\u0026rdquo; metaphor as their interface. From older languages like Fabrik to complex and modern systems like Unreal Engine\u0026rsquo;s Blueprints.\nWithout switching to a \u0026lsquo;visual\u0026rsquo; language, one can take advantage of flow-chart diagrams. Programmers often scribble such charts on whiteboards (to varying degree\u0026rsquo;s of clarity or legibility, often just enough to get a sense of what they want to do as a visual structure). Understanding their process in the visual \u0026ldquo;readable\u0026rdquo; version then becomes a helpful reference when returning to the less visually parse-able code.\nCode is Recipes #  When we code, we are creating abstract processes that can be followed by a machine. One does the same thing when writing a recipe, only it must be followed by another human. One uses shorthand and shortcuts, and only the minimal of instructions, because the one cooking surely knows what \u0026ldquo;mix\u0026rdquo; and \u0026ldquo;chop\u0026rdquo; mean, and mostly need to be told which ingredients to combine, how long to bake, and how finely to chop the onions.\nYet, as any chef knows, communicating exactly what one should do can be a challenge.\n  Road Networks #  Programming is not like driving. Programming is like designing and building out a road network. One full of streets, signs, and so on. We create repeatable small structures (\u0026ldquo;stop sign\u0026rdquo;, \u0026ldquo;left turn lane\u0026rdquo;, \u0026ldquo;speed bump\u0026rdquo;), and build out a system that can be navigated not just by one car, but an entire system (\u0026ldquo;city\u0026rdquo;?) of cars, all going their various ways.\nA single traffic light can be setup and thought through. Let traffic flow along this path, then along that path, and signal appropriately. The challenge in programming isn\u0026rsquo;t often creating an elegant traffic light, but designing a series of them to work well together. Hundreds of traffic lights in a complex network, and if even just one is misbehaving, the result can cascades out of control and quickly become chaos.\nWriting #  Writing Software is Like \u0026hellip; Writing blog post by Bruce Eckel, 2009.\n"},{"id":25,"href":"/docs/programming/architecture/simple-state-machine/","title":"A Simple State Machine","section":"Architecture","content":"Creating a simple state machine in Unity #    Additional Resources #   One Wheel Studio - The State Pattern Habrador - State Pattern Tutorial Game Programming Patterns Book. Chapter on State  "},{"id":26,"href":"/docs/programming/architecture/accessing-data/","title":"Accessing Data (from elsewhere)","section":"Architecture","content":"How to Access Data From Another Script in Unity #  To access data that an object has, we need a reference to the appropriate instance of the object. The real challenge is, for the most part, getting the appropriate reference (\u0026ldquo;resolving\u0026rdquo; a \u0026ldquo;dependency\u0026rdquo;), and not actually accessing the data.\nAlso see: Data-oriented design.\nAlso see: Event Systems.\nPublic and Serialized Fields #  The simplest, easiest, minimum-viable option is to make a public field. Then you just drag-and-drop the appropriate GameObject (with the component) or component into the slot.\nWhen you make a field public, or when you make it private with the [SerializeField] attribute (recommended), Unity gives you a little drag-and-drop-able slot you can manually assign your reference with.\npublic fields: public class Player : MonoBehaviour { public float score; } public class ScoreManager : MonoBehaviour { public Player player; void DisplayScore() { //...  float playerScore = player.score; } }\nSerialized fields:\npublic class ScoreManager : MonoBehaviour { [SerializeField] private Player player; //... } Minimal setup, minimal overhead. Minimal setup has another positive, which is minimal refactoring when you want to replace it. It\u0026rsquo;s Often the easiest solution to prototype with before replacing it with a more complicated solution later. However, you have to set it up in the Unity Editor. This means it doesn\u0026rsquo;t work well when using it on objects that get instantiated while the game is running, like enemies that spawn in, and may not work well for prefab workflows.\nIt also can mean lots of manual work, and it can be annoying to have your inspector be for setup and not configuration. It\u0026rsquo;s annoying to assign objects in the scene over and over again.\nI highly recommend you use default to using the [SerializeField] attribute instead of simply making fields public, especially when working with data. If you try to access or read the field from another script, you should be aware that is what you are trying to do, and you can make it public then, if need be. This will save you from bugs and too-tightly-coupled code in the long run.\nFindObjectOfType #  There are a number of different Find functions in Unity, all fairly notorious for being slow. You shouldn\u0026rsquo;t use any of them in an Update loop. The only one I really recommend using is FindObjectOfType. It will search in the scene for the first active object it can find of a certain type. This is useful when you are sure there is only one object of a certain type. public class ScoreManager : MonoBehaviour { private Player player; void Awake() { player = FindObjectOfType\u0026lt;Player\u0026gt;(); if(player == null) { Debug.LogError(\u0026#34;Player not found\u0026#34;,gameObject); } } }\nEvent Systems #  Another clever way to resolve dependencies is to change how we think about them. Instead of being dependent on objects, we could be dependent on the event we care about. See Event Systems for more about this pattern.\nOften our dependency problems are caused by \u0026ldquo;race conditions\u0026rdquo; when we are loading scenes, especially when working with multiple scenes. One unexpected benefit of event systems can move a some of our trouble outside of the race, to when the data actually starts getting used.\nScriptableObjects #  We can take the data we care about and move it outside of the entire scene loading game loop, and make it always exist in memory, and as an easily editable object in our file system that represents data. Sounds magical? We do this with a data-oriented design approach. See that page for more.\npublic class FloatData : ScriptableObject { public float value; } public class Player : MonoBehaviour { [SerializeField] private FloatData playerScore; //update playerScore.value when appropriate. } public class ScoreManager : MonoBehaviour { [SerializeField] private FloatData playerScore; void DisplayScore() { //...  float playerScore = playerHealth.value; } } Instead of one object being dependent on another, both objects are dependent on a third data-object. This is more dependencies, but the dependency on a scriptableObject is a less troublesome one because its always hanging out in our project\u0026rsquo;s memory, regardless of what order objects are loaded in.\nStatic Properties #  Making the data we care about static takes it outside of the need for a dependency on a specific instance. This can be great, but it tends to become a pain in the butt once projects get more complex. It leads to taking shortcuts that are difficult to refactor, as well as not having the flexibility such that the refactoring is likely necessary.\nInstead of having static data, one could have static instances\u0026hellip; and now we are using a singleton pattern.\nSee more about static members.\npublic class Player : MonoBehaviour { public static float score; } public class ScoreManager : MonoBehaviour { void DisplayScore() { //...  float playerScore = Player.score; } } "},{"id":27,"href":"/docs/unity/unity-interface/layouts/","title":"Adjusting Layouts","section":"Unity Editor Interface","content":"Adjusting Layouts and Customizing Unity #    "},{"id":28,"href":"/docs/digital-media-fundamentals/aspect-ratios/","title":"Aspect Ratios","section":"Digital Media Fundamentals","content":"Aspect Ratios #  What is an Aspect Ratio? #  Aspect ratios are proportional relationships of the length and width of an image or video. It is expressed as a number compared to another number (a:b).\nThey can also be written as a decimal number (1.78), which is just the two ratio divided. If one side is length 1, or a, the other side is length b, or the ratio.\nWhat are they used for? #  Aspect ratios are used to determine the proper proportions of media, without setting a fixed length or width. A movie on television can be scaled down to be watched on your phone, without distortion: without stretching or shrinking one side of the media.\nWhat do they look like? #  Most videos watched from your phone, TV, or computer are in 16:9 ratio. If you record a video on your phone horizontally, or landscape, it be 16:9 or 4:3, but if you record it vertically, or portrait, the aspect ratio becomes 9:16 or 3:4. A square Instagram post would be a 1:1 ratio. No matter how big you look at this photo, it will still be a square.\nWhat does it mean? #  Essentially, it is a fraction that the length and width can be divided to show. For example, a normal 16:9 display is 1920px by 1080px. 1920 divided by 1080 is or 1.78. 16 divided by 9 is 1.78 as well. This shows that it is in a 16:9 aspect ratio and that its proportions are the same.\nThe crop tool in any photo editing software demonstrates aspect ratios neatly. The crop tool is set to a 4:3 aspect ratio, while the image is in a \u0026ldquo;3:2\u0026rdquo;, or \u0026ldquo;vertical 2:3\u0026rdquo; ratio.\nLetterboxing #  When you try to view content that was created at one aspect ratio (like 4:3), on a display that has a different aspect ratio (like 16:9), there is going to be a problem. There are a number of different solutions to this. The most common is letterboxing - you show the content as large as you can in it\u0026rsquo;s entirely, centered in the display, and then fill the remaining bars with a solid black color. This is called letterboxing.\n Depending on who you ask, the top/bottom bars are letterbox bars, and left/right bars is called pillowboxing. The term letterboxing is colloquially used to refer to both.\n Other Ways to put Content on a Mismatched Display #  In Windows, you can choose an image as your desktop background. Windows needs to determine how to display content of different aspect ratio than your display. Windows 11 gives you the following list of options:\nThe options are Fill, Stretch, Tile, Center, and Span. Digital digital media applications may call these techniques differently, but there are only so many approaches you can take.\nFill Will scale up the image until it fits the display completely, not showing you the entirety of the image.\nStretch will stretch the image to fit the display.\nTile will repeat the image again. Also called \u0026lsquo;repeat\u0026rsquo;. You also might only repeat horizontally or repeat vertically, common approaches when working with UV maps and 3D software. Center will letterbox the image.\nSpan is used for multiple monitors, filling the image across all connected displays.\n"},{"id":29,"href":"/docs/unity/unity-fundamentals/assets/","title":"Assets","section":"Fundamentals","content":"What are Assets? #  An asset is an actual file on your computer. We store Assets in the “Assets” folder inside of our unity project folder. Assets are any item in Unity that we may want to use.\nWhen we select an asset in the project window, the Inspector will show us it’s import properties. These are often very important, they tell Unity how to handle the file. For example: fixing scale issues with 3D models.\nIt\u0026rsquo;s easier to explain assets if we consider their uses.\nCommon Asset Types #  Image Files #  Images, like BMP or Jpeg’s, and even Photoshop documents directly (I haven’t utilized this new feature and still export all my sprites as PNG’s with transparency).\n3D Models #  Unity supports FBX files for your 3D models. It also supports saving your native file format into the asset folder (ie: .max, .blend, .mb, .ma), and Unity turns them into .fbx’s when it runs and builds the game. This is useful if you are going back and forth a lot, but it’s still generally wise to export as FBX, especially if you are sharing/collaborating with others. Keep things from getting too messy.\nSee the unity manual for information on importing models, Model File Formats. Getting textures and animations to import with a model correctly (or to associate these things with models that have already been imported) can be tricky, and I won’t get into the details of this here.\nAudio Files #  Unity supports a wide variety of audio, and will (by default) compress it to when it builds the game. Unity supports mp3, .ogg, .wac, .aif audio files, and\n.mod, .it, .s3m, and .xm tracker modules files.\nIf you don’t know what tracker modules are, don’t worry. Think midi, they are sequence data and short audio samples to build out tracks. This helps create long songs without large file sizes.\nScripts #  As we work in Unity, we will create lots of Scripts. These are C# or JavaScript files. You can make the files from within unity.\nIf you click the **Add Component **in the Inspector and create a **New Script **from here, it will put that script in the base assets folder. Before we open it up in our text editor, we should remember to move it to a Scripts folder, or wherever we want to move it. Unity will keep track of objects that we move around (from within Unity’s project window), but our IDE/text editors may not.  File Structure #  Unity technically doesn’t care where in your project you store your assets. Technically you can have them all just sitting in your assets folder. Don’t do this. Create folders that categorize your asset. Generally based on type. Almost all of my projects have the following folders: “Scripts”, “Materials”, “Models”, “Images”, “Scenes”. Your’s probably should soon.\nThis organization isn’t just to keep things pretty. Unity projects can get complicated quickly, and finding assets is going to be important.\nYou should adopt a standard naming convention for your files, as well. But i won’t yell at you about that. At the very least, keep things descriptive.\n"},{"id":30,"href":"/docs/digital-media-fundamentals/binary/","title":"Binary","section":"Digital Media Fundamentals","content":"Binary #  \u0026lsquo;binary\u0026rsquo; Refers either to binary numbers or binary code, both of which are base 2 representations of information. We can do math with binary numbers, and store data (inclding numbers) with binary code, also called binary encoding.\nBinary Numbers Basics #  A video I recorded on Binary:\n  The youtube channel \u0026lsquo;Computerphile\u0026rsquo; has a number of good videos on the topic:\nWhy Use Binary? #    Floating Point Numbers #    "},{"id":31,"href":"/docs/unity/toolbox/clicking-on-objects-in-3d/","title":"Clicking On Objects in 3D","section":"Toolbox","content":"Clicking On Objects in 3D #  Clicking on objects is a non-trivial task, despite how often we implement this behavior. Luckily, it\u0026rsquo;s not terribly difficult.\nThere are two challenges:\n The mouse is in screen-space, calculated in pixel-distance away from the top-left of the screen. Objects, on the other hand, are in world-space: they have a position in the scene. Objects in 3D can overlap each other visually. How do we know which one is \u0026ldquo;under\u0026rdquo; the mouse, and only select it?  To solve the first challenge, we need some kind of system to go from screen space to world space. Well, that\u0026rsquo;s the camera. Camera\u0026rsquo;s are basically devices to convert from world space to screen space, it\u0026rsquo;s trivial for them to go the other way too! We will get a reference to the camera so we can use functions that the camera provides.\nprivate Camera cam; void Awake(){ cam = Camera.main; } Now that we have that, we need to figure out when we click, and get the mouse coordinates in screen-space: void Update(){ if(Input.GetMouseButtonDown(0)) { Vector3 mouseScreenPos = Input.mousePosition; } }\nIt\u0026rsquo;s considered good practice to store (aka cache) the \u0026lsquo;Camera.main\u0026rsquo; property in a local variable, because behind-the-scenes, it uses a very slow access method: FindGameObjectWithTag(\u0026ldquo;MainCamera\u0026rdquo;). However, in Unity 2020.2, this was fixed. So it\u0026rsquo;s okay to use now. I\u0026rsquo;ll still use a cached variable here so this example code remains valid for older unity versions.  In order to solve the second part of our challenge, we are going to use the physics system. With this solution, it means that objects we want to click on need colliders. We will create a ray that extends along the cameras point-of-view, from the mouse position, \u0026ldquo;back\u0026rdquo; into the scene. Using a raycast means that first thing it hits will be the closest thing to the camera.\nWe will use the cameras ScreenPointToRay function.\nWe also don\u0026rsquo;t really need to store the mousePosition as a temporary Vector3 variable, lets just skip that and plug in the \u0026ldquo;Input.mousePosition\u0026rdquo; directly to this camera function.\nRay ray = cam.ScreenPointToRay(Input.mousePosition); Now we need to do a Raycast. I advise you to research Raycasts more, starting with that above documentation page. It uses a C# feature called an \u0026ldquo;out\u0026rdquo; parameter modifier. \u0026ldquo;Out\u0026rdquo; (and \u0026ldquo;ref\u0026rdquo;) allow a function to modify variables that it takes as parameters. That means we have the return type from the function (in this case, a boolean: did we hit anything at all), it has another \u0026ldquo;returned\u0026rdquo; value - if we did hit something, the data about it is now available in this variable. The \u0026lsquo;out\u0026rsquo; keyword is how we know that this function is allowed to replace the data in this variable.\nThe RaycastHit datatype is a simple data structure used to get information from the hit. Check out the information it holds in the RaycastHit scriptingAPI documentation.\nLet\u0026rsquo;s put it all together.\nprivate Camera cam; void Awake(){ cam = Camera.main; } void Update(){ if(Input.GetMouseButtonDown(0)) { Ray ray = cam.ScreenPointToRay(Input.mousePosition); RaycastHit hit; if(Physics.Raycast(ray, out hit, 100)) { Debug.Log(\u0026#34;clicked on \u0026#34;+hit.collider.gameObject.name); } } } Going Further: Only Clicking Certain Things #  You can use a layer mask to dertermine what you can and cannot click on. LayerMasks are bitmasks, which are annoying to create by hand. If we make one that is serializable, however, it becomes trivially easy to edit in the unity inspector. The Physics.Raycast function takes a layer mask as an argument.\nCreating a layer mask: [SerializeField] private clickableLayerMask;\nAllows us to use the Inspector to select our layer(s): We need to be sure to put the objects we want to select on the layers here, and objects we don\u0026rsquo;t want to select on a different layer.\nWe can then pass this in as an argument in the Raycast funtion. The entire example code now looks like this:\nusing UnityEngine; public class ClickingThings : MonoBehaviour { private Camera cam; [SerializeField] private LayerMask clickableLayerMask; void Awake() { cam = Camera.main; } void Update() { if (Input.GetMouseButtonDown(0)) { Ray ray = cam.ScreenPointToRay(Input.mousePosition); RaycastHit hit; if (Physics.Raycast(ray, out hit, Mathf.Infinity, clickableLayerMask)) { Debug.Log(\u0026#34;clicked on \u0026#34; + hit.collider.gameObject.name); } } } } The only other change is for the raycast distance, I replaced \u0026ldquo;100\u0026rdquo; with \u0026ldquo;Mathf.Infinity\u0026rdquo;. You probably want to limit the distance of your raycasts to something appropriate as a small optimization.  "},{"id":32,"href":"/docs/programming/fundamentals/collapsing-code/","title":"Collapsing Code Exercise","section":"Fundamentals","content":"Collapsing Code #  A basic exercise to help you think about code execution.\n  "},{"id":33,"href":"/docs/programming/unity-and-programming/collision-events/","title":"Collision Events","section":"Unity Specific Programming","content":"Unity Collision Events #  Overview Video #  A (slow) video walking through setup and common mistakes for using collision events.\n  Example #  A really common pattern when using collision events is to check if the thing we hit has a certain tag, or has a certain component.\nGetComponent is slower than using CompareTag, so we prefer that - however, it can quickly become impractical.\nvoid OnCollisionEnter(Collision other) { if (other.gameObject.CompareTag(\u0026#34;Player\u0026#34;)) { //code for if I hit the player  } //  Enemy hitEnemy = other.gameObject.GetComponent\u0026lt;Enemy\u0026gt;(); if (hitEnemy != null) { //code for if I hit a gameObject with an Enemy component.  //We should basically always check for null.  } } Split Up The Logic #  A common mistake is to try and put all of the logic for a collision on the same script. In fact, all scripts on both gameObjects involved with a collision will have the collision event functions called. This lets us split our logic up into appropriate places.\nLets say we move around and dodge asteroids. We can have:\n an OnCollisionEnter function on a PlayerMovement script that plays sounds when we bonk into walls an OnCollisionEnter function on a Player script that checks if we got hit by an asteroid and lose health, flash a color, and play a hurt sound. an OnCollisionEnter function on the asteroid script that destroys itself when it hits various thing, and plays a sound.  That\u0026rsquo;s taking three separate pieces of logic: asteroid handling, player-wall handling, and player-asteroid handling, and moving them to locations that are appropriate. It\u0026rsquo;s certainly possible to do all of this in one code, but we discover quickly - as we add different enemy types, for example - that it gets really unwieldy and is prone to bugs. Keeping things compartmentalized makes our life easier.\n"},{"id":34,"href":"/docs/programming/architecture/patterns/command-pattern/","title":"Command Pattern","section":"Patterns","content":"Implementing a Command Pattern in Unity #    The code can be found here: https://github.com/hunterdyar/UnitySimpleSokabon.\nCommand Pattern video by Infallible Code #    "},{"id":35,"href":"/docs/unity/unity-fundamentals/components/","title":"Components","section":"Fundamentals","content":"What are Components? #  Components are where the real functionality of GameObjects gets implemented.\nThe Transform component is part of every single GameObject in Unity. You can’t delete it, because every gameObject has to have one. An Empty game object still has a position in the scene. It gives objects positions, rotations, and scales. It also handles how objects can be “children” or “parents” of each other.\nThe Default Main Camera in new scenes have three components: Transform, Camera, and Audio Listener.\nProperties #  It’s important to understand the main feature that Components give us: properties. Components add behavior and functionality to GameObjects. Properties makes this useful. We can edit many properties of any GameObject’s component. The position, rotation, and scale values in the Transform component are it’s properties.\nThere are two types of properties: Values and References. Basically, properties are either:\n Values: Data. Numbers. Variables in a script. Any direct value such as booleans, colors, strings, numbers, vectors, and so on. References: Telling us which other thing to use. Such as other GameObjects, other Components, or Assets.  For Example, the audio source component has a volume property, which is a number (a value) telling unity how loud to play the audio, but it also has an AudioClip property. This property is a reference. We point it to an audio file in our assets folder.\nEditing Properties #  Many value properties are just numbers or letters, and editing them is as simple as typing in whatever number we want. Some values, like colors, would be annoying to edit as numbers (do you know the RGBa values for all of the colors you want to use?). Unity gives us special editors for many values. Colors, to continue the example, have a color picker that will be familiar to you if you have used almost any graphics software.\nFor numerical properties, you can change the value by clicking and dragging left/right on the properties label. I find it especially useful to click and drag on the “x”, “y” or “z” text to the left of the value in the Transform component to quickly shuttle objects around the scene without messing up my scene view.\nClicking and dragging on labels can easily adjust numerical properties.\nReference properties look like light grey rectangles and have a small circle to the side of them. We can drag and drop files from our assets (ie: the project window) into here to tell components what thing to use. Audio sources need to know what audio clip, sprite renderer’s need to know what sprite to render, colliders often use physics materials, and so on.\nDragging a Physics Material, from the Project window, onto an appropriate property in the Inspector window\nThe little circle is the Object Picker, which basically lets us not have to drag and drop from the project window, it opens a window with the possible things from our game that the property could be referencing, and we can quickly select them there without navigating around the project window.\nUsing the Object Picker to quickly grab the desired asset.\nRead about how to edit many types of properties in the Unity Manual.\nAdding Components To GameObjects #  With a GameObject selected (Click on it in the Hierarchy or in the Scene view), it’s components are available to be edited in the Inspector Window. In the Inspector window, there is an “Add Component” button at the bottom you can use.\nAdding the rigidbody component to a gameObject in the inspector.\nWithout using the inspector window, you can use the Component menu at the top menu bar to add a component to a selected GameObject.\nA third way to add components to a GameObject is with code. Components can be added and removed during a games run-time.\nMaking Our Own Components #  When we make a script for Unity, most of the time that script will behave as a component. In fact, all components are written in C#, and we can even look at their code. Neat!\nCommon Components #  Other fundamental components we will see in most 3D projects include: Camera, Light, Mesh Filter, Mesh Renderer, Collider Components, and Rigidbody. 2D games can use components for 3D games, but there are also components specific to 2D. Sprite Renderer’s are one example. There are also 2D versions of many components (for performance reasons).\nLets break down something fundamental into the components involved: A Cube.\nA cube has 3 Components.\n Mesh Filter Mesh Renderer Box Collider  You don’t need to worry about the mesh filter. It takes a mesh asset (the file on your computer) and make it usable by the mesh renderer. The specifics of this don’t matter to us. So much that if you add a Mesh Renderer to a GameObject, Unity will automatically add a mesh renderer.\nThe Mesh Renderer makes the mesh visible to the cameras. Look at it’s properties: Cast Shadows (on/off), Recieve Shadows, Materials, light probes, and other graphics jargon. All of it affects how the mesh is seen by the camera, in the scene. Useful!\nThe third component is a Box Collider. This makes the cube solid. Without a collider, the box would just be visible, but unity’s physics system would not be able to calculate if something is colliding with it or not.\n"},{"id":36,"href":"/docs/digital-media-fundamentals/confusion-and-complexity/","title":"Confusion vs. Complexity","section":"Digital Media Fundamentals","content":"Confusion vs. Complexity. #  Learn the difference between confusion and complexity.\nComplexity is a status of a thing. Things can be complex. Confusion is a mental state. It is inside of you, a reflection of your relationship to the software.\nWhen you are confused, stop and figure out what it is that is confusing you. \u0026ldquo;Why did this person in this video tutorial choose to do it this way?\u0026rdquo;\nYou want your mental model of what is happening match the reality of whats happening. When one is confused, it can be because the systems they are interacting with have more complexity than their understanding supports.\nUnfortunately, it is hard to develop complex mental models to match complex software systems, because we also want to, you know, use the software.\n When you are faced with some setting you don\u0026rsquo;t understand, something confusing, you may feel tempted to take a shortcut that bypasses learning about the thing. Perhaps you just rely on defaults, or solve the problem in some roundabout way you already know how, or blindly follow what some website like this one says, or whatever \u0026ldquo;hand-wave-for-now\u0026rdquo; thing in order to do what you need to do. A pragmatic approach that you cannot be judged for taking, particularly when faced with deadlines. I implore you: Make a note of the part where your understanding (mental model) didn\u0026rsquo;t match the software.\n To reduce confusion, we can either make our mental model more complex, to match the complexity of the system we are working with, or we can make the software more simple, to match our mental model. Both approaches are perfectly valid, but learning something tends to be way easier than switching to simpler systems or taking shortcuts. No, I know, there is a bit of valid criticism you can make about this advice: \u0026ldquo;You\u0026rsquo;re only saying that because you\u0026rsquo;re a professor and it\u0026rsquo;s your job to develop students mental models of complicated things\u0026rdquo;. To which I say: \u0026ldquo;well yeah\u0026rdquo;. but ALSO it\u0026rsquo;s true. It\u0026rsquo;s the easy way out! I promise.\nTo be fair, making software simple is often an excellent approach! Often, it means closing or hiding windows/panels/tools that we do not need. Only presenting ourselves with an interface that does things we want it to do. I do this all the time, especially in Photoshop. I edit images, I don\u0026rsquo;t do digital painting. So digital painting tools? Begone! I don\u0026rsquo;t need to learn about you. I did the same in blender and Cinema4D to shoo away rigging and animation tools. If all I am doing is hard-surface 3D modeling, then\u0026hellip; begone, uneccesary complexity! \u0026ldquo;That\u0026rsquo;s that feature-set I don\u0026rsquo;t care about\u0026rdquo; is a valid approach and will help you make your world easier to work with.\nThere are troubles with simplifying software to match your mental model. One is that the software is complex for a reason, and usually that reason is that it is doing complex things. Editing audio, programming, or making 3D models is hard! You can only simplify it so much before you end up removing features that you will need. Other times, simplifying software is impossible. so we end up simplifying our relationship to the software. We memorize or follow a sequence of actions without really knowing what they do, but trusting an output from these actions.\nSometimes, it\u0026rsquo;s not memorizing a sequence, but trying to apply a known mental model to an unknown tool. \u0026ldquo;Eh, i\u0026rsquo;ll just do it the same way as this other thing\u0026rdquo;. And now you have GIMP users using destructive workflows in Photoshop, or my Aunt sending me images by putting them in a word document and emailing it. It\u0026hellip; works? Sort of? \u0026hellip;What are we trying to do here anyway?\n Remember that episode of Spongebob Squarepants, where Spongebob shows Squidward how to draw a circle: \u0026lsquo;First I draw a head, then I erase some of the more detailed features.\u0026rsquo; That\u0026rsquo;s what watching students who attempt to apply a known workflow to a new toolset can be like. \u0026ldquo;I mean, sure, you got there in the end, but there are easier ways\u0026rdquo;. Such crutches are neccesary to get you started, but end up getting in your way, and they are phenomenally unflexible: You can\u0026rsquo;t take this approach and transfer it again to do something else in the software.\n As you develop your mental model of the software, your mental model of what it does, how it works, how large projects are structured, how different parts relate to each other, you are creating a more and more complex mental model. This reduces your confusion.\nAs you learn software, you should be working on expanding your understanding of tools. Not just how to use them, but why they exist, what they do. That means reading the manual, and not just following guides. (Here I would like to note the semantic difference between \u0026lsquo;guide\u0026rsquo; and \u0026lsquo;tutorial\u0026rsquo;). When you learn, if you only keep following or memorizing different sets of steps to take, you won\u0026rsquo;t be developing your mental model, and you will learn the software much slower, and have more trouble with it. Your relationship to it will stay confusing.\nSo back up and get your fundamentals under control, okay? Most of your pain comes from trying to avoid having to expand a mental model. But you aren\u0026rsquo;t being lazy, you are being pragmatic - you just are trying to look up this one specific thing, you dont have time to learn about video encoding formats or whatever. So how do we balance learning tools vs. pragmatism? One way is to make sure we give ourselves time to develop mental models when we aren\u0026rsquo;t under a deadline or have an immedeate goal. Make a note of what you should look up later when you do have time, and be sure to engage in projects that are for the sole purpose of looking up the tools you use when you make it.\nDo these slow learning projects where you read the manual on every tool you open, and let yourself dive deep. Pick up knowledge you might never use, and be happy about it. You can\u0026rsquo;t only do pragmatic just-get-it-done projects. Especially students, because doing that defeats the whole point of you learning these new tools. So work early! You can\u0026rsquo;t do this right before a deadline, because the deadline forces pragmatism! Professorial grumbling: it\u0026rsquo;s like your whole plan is to just make life as hard for yourself as possbile. Please, value time management more.\n"},{"id":37,"href":"/docs/programming/advanced/coroutines/","title":"Coroutines","section":"Advanced","content":"Coroutines Overview Video #    Implementing Coroutines for grid movement in a project. #    Coroutine Syntax #  void Start() { //whenever we want to start a coroutine, we call \u0026#39;StartCoroutine\u0026#39;  StartCoroutine(CoroutineName()); } //a normal function of return type \u0026#34;IEnumerator\u0026#34;. Can take arguments. IEnumerator CoroutineName() { //do something  yield return null;//wait for right after next update loop  yield return new WaitForSeconds(0.5f);//wait for half a second } Movement With Coroutines Example #  public IEnumerator MoveTo(Vector3 destination, float timeToMove) { Vector3 start = transform.position; float t = 0; while (t \u0026lt; 1) { t = t + Time.deltaTime/timeToMove;//it will take t timeToMove seconds to get from 0 to 1.  transform.position = Vector3.Lerp(start, destination,t); yield return null; } //Snap to exactly the destination position  transform.position = destination; } "},{"id":38,"href":"/docs/unity/unity-fundamentals/builds/","title":"Creating Builds","section":"Fundamentals","content":"Unity Builds #  Scene Information #  Unity supports a number of \u0026lsquo;Build Targets\u0026rsquo;, or platforms that it can create executable files for. Desktop software for Windows, Mac, and Linux - of course, but also mobile platforms like Android and iOS, WebGL targets for playing games in the web browser on sites like itch.io, and game consoles like the Xbox or the Playstation .\nI will use the terms \u0026lsquo;Build Target\u0026rsquo; and \u0026lsquo;Platform\u0026rsquo; interchangeably on this page.  The empty rectangle at the top is a list of all of the scenes that will be included in the build. If your scene isn\u0026rsquo;t in this list, Unity will exclude it, and you can\u0026rsquo;t load it. Unity will also do it\u0026rsquo;s best to only include necessary assets in your project, and it uses the scene list to figure out what it does and doesn\u0026rsquo;t need.\nHere is a full build scenes list for an actual game:\nOn the right, you can see the \u0026lsquo;build index\u0026rsquo; of each scene, and reorder the scenes. The scene at the top of the list - build index 0 - will be the first scene to be loaded when the project launches. After that, it\u0026rsquo;s up to you to switch scenes and do what you need to do to play the game.\nUnity can load multiple scenes at a time. In the above example, the game first loads the \u0026ldquo;init\u0026rdquo; scene, which is a small scene that is in charge of loading all of the other scenes. This game has no main menu, the Init scene simply additively loads the UIHUD scene and the first scene of the game. At the end of each level, it unloads the level and loads the next one.\nThis empty \u0026ldquo;init\u0026rdquo; manager scene is a common design pattern in Unity development.\n Switching Platforms #  Unity needs to know what platform it is targeting while working internally. While you can build to multiple platforms, and switch at any time, the currently selected build target will determine how Unity imports assets. For example, Windows builds, Unity internally converts audio files to a .wav format, while on Android it uses .ogg.\nWhen you switch targets, Unity will need to reimport every single asset in your project. For large projects, this can take a long time. It\u0026rsquo;s generally always best to have the appropriate build target selected, and switch to it early on in development.\nYou can always test your app in play mode no matter what your build target is.\nYou switch from the Build Settings menu, simply select the appropriate target and click \u0026lsquo;Switch Platform\u0026rsquo;\nAdding Build Targets #  By default, Unity only supports building an executable file for the same operating system it is installed on. This is because they take up a lot of file space, and are often not needed. In order to build for other operating systems (building for windows from a mac computer, or vise-versa), we need to add more build targets.\nWe add a build target from the Unity Hub. Close any open Unity projects, and go to the Installs section of the Hub. Click the three dots next to the appropriate unity version, and select \u0026lsquo;add modules\u0026rsquo;.\nYou can see what build targets are installed via icons in the Hub.\nIf you don\u0026rsquo;t know better, choose the \u0026ldquo;Mono\u0026rdquo; versions instead of \u0026ldquo;IL2CPP\u0026rdquo;. For the curious, you can read more about IL2CPP from the Unity documentation.  Android Information For Android, you want to be sure to include the checkboxes for SDK, NDK, and JDK tools. These are necessary for android to work, and Unity can download and install them automatically.\nIf you have done android development with other IDEs (like Android Studio or Unreal Engine), you already have the SDK, NDK, and JDK downloaded on your computer somewhere. If this is the case, you can uncheck these sub-check boxes, and not bother downloading it again, but leave \u0026lsquo;Android Build Support\u0026rsquo; Checked.\nYou can set the locations of these tools manually in Unity (not the Unity Hub). Go to Preferences\u0026hellip; \u0026gt; External Tools.\n  Windows Executable Information When you make a build for windows, Unity will prompt you to select a folder. It\u0026rsquo;s standard practice to create a \u0026lsquo;Builds\u0026rsquo; folder in your project, and then a folder for each build in this folder.\nName the folder something appropriate (its smart to number or date your builds, so you never mess up and grab an out-of-date version).\nUnity creates the .exe file, a standalone file. This means we don\u0026rsquo;t have to install the app. All of the information it needs to run is here. It also means you can\u0026rsquo;t just send someone the .exe file. We need to have all of the files - the gameName_data folder, the MonoBleedingEdge folder, and UnityPlayer.dll.\nIf any of these files or folders are missing, the game will throw an error.\nFurther, the .exe filename and the _Data folder name need to match. If you rename one, you have to rename the other too. The executable file looks at its own name and searches for that+ \u0026ldquo;_Data\u0026rdquo; for a folder full of important game data.\nWhen sending this file to someone, or uploading to a site like itch.io, its best to put all the files in a compressed (zip) folder.\n  macOS Executable Information On the build settings menu, there is an\u0026quot;Architecture\u0026quot; drop-down. Choose between Intel, Apple silicon, or \u0026lsquo;both\u0026rsquo;. If you don\u0026rsquo;t know better, select both. This creates a much larger file size than just selecting one or the other, so if you do know the architecture is running (apple silicon includes apple \u0026ldquo;M1\u0026rdquo; devices), you should select it. You can also make multiple builds. If you are hosting your game online for someone to download, you can let them choose the appropriate version for them.\nMac creates a .app file. This single file is everything the game needs to run, no extra folders to worry about including.\nFor someone to run the game, and you aren\u0026rsquo;t worrying about code signing or notarization, they may need to \u0026ldquo;Allow apps downloaded from anywhere\u0026rdquo; in their security and privacy settings. Read more about apple\u0026rsquo;s security practices from apple support.\n  webGL Information When choosing WebGL, there are differences in performance between Unity versions, as Unity improves it\u0026rsquo;s webGL build process over time.\nWebGL Builds give you an index.html file, plus some other files, that you can directly open in a web browser. The catch is that you need a web server to run, so opening the file on your computer or sending them to a friend won\u0026rsquo;t run the game. The two options are to spin up a local webserver (Unity does this when you hit \u0026lsquo;build \u0026amp; run\u0026rsquo; from Unity), or to upload the game to a hosting service that can provide a webserver. Itch.io, simmer.io, and Unity\u0026rsquo;s own Unity Play are three decent options. They have their own gotchas and catches.\nSometimes, you get an error like \u0026ldquo;unable to decompress\u0026rdquo; or \u0026ldquo;unable to load\u0026rdquo; or it\u0026rsquo;s just black, or just loads forever. This is usually caused by the web server not supporting the compression method you use.\nYou may need to check Decompression Fallback (Project Settings \u0026gt; Player \u0026gt; Publishing Settings) depending on the service you upload the files to or the version of Unity you are using. I have also, in some cases, found success by switching from gzip to brotli compression. The details of this is well out of scope of this guide, but keep these player settings at the top of your mind as you trial-and-error troubleshoot.\n  "},{"id":39,"href":"/docs/digital-media-fundamentals/creative-vs-execution/","title":"Creativity vs. Execution","section":"Digital Media Fundamentals","content":"Creative Level Work vs. Execution Level Work #  Let us identify different ways working, which might also call \u0026ldquo;styles of problem solving\u0026rdquo;, \u0026ldquo;types of work\u0026rdquo;, or \u0026ldquo;methods of creative engagement\u0026rdquo;.\nTo start with an example, consider driving. When we all started learning how to drive, we had to think about every little mechanical action we took. Where do my hands go on the wheel. How hard do I press on the break. Is the car between the lines. Am I lined up with the parking space. One has to focus on the specifics of driving, lets call it the \u0026ldquo;execution-level\u0026rdquo; operations. Manipulating the turn, breaking the right way, changing gears. The movement and actions of their hands, the specifics of the cars positions and turning radius. Let\u0026rsquo;s call this kind of stuff \u0026ldquo;execution-level\u0026rdquo;.\nIf you are really focused on this, as novice drivers are, then it becomes very easy to accidentally lose track of the big-picture navigational tasks. Beginners miss their exits way more often than long-time drivers.\nIn this example we would call the big picture stuff \u0026ldquo;navigation\u0026rdquo;, but in creative software we can call it \u0026ldquo;Creative Level\u0026rdquo; work. Thinking about what elements might work in the composition and trying different things out, for example. The feedback and execution loop of iterating on an idea.\nCreative software has a lot of execution-level things. While you are using software, identify times where you focused on the creative level, and on the execution level, and try not to do both at the same time.\n Avoid attempting to focus on execution-level and creative-level tasks at the same time.\n That\u0026rsquo;s the big takeaway from this essay.\nThis means, when learning how to do something, where you really need to focus on your button-clicks, the technical process; you should try working in a sandbox - a free experimentation area. This way you can freely dive into that execution-level work and practice it, without having to worry about the larger project.\nThen, when doing the creative-level things, try to stick to the execution stuff you are confident you know how to do. When you get an idea that you don\u0026rsquo;t know how to do, make note of it. Try not to interupt your creative-level task to immedeatly go research and explore that, unless it\u0026rsquo;s truly blocking you. In which case, ackgnowlege that this is an interuption. Then completely switch your focus, research/practice fully and appropriatley, and then switch back to your process. Don\u0026rsquo;t try to multitask.\n In 3D software, I often work with multiple software windows open, one just a playground that I won\u0026rsquo;t even save. By the time I reach the end of a Unity project, I have to go delete a good handful of \u0026ldquo;testingScene\u0026rdquo; and \u0026ldquo;mechanicTest\u0026rdquo; scene files. It\u0026rsquo;s rare to reach the end of an audio composition without a couple tracks that are muted and will stay that way, which I can probably safely delete by now.\n A big problem that students have is being forced into working on both learning how to do something, and deciding what to do at the same time. There are some nasty feedback loops where their ideas are constrained by their perceived abilities. It makes time management really hard!\nThe solution? First, I don\u0026rsquo;t have any magic bullets here. You need to practice. Focused practice, where you work on a specific technique, or specific type of creative prompt. Next, of course, is to produce a large body of work. Make lots of little things, and get experience with a wide variety of techniques.\nThat advice is annoying, so I have some more pragmatic advice too.\nThe Pragmatic Advice #  Give yourself time to research #  Learn in a learning phase, then apply it. The extreme version, which I recommend, is to do projects where you go as slow as possible. and you don\u0026rsquo;t care about the outcome. Just research the execution level of every little thing as you come accross it. Don\u0026rsquo;t do every project like that, but occasionally, just dive into the tool for the sake of learning the tool.\nMore pragmatic versions of that approach are good too, depending on your timelines. Give yourself the time to engage in this way.\nPlayground/Sketchbook #  Artists, painters, and photographers all know the importance of keeping a sketchbook, be it literally or proverbially.\nBut programmers? They somehow never got the memo. Well, I\u0026rsquo;ll tell you now: Not everything you create needs to be finished. Not everything you create needs to be usable. You need to engage with your workflows in order to develop them. You need to isolate the part of your workflows you are weak at, and practice those.\n Doing every project to completion is not an efficient way to learn. It\u0026rsquo;s the least efficient way to learn.\n If a guitarist is stuck on a certain type of chord progression, they don\u0026rsquo;t practice the whole song over and over again start to finish. Yeah, sounds obvious in this metaphor. So keep a sketchbook, focus on things you are bad at, and just mess around.\nTo do that, you need the freedom to work in an environment where not everything you create needs to be published, and not everything you do will end up being, say, graded. In an academic environment, it will take work to create this environment for yourself. It\u0026rsquo;s hard to work on ungraded practice while graded deadlines loom. I recommend creating consistent scheduled practice time. Setting aside time consistently makes it easier to schedule your other tasks around it. Think of a musicians who have their regular practice hours. They know they need it to improve and stay sharp, and you do too.\nReference and Objectives #  When you are in a piece of software, and tied up on execution level stuff, it really helps to have a clear objective. It free\u0026rsquo;s you from having to do creative/iterative things.\nInstead - plan out ahead of time what you will try to make. Sketch out your thing on a piece of paper, then scan it into your painting or 3D modeling software, or whatever parellel is appropriate. Open up lots and lots of reference images/sound/whatever, so when you have a clear objective to reference. \u0026ldquo;I want this to look/sound like that\u0026rdquo;.\nBasically, you are bypasing the part of the artistic process where you have to have a highly developed mental model of what you are creating. Developing and working on creating mental model is the creative-level things. Let\u0026rsquo;s put it aside for the time-being.\n Post-it notes are the best invention of all time. I\u0026rsquo;ll sketch a little 3D model with almost no deatail on a post-it note, and stick it to my monitor. It keeps you focused and prevents you from iterating on creative things in random directions. (That sudden inspiration is cool and good, but do you really have time right now?).\nI\u0026rsquo;ll also draw a little flow chart of my code architecture.or photography, I keep track of my checklist of what looks (images) I will need to deliever when editing a full session. Keep your goals in mind. It will help you prioritize.\n Take Notes As You Work #  I want you to think like a coach, analyzing their players playing, and writing little notes on their clipboard. What elements should the players focus on during practice?\n Back when I played Ice Hockey, our coach dedicated a third of our practices to penalty kills, which is an insane ratio. But our coach knew the numbers because they took notes (whole stat spreadsheets, in fact) - we got a lot of pentalties. Sure enough, we got good at penalty kills, and ended up winning more games despite the penalties. (Yes, we also needed to work on not getting caught by the ref so often. I mean playing cleaner).\n Becoming proficient in a piece of software means being able to work in the creative space, because you aren\u0026rsquo;t really thinking about your tool. You are thinking \u0026ldquo;Maybe this image would look better desaturated. Hmm, no, maybe not.\u0026rdquo; and not \u0026ldquo;Where is the adjustment layers window again. Should I use a saturation adjustment or a black-and-white adjustment layer with low opacity. What\u0026rsquo;s the difference?\u0026rdquo;. Identify times you got taken out of the creative space, and make note. (You can write a note on a post-it. (\u0026ldquo;Parenting things in blender, wtf\u0026rdquo;) When you have more time, go research. You will be learning exactly the things that have been slowing you down.\nYou need to be your own coach. Nobody else is doing it. Keep a piece of paper (or whatever - how I love software that lets you keep little text notes right inside them) - and just jot down something that got you stuck, or that you spent time on. Once it\u0026rsquo;s written down, you\u0026rsquo;ve free\u0026rsquo;d it from your mind, and don\u0026rsquo;t need to worry about it until later, when you look over your list and go \u0026ldquo;yep yep, time to figure out the whole parent/child process\u0026rdquo;. Then do that. For example, maybe you finally just memorize the syntax of a for loop.\n Students, this is why I prioritize so much time to in-class workshops, and send you to places like this website for lectures and learning. It\u0026rsquo;s called the \u0026ldquo;flipped classroom\u0026rdquo; pedagogy, and it allows me to give you better feedback of the actual little things that are tripping you up, and hard to research. To stay on-metaphor, it lets me be a software coach.\n  "},{"id":40,"href":"/docs/programming/architecture/data-oriented-design-scriptable-objects/","title":"Data-Oriented Design with Scriptable Objects","section":"Architecture","content":"Data-oriented Design #  I think one of the best introductions to pragmatic data-oriented design is the 2017 talk that Ryan Hipple gave at the Unity Connect conference. It also introduces the basics of ScriptableObjects.\n   After you have watched the above video, I recommend checking out the asset ScriptableObject-Architecture on the asset store. It\u0026rsquo;s an implementation of the ideas of the above talk, but really nicely done. It\u0026rsquo;s open source too.\n"},{"id":41,"href":"/docs/programming/architecture/event-systems/","title":"Event Systems","section":"Architecture","content":"Event Systems #    A \u0026lsquo;Real Life\u0026rsquo; Example #     The code for this example is part of this project.\n"},{"id":42,"href":"/docs/programming/architecture/follow-along-project/","title":"Follow-Along Project","section":"Architecture","content":"The following project is for students to follow along with and create a project with me, one that focuses on actually making an entire thing that has multiple levels and a game state.\nPlaylist of videos.\nPart 1 #    This part we think of our game, make a todo list, use Unity\u0026rsquo;s tilemap system to create a level, and create a player movement system. We write our first recursive function, and we manage picking up items as we move. We also flounder about with particles.\nAdditional Resources:\n Unity Tilemap in the manual. Intro to Tilemaps at Unity Learn. 2D Tilemap asset workflow on Unity\u0026rsquo;s Blog. A lightning round of great tips for 2D Games on Unity\u0026rsquo;s blog. Kanban plugin for Obsidian. What on Earth is Recursion video from Computerphile. Programming Loops vs Recursion video from Computerphile. Physics2D.OverlapPoint in the Unity Scripting API. Introduction to Particle Systems at Unity Learn. Particle Systems in the Unity Manual.  Part 2 #    This is the real meat of this assignment, so to speak.\nThis part we create a game manager which keeps track of the state of the game, which other systems listen to. We make an interactable component that helps compartmentalize functionality (and a future use-case of OOP), We also set up a basic UI to demonstrate this things. I struggle with variable names.\nNotes:\n I also said at the beginning that we would not use ScriptableObjects, but I changed my mind when I got to part 3. I forgot to move all my code to it\u0026rsquo;s own namespace(s), but we should do that. Rider can do it automatically with it\u0026rsquo;s refactor options. In this part, I was wrong about the gear manager icon, and the reasons are interesting but not really worth getting into right now..  Additional Resources:\n Enums in the MSDN docs. Enumerations at Unity Learn C# Enumerations in Unity! Unity official beginner scripting tutorial. FindObjectOfType in Unity Manual. (Note, the following line from this official documentation: \u0026ldquo;Please note that this function is very slow. It is not recommended to use this function every frame. In most cases you can use the singleton pattern instead.\u0026quot;). Working with UI in Unity  Part 3 #    This part we create a Level manager, first explaining a prefab approach, and getting it completely working. Then changing it to a ScriptableObject approach. The last part of this is code-cleanup. If you are following along, be aware that I write and refactor code on this part, which is an honest explanation of how programming actually works - it\u0026rsquo;s never really true that we just type everything right through from the start.\nAfter the level manager I even remembered to finish pickups.\nHere we switch from \u0026lsquo;we\u0026rsquo; to \u0026lsquo;I\u0026rsquo;, as the \u0026ldquo;follow-along\u0026rdquo; part is no longer required. I fixed a bug (the hard way) where you lose lives when you push a direction you can\u0026rsquo;t move. After that I refactored the particle system to it\u0026rsquo;s own script. I got confused about particle systems again, and stared at a working project thinking it might be broken. Apparently they do play On Enable if Play On Awake is selected.\nAdditional Resources\n How to work with multiple scenes in Unity - Unity Tutorial Better Data with Scriptable Objects in Unity! (Tutorial) Official Unity tutorial video. Pros and Cons of Using Scriptable Objects in Unity SCRIPTABLE OBJECTS in Unity by Brackeys.  Part 4 #    This video is less of a follow-along, but I took the less programming-centric parts of putting it together and lumped them into one video. It would be a shame not to show these parts of the process.\nI use:\n Sprite Import Settings Sprite Sheets Unity\u0026rsquo;s Animation system (Animator Controller and Animations) Cinemachine (with Impulse and Confiner2D controller) Turn the Main Menu into an actual menu screen.  Additional Resources:\n Aseprite  Refactoring #    I think of this video really as more for reference than following along.\nThe project is done, but (as mentioned in previous videos) it\u0026rsquo;s in need of some refactoring using some more advanced topics. We improve the interactable system with inheritance, we improve the state system with events, we improve the flippant use of FindGameObjectOfType with more usable implementation of the singleton pattern, in this case a static instance variable. Also abstract classes I guess.\nThe Finished Project #  The entire finished project is available on github: https://github.com/hunterdyar/WellSlammerEscape\n"},{"id":43,"href":"/docs/unity/3d-models/from-sketchfab-to-unity/","title":"From Sketchfab To Unity","section":"3D Models","content":"From Sketchfab To Unity #  This video was recorded as review for the in-class lecture on the Exquisite museum project, posted here for future reference.\n  "},{"id":44,"href":"/docs/blender/3d-models/","title":"How 3D Models Work","section":"Blender","content":"How 3D Models Work #  Elements of a 3D Model \u0026amp; How Mesh Data works #    What is a 3D Model Anyway? #  What\u0026hellip; is a 3D model? This has some overlap with the above video.   Face Orientaion and Back-Face Culling #    "},{"id":45,"href":"/docs/programming/unity-and-programming/input-system/","title":"Input System","section":"Unity Specific Programming","content":"Unity has multiple Input Systems, which is confusing for beginners. Built into Unity by default is access to the \u0026ldquo;old\u0026rdquo; input system, which this page will detail. The \u0026ldquo;old\u0026rdquo; system is simpler and easier to use for beginners. Unity also has a \u0026ldquo;new\u0026rdquo; input system that you can switch to, which is far more advanced and capable, but requires a bit of setup before you can use, and utilizes more advanced c# features.\nIn \u0026ldquo;real\u0026rdquo; projects, particularly those targeting multiple platforms, multiple devices, and for VR, I much prefer the \u0026ldquo;new\u0026rdquo; input system. The \u0026ldquo;old\u0026rdquo; system is much faster to get started with.  Input Systems #  An input system handles one of the hardest parts of game development: Supporting multiple devices. The input that comes from devices into your game can come from a near infinite incredible number of sources:\n Keyboards (of various types, of various layouts, with regional differences) Mice events (that may or may not have various buttons) Audio Devices Gamepads (from microsoft, sony, logitech, and others which all behave slightly differently) Joysticks/Flight Control Devices Racing Sim Devices (wheels, pedals) Accelerometer Information in Phones Multi-touch supporting screens GPS coordinates VR Input Devices (Including arbitrary tracking pucks) Alt-controller input Systems (wiimote, donkey-kong bongos, TV blaster guns) Musical Instruments Fake Musical Instruments (rock band/guitar hero) MIDI devices  Many of these devices \u0026ldquo;pretend\u0026rdquo; to be other devices (often behaving like an xbox controller), which can help or hurt us in variety of contexts.\nAn Input System takes all of these real-world devices and maps their inputs into one or more fake virtual devices or fake virtual inputs. The fake inputs by different names in different input systems. The old system calls them \u0026ldquo;axis\u0026rdquo; and \u0026ldquo;buttons\u0026rdquo;, the new system calls them \u0026ldquo;actions\u0026rdquo;. Our code can look at the fake virtual devices as if they are real. Fake-Input device says jump? Jump. It doesn\u0026rsquo;t need to know if you pressed the space key on your keyboard or the x button on your gamepad.\nThe input system handles all of the real-world complexity of devices, and allows our code to pretend that the world of devices isn\u0026rsquo;t actually complicated (it is), and it can receive nice clean input events and statuses.\nUsing The Old Input System #  In Unity, we use the Input class. Simply type \u0026ldquo;Input.\u0026rdquo; in our code to access all sorts of functions. The most common are \u0026ldquo;GetAxis\u0026rdquo; and \u0026ldquo;GetButton\u0026rdquo;.\nYou almost always want to capture player input inside of the Update function. Do not capture input inside of FixedUpdate - your input will be broken. What\u0026rsquo;s worse, it will be broken in an inconsistent and hard to debug way.  Axis and Buttons #  Every input one our fake input device is given a name. We don\u0026rsquo;t need to name our input \u0026ldquo;space\u0026rdquo;, we can call it something useful and descriptive, like \u0026ldquo;Jump\u0026rdquo; or \u0026ldquo;Shoot\u0026rdquo;. It can be either an Axis, which will return a value between -1 and 1, or a button, which can either be pressed (true) or unpressed (false). A joystick is two axis, a horizontal one and a vertical one: mapped to pushing left/right and up/down with the joystick. If the joystick is \u0026ldquo;centered\u0026rdquo; and not being touched, both the horizontal and vertical axis will be 0. If I hold down on the joystick, the vertical axis will be -1 and the horizontal axis will be 0. If I push to the right, the horizontal axis will be 1 and the vertical axis will be 0.\nUnity, by default, sets up two axis, named \u0026ldquo;Horizontal\u0026rdquo; and \u0026ldquo;Vertical\u0026rdquo;. It is mapped to the left stick of a gamepad, the arrow keys of a keyboard, and the WASD keys of a keyboard.\nButtons are like axis but simpler, they can be pressed or not pressed. Unity sets up one called \u0026ldquo;Jump\u0026rdquo; that is mapped to the space bar of the keyboard and the \u0026ldquo;south\u0026rdquo; button of gamepads.\nReading State vs Events #  It\u0026rsquo;s important to remember that, with the \u0026lsquo;old\u0026rsquo; system we are generally reading values continuously, and not responding to \u0026ldquo;events\u0026rdquo;. We are looking at a variable\u0026rsquo;s value every frame, and if that value is something we care about, or past a certain threshold, we THEN can call a function or even fire off an \u0026lsquo;event\u0026rsquo; ourselves.\nThe plan, now, becomes to look at all the input values we care about every single frame we care about them. ie: in the Update loop.\nRemember we are using a game loop. During every loop, our input is set to whatever state was read from the devices by the input system. Input won\u0026rsquo;t change for any given frame of Update. Luckily, our games update loop is fast enough that input feels very responsive and fluid - the update loops is usually faster than the frame-rate of the monitor your are looking at a game on, so your game can visually respond to input within a 60th or 144th of a second.\nWhen you push a button, its probably true for a number of frames in the game, not just \u0026lsquo;one\u0026rsquo; frame.\nGetAxis #  To get the value of an axis, the code might like this: void Update() { //See below note on GetAxis vs. GetAxisRaw before using this code.  float horizontal = Input.GetAxis(\u0026#34;Horizontal\u0026#34;); if(horizontal \u0026gt; 0.1) { //pushing to the right  } else if(horizontal \u0026lt; -0.1) { //pushing to the left  } }\nWe might want to combine the input into a Vector2. void Update() { float horizontal = Input.GetAxis(\u0026#34;Horizontal\u0026#34;); float vertical = Input.GetAxis(\u0026#34;Vertical\u0026#34;); Vector2 inputDir = new Vector2(horizontal, vertical); //We can do the above three lines of code in one line of code:  Vector2 inputDir = new Vector2(Input.GetAxis(\u0026#34;Horizontal\u0026#34;), Input.GetAxis(\u0026#34;Vertical\u0026#34;)); } Now we have a variable we can check and compare values with.\nGetButton #  Get button is just one of three useful functions. They are GetButton, GetButtonDown, and GetButtonUp. All of these functions will return a boolean - true or false - for any given button name.\nGetButton will return true when a button is pressed, and false when it is not pressed.\nGetButtonDown will return true for the first frame a button is pressed. It will then read as false until the button is released and pressed again.\nGetButtonUp will return false until the the first frame a button is released. It will then read as false until the button is pressed and released again.\nPardon my whiteboard scratchings.\nHere, the x-axis of the chart is time, each column being a new Update loop. T and F are if the function will return True or False, and the line to the right of button is like a side-view of the buttons height, either up or pressed down.\nvoid Update() { if(Input.GetButtonDown(\u0026#34;Jump\u0026#34;)) { Jump(); } } void Jump() { //code to jump here } Input Isolation In Code #  Note in the example above that I created a Jump() function. It\u0026rsquo;s a good idea to keep the code that reacts to input, and the code that examines for input, in two separate, compartmentalized places. I almost always put \u0026ldquo;PlayerInput\u0026rdquo; on a unique script from, say, \u0026ldquo;PlayerMovement\u0026rdquo;. This way I can rewrite or change my input handling (a common and messy task) without messing up any of the logic of my game. The above example is simply moving the logic to a new function - not a new monoBehavior - but it\u0026rsquo;s still a smart thing to do.\nEditing The Input Axis #  Editing the input axis is simple: Go to Edit \u0026gt; Project Settings\u0026hellip; and choose \u0026lsquo;Input Manager\u0026rsquo;. See the Unity Documentation Page for details.\nGetAxis vs. GetAxisRaw #  If you are using two-directional keyboard input, you have likely noticed that your game might feel sluggish or behave oddly. Perhaps you tried the following type of setup:\nvoid Update() { if(Input.GetAxis(\u0026#34;Horizontal\u0026#34;) \u0026gt; 0) { //move right  } else if(Input.GetAxis(\u0026#34;Horizontal\u0026#34;) \u0026lt; 0) { //move left  } } The problem isn\u0026rsquo;t with our code (although, to note, we still may want to change 0 to small numbers as a \u0026lsquo;deadzone\u0026rsquo;).\nThe real problem is with how Unity treats axis. If the input that Unity reads jumps from a value to 0, Unity wont have the value jump to 0, instead it fades back. It does this when handling keyboard input as axis input. Unity is, to some degree, simulating a joystick, and simulating the amount of time it takes for the joystick to move from the edge back to the center.\nWhen using keyboard input, this may or may not be what we want. In some types of movement, we like it. In other types, it just gets in our way. To avoid it, use the \u0026ldquo;GetAxisRaw\u0026rdquo; function instead of \u0026ldquo;GetAxis\u0026rdquo;.\nSome online resources will tell you to just set the gravity or snap settings in the input manager really high, so it falls back to 0 quickly. And, sure, that would work. But it\u0026rsquo;s a silly way to solve a straightforward problem. Instead of changing the parameters of the smoothing filter to make it negligible (in what we hope is all conditions), lets actually just turn it off.  void Update() { //GetAxisRaw would appropriately handle keyboard input in this situation.  if(Input.GetAxisRaw(\u0026#34;Horizontal\u0026#34;) \u0026gt; 0) { //move right  } else if(Input.GetAxisRaw(\u0026#34;Horizontal\u0026#34;) \u0026lt; 0) { //move left  } } "},{"id":46,"href":"/docs/unity/setup/installing-unity/","title":"Installing Unity and an IDE","section":"Setup","content":"Installing Unity - A Thorough Guide #  Unity is a large and complicated piece of software. This document is thorough, if you just want to get started, you can find more concise explainers elsewhere. I don\u0026rsquo;t recommend that - You will need to know all of the ins-and-outs of setting up a development environment, especially when troubleshooting.\nTo develop games in Unity, you need to do the following:\n Create a Unity Account Install the Unity Hub Activate a license for Unity (this is free) Install a version of Unity via the Hub Install an IDE (A fancy text editor) Tell Unity to use your IDE  The Unity Hub manages installing other versions of Unity for us. We install Unity via the Unity Hub. We do this because it\u0026rsquo;s likely that you will have multiple projects that are in different versions of Unity, as it\u0026rsquo;s considered bad practice to upgrade Unity during a projects development.\nUnity Hub with 4 versions of Unity installed.\nCreate a Unity Account #  First, create a Unity account at https://unity.com/.\nStudents do not need to use their school account, you may make purchases with the account that you want to keep after you lose access to the school email. That said, you can change it later.\nStudents should, however, sign up for Unity Student, which will give them access to some professional tools like Cloud Build, more storage space on Collab, free assets, and more. You can do this even if you do not use a school email address, being verified as a student is a separate process.\n Installing Unity Hub #  Next, download and install the Unity Hub from the unity Downloads page. You do not need to be logged in on the website. At the time of writing, Unity Hub v3 is in beta. I have had some issues with it, so I\u0026rsquo;ll be sticking with the not-v3 version of hub for now.  Next, you need to log into your account inside of Unity Hub.\nActivating A License #  Because Unity has paid, professional, versions, it has a license system that must be active in order to use it. Unity is free to use - to use it, we need to activate the free license to use unity. This gives us all of the features of the unity editor (even the dark theme), only features related to unity cloud services are \u0026ldquo;behind the paywall\u0026rdquo;.\nTo activate a license, click on the gear icon on the top right, click license management, then Activate new license. In the license screen, you can choose \u0026ldquo;Unity Personal\u0026rdquo; and \u0026ldquo;I don\u0026rsquo;t use Unity in a professional capacity.\u0026rdquo;\nLeave the preferences page with the arrow icon in the top left.\nInstalling Unity #  Click on the Installs button, then click Add. A pop-up appears asking you which version you want to add. Choose a version (read below for info), then click next. Choose the modules (again, detailed below), and click done. Unity will start installing.\nHow Unity Versions Work #  Unity has many engineers working on different features and systems all at the same time. You can read about many different goals that the Unity team has on their product roadmap. Many of then rely on other systems to work, and Unity is prone to bugs where on part of it updates when another doesn\u0026rsquo;t. Because of this, Unity has a fairly complex versioning system to make sure everything runs smoothly. Understanding at least a high-level overview of this is important.\nIt has two ways to have it\u0026rsquo;s internals updated: The official Unity version, and packages, which can be installed and updated independently. We will cover packages later, let\u0026rsquo;s just focus on the official unity version - the core unity software.\nFor any version of Unity, it goes through 4 different stages of being publicly released:\n Alpha Beta Official Long-Term Stable  First as an alpha, then beta, where the public is invited to try out new features and report bugs. We won\u0026rsquo;t be using these versions.\nNext, there are 3 official releases every year. They are released on a calendar cycle, so the releases are named in YYYY.N format. 2020.1, 2020.2, 2020.3.\nThe first two releases (.1 and .2) are called \u0026ldquo;tech\u0026rdquo; releases. They introduce new features. The last release (.3) is called the Long-Term Stable (LTS) release. It introduces no new features. It is supported with bug fixes for two years. If you are using a tech release, it is assumed you will eventually switch to the LTS version of those tech releases in the future.\nUnity switched from 3 tech releases to 2 in 2020, so 2019.4 (LTS) exists. They also switched from a traditional numbering scheme around 2017, so if you see unity version \u0026ldquo;5.6\u0026rdquo;, or similar, that\u0026rsquo;s basically the 2016/2017 version of Unity.  Which Version of Unity Do I Install? #  Unity recommends it\u0026rsquo;s LTS release, which is currently 2020.3. I agree, this is almost always the version you want to install.\nCurrently, you will also be fine to switch to the latest 2021 tech channel (.1 or .2). Unity 2021.1 Introduces some minor changes to the UI, so I will be switching to at-least-this-version to help future-proof screen captures and videos. If you want your version to look like how mine currently looks, then do that. The UI changes aren\u0026rsquo;t that significant, it\u0026rsquo;s not a big deal.\nPlatform Modules #  After you choose the version, click next, and you will be asked when modules you want to install.\nModules are external libraries that allow you to export or publish your game to different operating systems. Mac can\u0026rsquo;t publish a file that will run on windows by default, one needs to install a Mac build support (Mono) in order to do that. Most of the different platforms are pretty large, so you should only install the ones you need. They eat up file space fast.\nInstalling Modules After The Fact #  In the Unity Hub, you can always go back to the installs page, click the three vertical dots next to any version of Unity, then choose \u0026lsquo;add modules\u0026rsquo;.\nMicrosoft Visual Studio #  Unity lets you install an IDE right from this window, and leaves it checked by default so that people who don\u0026rsquo;t know what they are doing won\u0026rsquo;t be confused when they just click through and try to get started.\nI recommend Jetbrains Rider over Microsoft Visual Studio, and ask my students to use Rider. If you are one of my students, please uncheck this box to save yourself some file space on your computer. Otherwise, read below to learn about some of the differences between IDE\u0026rsquo;s.\nOculus Quest #  For Oculus Quest development, be sure to select Android Build Support (and both sub checkboxes: SDK \u0026amp; NDK, and OpenJDK, unless you know what those are and know you already have them somewhere)\nMono or IL2CPP? #  The short answer is Mono. IL2CPP stands for \u0026ldquo;Intermediate Language to C++\u0026rdquo;, and it\u0026rsquo;s an alternative scripting backend. The non-technical difference is that IL2CPP can improve performance, but has larger build times and file sizes. I recommend you default to Mono, and the curious can read more.\nWebGL #  I love WebGL development. It\u0026rsquo;s like the old days of Flash games. It allows you to publish games to Itch.io, simmer.io, or other online places. Sharing something you made with a simple link to a webpage really reduces the barrier to getting others to play your games, and I recommend developing little 2D games for the web and sharing them with your friends. There are lots of wonderful online communities around making little games, and lots of online and offline \u0026ldquo;game jam\u0026rdquo; communities that get together on teams and work on games in short periods of time. It\u0026rsquo;s a great way to get out there, make friends. WebGL is almost never a requirement, but it makes sharing ones work simple, easy, and fun.\nDocumentation #  Always leave the checkbox for documentation checked.\nOnce Unity is installed, we can install an IDE.\nIntegrated Development Environment (IDE) #  IDE\u0026rsquo;s are very fancy text-editors. When we write code in Unity, all Unity really cares about is the text files that will make up our scripts. We can use even the most basic text-editor to write our code - notepad.exe or TextMate. This is a terrible idea. There are tons of features that IDE\u0026rsquo;s provide, like line numbers, syntax highlighting, error highlighting, autocompletion, and more. In order for these advanced features to exist, the text editor needs to know about your code, and about the language you are programming in. That\u0026rsquo;s where the \u0026ldquo;integrated\u0026rdquo; part of IDE comes in.\nChoosing an IDE #  You can use any IDE you want. Some of the most popular IDE\u0026rsquo;s for Unity are:\n Microsoft Visual Studio VSCode Jetbrains Rider (My recommendation)  I highly recommend Jetbrains Rider. It\u0026rsquo;s paid, but free for students. It\u0026rsquo;s Unity support and Unity-specific features are excellent. If you are a student in one of my classes, I am asking you to use Rider.\nMicrosoft Visual Studio #  Unity gave you the option to install Microsoft Visual Studio Community, which is a perfectly fine IDE. It\u0026rsquo;s a fully-featured and professional level IDE that has been used in the industry for years. It\u0026rsquo;s a fine option - it\u0026rsquo;s free to use, but you have to log in with a Microsoft account. You can install it via the Unity modules, or you can download it here\nVSCode #  The VS in VS Code stands for Visual Studio, and it\u0026rsquo;s made by Microsoft. It\u0026rsquo;s Microsoft\u0026rsquo;s visual studio code. But it\u0026rsquo;s not Microsoft Visual Studio. Confused? We always say \u0026ldquo;visual studio\u0026rdquo; for the big software, and \u0026ldquo;VSCode\u0026rdquo; for the lightweight, open source, plugin-friendly software. VSCode comes from a line of lightweight-but-plugin-rich text editors like Sublime Text and Atom, both of which are also perfectly fine for Unity development.\nRead about setting up VSCode with Unity here: https://code.visualstudio.com/docs/other/unity.\nPlease re-read that above page. Countless times students skipped over that they had to install the .NET framework when using VSCode.The frameworks get installed automatically when using Rider or Microsoft Visual Studio.\nJetBrains Rider #  Jetbrains makes a number of powerful IDEs for different languages, and Rider is their IDE for .NET (C#) development. It has an incredible amount of Unity-specific features built into it, and has the best out-of-the-box support for code generation and auto-complete for Unity, in my opinion. One of the biggest features is that it knows about Unity\u0026rsquo;s documentation, and you can select some unity function and open the documentation for it directly from Rider. I could keep gushing over how much I love it, but you can just read about it\u0026rsquo;s Unity features here and compare it here.\nThe biggest downside is that Rider is paid. Luckily, it has a free educational license. Sign up for an account, and apply for the educational license here. When you launch Rider, you will be asked to use a trail or activate a license. Once you have the educational license, choose to activate by account, and you simply log in.\nIf you are a student in one of my classes, I politely request that you choose the \u0026ldquo;IntelliJ\u0026rdquo; keymap when installing. This is so that your keyboard shortcuts match my keyboard shortcuts, and life is just that much easier when I am explaining how to use the software.\nTelling Unity what your IDE is #  Once you are in Unity - after you create your first project, and so on, you will want to go to the Preferences (Edit\u0026gt;Preferences\u0026hellip;) and go to the \u0026ldquo;External Tools\u0026rdquo; menu. In the drop-down next to \u0026ldquo;External Script Editor\u0026rdquo; you should see an option to select your editor of choice (i.e.: Rider).\nIt\u0026rsquo;s important to set this option, as it installs some internal features to Unity that makes sure that the project (the \u0026lsquo;solution\u0026rsquo;) is correctly opened in the IDE when you double-click on a file, and that when you click on an error message, it can open the IDE and put your cursor directly on the line of code causing the error.\nDone #  That\u0026rsquo;s it. Most of these steps do not need to be repeated when installing other versions of Unity. Your IDE, Unity Hub, and your Unity License are all good-to-go for the computer you got set up on.\n"},{"id":47,"href":"/docs/unity/toolbox/instantiating/","title":"Instantiating GameObjects","section":"Toolbox","content":"Instantiating Objects #  It is very common to need to create GameObjects during the games runtime.\nCreating Objects from Scratch. #  To do that, one way is to simply create a new GameObject like we would any instance of a class. Doing this creates an empty GameObject. From there, we can use the AddComponent functions to set it up.\n//Create a GameObject. Store a reference to it in a GameObject variable called \u0026#39;something\u0026#39;. gameObject something = new GameObject(); //Add a component to the gameObject. something.AddComponent\u0026lt;Rigidbody2D\u0026gt;(); //Add a component via AddComponent and store a reference to the added component in a variable in one line of code. SpriteRenderer somethingSpriteRenderer = something.AddComponent\u0026lt;SpriteRenderer\u0026gt;(); //With a reference to the component, we can start setting it up. somethingSpriteRenderer.sprite = someSprite; This will work, certainly. But it becomes pretty clear that this is a terrible solution. Setting up GameObjects via code is a pain in the butt, especially when Unity already has a great way to add and set up GameObjects: the unity editor.\nCloning Objects #  To clone an object, instead of creating one from scratch, we can use the Instantiate function.\nAny script component can call it. We can give it a GameObject as a property, and it will clone that GameObject.\npublic GameObject objectToClone; void Start() { Instantiate(objectToClone); } The most common use case is to assign a prefab to the public field.\n[SerializeField] private GameObject explosionPrefab; void MakeExplosion() { Instantiate(explosionPrefab); } Choosing Where to Spawn the GameObject #  The Instantiate function can also take more properties. The most commonly used \u0026ldquo;version\u0026rdquo; of the function takes an Object to clone, a Vector3 for the position, and a Quaternion for the objects orientation.\nAn Important Note about Orientation #  It\u0026rsquo;s easy to think of an object as not having a rotation, because we use the word \u0026ldquo;rotation\u0026rdquo; to refer to both an Objects current orientation, and a change in that objects orientation. We also use Quaternions to define both things, just like we use a Vector3 to define both a world position and an difference to move that position by.\nIf it confusing, just remember we can have both \u0026ldquo;orientations\u0026rdquo; and \u0026ldquo;rotations\u0026rdquo; and they are stored with the same data type, but are semantically different.\nRemember that even if its \u0026ldquo;not rotated\u0026rdquo;, we still have to tell it the appropriate orientation to spawn the object with. This is the Quaternion value.\nThe \u0026ldquo;default\u0026rdquo; orientation - 0 degrees around each axis - can be easily accessed with \u0026ldquo;Quaternion.identity\u0026rdquo;. The \u0026lsquo;identity\u0026rsquo; of addition is 0, because anything plus 0 is itself. The identity of multiplication is 1, as anything times 1 is itself. The rotation identity is\u0026hellip; whatever it is, and similarly rotating something by the rotation identity will leave it\u0026rsquo;s orientation untouched.  So our Instantiate function needs a GameObject (or prefab) reference to clone, a Vector3 for position, and a Quaternion for rotation, in that order.\n[SerializeField] private GameObject stampPrefab; void MakeExplosion() { Vector3 spawnPosition = new Vector3(1,2,3); Instantiate(stampPrefab, spawnPosition, Quaternion.identity); } What about Scale? The function will use the scale of the object we are cloning - usually defined in the prefab we clone from.  Storing a Reference #  What\u0026rsquo;s more, the Instantiate function will return a reference to the thing that we cloned. We can ignore it (as above), or store that returned value in a variable.\n[SerializeField] private GameObject bulletPrefab; //Create a bullet and set it\u0026#39;s velocity to move forward. void Shoot() { GameObject bullet = Instantiate(explosionPrefab, transform.position, Quaternion.identity); Rigidbody bulletRB = bullet.GetComponent\u0026lt;Rigibody\u0026gt;(); bulletRB.velocity = Vector3.forward*10; } When you write code like this, it\u0026rsquo;s important to keep our game loop in mind. The GameObject gets created in the current game loop, and that objects Start and Awake functions don\u0026rsquo;t run until the very beginning of the next game loop. Be careful not to override any changes you make while creating the object with code that happens in Start, it can be easy to get the order of things wrong.\nExample #  The following code is taking from my TopDown Example project. The player rotates, and instead of doing the math (gross) to figure out where the \u0026ldquo;tip\u0026rdquo; of the gun is, I simply created an empty child gameObject at that position. This child moves and rotates with the player. bulletSpawnLocation is a reference to this child object\u0026rsquo;s transform component.\nI am rotating the bullet with the assumption that it\u0026rsquo;s default rotation is visually facing right. I want to set the bullets orientation such that it visually faces the appropriate direction. I use using the Quaternion.FromToRotation function, because using the functions in the Quaternion class is much easier than figuring it out myself.\nThis script uses Attributes to pretty up the inspector.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  public class PlayerWeaponHandler : MonoBehaviour { [Header(\u0026#34;Player Config\u0026#34;)] [SerializeField] private Transform bulletSpawnLocation; [Header(\u0026#34;Weapon Config\u0026#34;)] [SerializeField] private GameObject bulletPrefab; [SerializeField] private float bulletSpeed; [Min(0)] [SerializeField] private float maxFireFrequency; private float fireTimer; private void Start() { fireTimer = maxFireFrequency; } public void Fire(Vector2 direction) { if (fireTimer \u0026gt;= maxFireFrequency) { GameObject bulletGameObject = Instantiate(bulletPrefab, bulletSpawnLocation.position, Quaternion.FromToRotation(Vector2.right, direction)); Rigidbody2D bulletRB = bulletGameObject.GetComponent\u0026lt;Rigidbody2D\u0026gt;(); bulletRB.velocity = direction.normalized * bulletSpeed; fireTimer = 0; } } private void Update() { fireTimer = fireTimer + Time.deltaTime; } }   "},{"id":48,"href":"/docs/programming/advanced/interfaces/","title":"Interfaces","section":"Advanced","content":"Interfaces #  Introduction Video #    Further Resources on Interfaces #   MSDN Documentation Page Infallible Code Video on Interfaces  "},{"id":49,"href":"/docs/programming/architecture/namespaces/","title":"Namespaces","section":"Architecture","content":"Namespaces #    "},{"id":50,"href":"/docs/digital-media-fundamentals/notes-on-file-management/","title":"Notes on File Management","section":"Digital Media Fundamentals","content":"Notes on File Management #    "},{"id":51,"href":"/docs/programming/advanced/object-oriented-programming/","title":"Object Oriented Programming","section":"Advanced","content":"Object Oriented Programming #  Object oriented programming is not unique to C# programming. The concepts introduced here are utilized by an incredible number of programming languages. Java, C++, Python, R, Ruby, Swift, and Perl are some other languages that use an object-oriented paradigm.\nObject oriented programming is programming around data structures that contain variables and functions.\nThere are three main \u0026ldquo;pillars\u0026rdquo; of object oriented programming: Encapsulation, Inheritance, and Polymorphism. Depending on who you ask, there is a fourth pillar: Abstraction.\nWe will be introducing and discussing inheritance here, but leaving encapsulation and polymorphism to the side for now.\n This lesson is really about two main concepts: Classes \u0026amp; Objects, and Object Inheritance.\nClasses \u0026amp; Objects #  Classes are definitions of data structures and available functions (operations, methods) that one can do with the data. Objects are instances of the class.\nInheritance #  Inheritance is the primary tool that allows for code flexibilty and code reuse. It allows data structures to share properties of one another, by having one class inherit or copy the various setup of another class as a starting point.\nAll of the scripts we have been writing in Unity, so far, have been inheriting their properties from \u0026ldquo;MonoBehaviour\u0026rdquo;, which is the UnityEngine term for \u0026ldquo;component\u0026rdquo;. This inheritance is what has allowed us to drag and drop these behaviors onto GameObjects, and allowed Unity to find and execute their event functions like Start and Update.\nIntroduction #    Prerequisite Concepts Review #  First, be sure you have a strong grasp of Classes and Components.\nData Structures #  A data structure is an organization of data. When we have a collection of information that is related, we can put it in a structure that allows easy access, use, comparison, and manipulation of that data. The List of Data Structures on Wikipedia is overwhelming but interesting. For a more fundamental introduction, check out this Crash Course video.\nHierarchy #  Hierarchy. Hierarchical relationships is a way of organizing things that places things on different related levels. Things can be related to each other as above an other thing, below an other thing, or at the same level as an other thing. Hierarchies are sometimes called \u0026ldquo;tree structures\u0026rdquo;.\nWe will call the higher level things parents, the lower level things children, and things at the same level siblings. In programming, we also use the terms \u0026ldquo;base\u0026rdquo; to refer to an objects parent, and \u0026ldquo;extending\u0026rdquo; to the process of creating a child.\nTaxonomy #  Taxonomy is not a programming concept, but knowing about taxonomies will be helpful. Taxonomy is a system of classification, and most taxonomies you have likely heard of are structured as hierarchies. In other words, Taxonomies are practical examples of hierarchies. Creating taxonomies - somebody has to decide how to organize the library (thanks Dewey). It is interesting (one might say \u0026lsquo;productive procrastination\u0026rsquo; to browse through lists of example taxonomy on wikipedia.)\nInheritance #  From the MSDN C# Docs Overview Page page:\n A class that derives from another class, called the base class, automatically contains all the public, protected, and internal members of the base class except its constructors and finalizers.\n From the MSDN C# Docs Inheritance page:\n Inheritance enables you to create new classes that reuse, extend, and modify the behavior defined in other classes. The class whose members are inherited is called the base class, and the class that inherits those members is called the derived class.\n Members #  A member is all of the things that make an object what it is. An objects variables and functions are an objects members. Members is our new word for \u0026lsquo;thing\u0026rsquo; in the context of objects and classes. Objects can inherit members from other objects. From the MSDN Docs:\n Classes and structs have members that represent their data and behavior. A class\u0026rsquo;s members include all the members declared in the class, along with all members (except constructors and finalizers) declared in all classes in its inheritance hierarchy.\n Component Systems #  Component-based architecture is discussed in the Architecture Lecture, and you can review the pattern on its own in the excellent Game Programming Patterns Book (free, online).\nThe Lesson #    Overriding Members \u0026amp; Example #    Syntax #  See the Object Oriented Syntax page.\nResources \u0026amp; Next Steps #  The next step will be to implement these concepts yourself in a project! In the meantime\u0026hellip;\nReinforce Concepts #  Reinforce your vocabulary by reviewing other object-oriented programming introductions, like this video and this video, which explain the same things, but are short and use different languages.\nFurther Concepts #  The next concepts we will be covering are static objects and abstract classes, as well as learning a lot of the ins-and-outs of actually writing and using polymorphic (new vocab word) code.\nReviewing Docs #  A number of pages on the official MSDN C# Docs will be useful to read over. As we improve our vocabulary, these vocab-heavy pages will become more and more accessible, and will become a highly useful and pleasantly concise resource.\n MSDN Object-Oriented Programming Knowing When to Use Override and New Keywords How to override the ToString method Objects Overview  "},{"id":52,"href":"/docs/programming/advanced/object-oriented-syntax/","title":"Object Oriented Syntax","section":"Advanced","content":"Object-Oriented Syntax #  Declaring Classes #  The syntax for declaring a class is as demonstrated:\npublic class ClassName { } public class ChildClassName : ParentClassName { } We almost always write one class per file. We tend to keep sibling classes as sibling files in our file structure, although this is not necessary. C# does not care where your files are located, so you have the freedom to organize them in a way that makes sense to you, your project, your team, and your source control system.\nIt\u0026rsquo;s not entirely true that C# doesn\u0026rsquo;t care where our files are located. The exception comes with assembly definitions.  Overriding Members #  The two keywords we care about are virtual and override.\nVirtual #  The virtual keyword modifies a member of a base class. It allows it to be overridden by child classes. You can override methods,properties, indexers, and event declarations. Most of the time we use it on methods (aka functions).\nThe method being overridden cannot be private. How could it be overridden if the child classes cannot access it?\npublic class ParentClassName { public virtual void SomeFunction() { //stuff  } } Override #  The override keyword goes on a matching function on the children.\npublic class ChildClassName : ParentClassName { public override void SomeFunction() { //stuff  } } The function name, scope, and method signature (properties) all must match the parent.\nIf you are coming to this page from the OOP intro lesson, you can turn back now.  Calling The Base Function #  We can call functions on the base class from the child class using the base keyword as a reference to the base class. We can call the base class \u0026ldquo;version\u0026rdquo; of the function from the child class, which is a very common pattern.\npublic class ParentClassName { protected override void SomeFunction() { //Code that lives in the parent class  } } public class ChildClassName : ParentClassName { protected override void SomeFunction() { //Execute the code that lives in the parent class  base.SomeFunction(); //Often we follow that with our own additional logic  } } Hiding #  Hiding #  Instead of overriding a function, the other option that a child class can take is to hide the base function. The difference is important, but it is only evident when the class is used polymorphically. I want my students to default to always overriding the parent class.\nFor beginners still working to grasp polymorphism, code will behave more consistently and predictably if you default to using the override keyword. After we have been using polymorphic code for a while, we can come back and learn more about the differences between hiding and overriding functions.\nHiding In A Nutshell #  In many contexts, a hidden method and an overridden method will behave the same (executing the code in the child class), but in other contexts - dealing with polymorphism - they will not. For the curious, explore the above link and the docs on the new keyword.\nThe difference appears when we create child objects that are the parent type. That sentence is only not gibberish because of polymorphism.\nParentClassName someVariable = new ChildClassName(); In this case, the someVariable will execute the the function declared on the child if it is overridden, but if said function is merely hidden, it will execute the parents code - because it is types as the parent type, it can directly \u0026ldquo;see\u0026rdquo; the \u0026ldquo;hidden\u0026rdquo; parent classes functions.\nEvent Functions #  Whether you can hide or override them, Unity will still \u0026ldquo;find\u0026rdquo; the event function and the code should behave as expected - calling the child class functions. It will work.\nIn general, I recommend you attempt to avoid situations where you override or hide Unity Event functions (like start or update), generally by writing the main logic in their own functions, and use event functions where appropriate. Often, only a parent, or only a child will need event functions.\nFor example, you can define the OnCollisionEnter function on the parent, and then have it call another function (TakeDamage, or whatever), and it\u0026rsquo;s that function that gets overridden.  When I do use event functions in both parent and child classes, I prefer to set event functions as virtual and override them. I call the base class\u0026rsquo;s function from the child basically every time I use an event function. While this is more syntax than simply typing \u0026ldquo;new\u0026rdquo;, this forces me - when programming in the parent class - to understand that this function is getting overridden, as it has the virtual keyword. I prefer the extra verbose-ness as a bit of feedback, and I tend to make less mistakes when working this way.  public class ParentClassName : MonoBehaviour { protected override void Start() { //stuff  } } public class ChildClassName : ParentClassName { protected override void Start() { //Call whatever setup logic my parent class has.  base.Start(); //Then additional logic here  } } "},{"id":53,"href":"/docs/digital-media-fundamentals/order-of-development/","title":"Order Of Development","section":"Digital Media Fundamentals","content":"Order Of Development #  Work along your protects primary axis. Different projects require different workflows, and identifying this is often challenging for beginners.\nGenerally: work out a draft and refine. What constitutes draft? What elements are refinement? What is necessary for understanding core, fundamental, parts of your project?\nIn animation, One doesn\u0026rsquo;t animate Start to finish, timing is a key part or animation, so the animator starts with notable moment poses, and timings, and places key frames first, then they go add the ih between frames, after spending time tweaking the timing. You need to find the \u0026ldquo;key frames\u0026rdquo; of your project, and get those down before worrying about the metaphorical \u0026ldquo;in-betweens\u0026rdquo;.\nA digital painter does not paint element by element. They block out the composition. It\u0026rsquo;s harder to change a large composition after the fact, since it will mean re-doing a lot of the detail work. Thus, you want to save that detail work for later in the progress.\nFor whatever tool or workflow, the goals involve minimizing work and maximizing iteration and feedback.\nWhen a sculpter makes a statue out of marble, it would be ridiculous for them to go top-down, such that they never go back to a previous area twice. This is obvious! Yet for whatever reason, programmers never seemed to think this applies to them. \u0026ldquo;Refining a script? That just means you didn\u0026rsquo;t write it well enough the first time!\u0026rdquo;. This thinking is absurd. Hey programmers: stop implementing subsystems before you have your core gameplay working.\nDetermining What Goes First #  Have some kind of plan or concept in mind. I can\u0026rsquo;t believe I need to say this, but that\u0026rsquo;s where it starts. Don\u0026rsquo;t just open the software and start clicking.\nFrontload large parts of the project that will change and affect other elements. Sketch it out first.\nDetermine what elements are blocked. Are there discreet stages to development? Working non-destructively can\u0026rsquo;t always be avoided, and you don\u0026rsquo;t want to refine your print-making process before you\u0026rsquo;ve got your negatives developed how you wan them.\nPrioritize The Feedback You Need #  The less you have to do before looking at it and going \u0026ldquo;hmmmm\u0026rdquo;, the better.\nFor animators, start with the timing and poses.\nFor game developers, focus on the core game loop. Animating the character, nice particle effects, implementing audio - none of that matters until you have your tight core gameplay.\nBypass Intuition #  Level design starts with a block out. Music starts as loose sketches and loops. A painting begins with a sketch. Better artists don\u0026rsquo;t need better intuition, they work in a way that lets them visualize early and visualize often. They bypass the need for intuition. By being smarter about where they focus their attention. They put things on the \u0026lsquo;page\u0026rsquo; that are difficult to imagine (visualize), and test those first. Artists are always frontloading iteration, talented artsists make working easier on themselves.\nA character design doesn\u0026rsquo;t need to be inked and colored before the artist understands if the pose and propotions are correct.\nBut this is true in less obvious cases than a drawing. In game design, you really need to start with the core game loop, the fundamental elements to the players' experience. I can\u0026rsquo;t stress enough how important it is to get gameplay to be fun before you make it look good or be bug-free. You don\u0026rsquo;t need to be a brilliant genious able to imagine complex interactions of systems, you just need to be able to make prototypes, give and take feedback, and iterate.\nPrioritize Things that Affect Others #  Do the big things that affect other things first.\nIn a game, this might mean implementing your core gameplay manager before implementing your audio manager. Not because the audio manager is less important, but because the design decisions of other systems probably don\u0026rsquo;t care how the audio manager is implemented. But the design decisions of many systems (incuding the audio manager) probabyl cares about, say, how your event system is implemented. So do those earlier.\nThis obvious advice often gets ignored because it\u0026rsquo;s hard to make a decision about something precisely because it affects so much else, and it\u0026rsquo;s easy to work on some compartmentalized subsystem with confidence that you won\u0026rsquo;t be messing up your future-self and re-doing work.\nEven with the most cleanly architected systems, you need to just accept that you will have to re-do some work, budget some time to let that happen, and just get started on the big stuff early.\nGet External Feedback Early #  Getting feedback from outside sources is self-explanatory, but only possible when you work in an appropriate order.\n"},{"id":54,"href":"/docs/unity/setup/packages-assets-modules/","title":"Packages, Assets, and Modules","section":"Setup","content":"Unity Package Manager, Importing Assets, and Adding Modules #    "},{"id":55,"href":"/docs/unity/unity-fundamentals/parent-child-relationships/","title":"Parent-Child Relationships","section":"Fundamentals","content":"Parent-Child relationships #  One core concept to understand is that of \u0026lsquo;parenting\u0026rsquo;. Parent/Child relationships are edited in the hierarchy window.\nIf we remember that scenes are cartesian coordinate systems, we can define any point as a point on the number line. It can be thought of as the distance away from the scene origin on each axis. We will use the words scene and world interchangeably when talking about parenting. Scene is a unity-specific term and world is generic term, in this context.\nRotation and scale can be thought of the same way. My orientation is defined as a rotation from a default orientation. The number of degrees around each axis. 0 degrees around every axis means the object has the same orientation as the world - up is up, right is right, etc.\nMaking an object a child of another object makes that object relative to the parent object, instead of the world.\nThis means the child\u0026rsquo;s position is not defined as distance away from the world origin, but distance along each axis away from the parent. So if the parent moves, the child moves with it - it\u0026rsquo;s distance away from it\u0026rsquo;s parent is not changing, but it\u0026rsquo;s position in \u0026lsquo;world space\u0026rsquo; is. It\u0026rsquo;s moving with the parent.\nSame with rotation and scale. We scale a parent object up, all it\u0026rsquo;s children should scale up with it.\nWhen we talk about local and world space, we are talking about how the object relates itself to the Unity scene.\nCreating Parent/Child relationships in Unity #  You create parent/child relationships by dragging and dropping GameObjects on each other in the Hierarchy window.\nMake An Object Rotate around a point #  To make an object rotate around something, make an empty gameObject at the position we want the object to rotate around. Let\u0026rsquo;s call it \u0026ldquo;parent\u0026rdquo;. Make the object we care about a child of this parent object, and position it how we want. Now simply rotate the parent object.\nVideo Overview #    Hierarchy and Code #  Transforms Control Hierarchy #  Transform component is the one that is in charge of parent/child relationships, in terms of underlying data structure. This is not obvious in the Unity editor, and it doesn\u0026rsquo;t really need to be. When working in code, it\u0026rsquo;s useful to know you can get an objects children, loop through the objects children as transforms, GetComponentInChildren\u0026lt;\u0026gt;(), and other such utilities that can take advantage of your object hierarchy. You can set an objects parent via the \u0026ldquo;transform.SetParent\u0026rdquo; function.\nJust look at all the child-related functions in the Unity Scripting API page for Transform.\nLooping through Children #  If you wanted to loop through all of the children objects of a child, you could do it easily with a for loop: for(int i = 0;i \u0026lt; transform.childCount;i++) { Transform child = transform.GetChild(i); Debug.Log(child.gameObject.name+\u0026#34; is \u0026#34;+child.localPosition.magnitude + \u0026#34; units away from parent position.\u0026#34;); }\nBut there is a niftier way to do this. You can plug transform into a foreach loop. When treated as a collection, a transform object can behave like a collection of it\u0026rsquo;s child transforms. Neat!\nforeach (Transform child in transform) { //code to execute for each child...  Debug.Log(child.gameObject.name+\u0026#34; is \u0026#34;+child.localPosition.magnitude + \u0026#34; units away from parent position.\u0026#34;); } "},{"id":56,"href":"/docs/unity/unity-fundamentals/prefabs/","title":"Prefabs","section":"Fundamentals","content":"Prefabs #    "},{"id":57,"href":"/docs/blender/toolbox/preferences/","title":"Preferences Setup","section":"Toolbox","content":"Here are the settings that I prefer to change for Blender. Open the preferences by going to Edit \u0026gt; Preferences.\nInterface #  Interface \u0026gt; Menus \u0026gt; Open on Mouse Over. I find this feature helpful during mouse-only operation.\nViewport #  Display \u0026gt; 3D Viewport Axis Size. I set mine axis size to be easier to see, easier to check my orientation at a glance. Although I use 1440 and 4k monitors.\nKeymap #  The F3 button opens a menu-search popup in Blender, which is a life-saver. If you don\u0026rsquo;t have a f-row (or, as with many laptops, your f-row is media keys by default, requiring you to hold the \u0026lsquo;fn\u0026rsquo; button down to use), and you aren\u0026rsquo;t doing animation in Blender, then it can be very helpful to have the spacebar open search.\nTab For Pie Menu #  In the Keymap section of preferences, I recommend checking \u0026ldquo;Tab For Pie Menu\u0026rdquo;. Instead of the tab key switching between Object and Edit mode, tab will open a pie menu of various modes.\nThis forces you to be aware of the mode you are switching to. It\u0026rsquo;s much harder to forget which mode you are in, and you never do the little dance where you tap tab repeatedly trying to reset yourself. It\u0026rsquo;s also nice when working with workflows like rigging or sculpting.\nPerformance #  Blender runs great on most machines, but if your machine is more powerful or has more memory, you can give yourself some extra freedom. Depending on your machine, you may want to:\nIn the System section\n Increase the Undo Steps (I set mine to 124)  In the Save and Load section\n Increase the \u0026ldquo;Save Versions\u0026rdquo;. When manually saving, it won\u0026rsquo;t overwrite the previous file, but keep a recent history of files. With extensions \u0026ldquo;.blend1\u0026rdquo; and \u0026ldquo;.blend2\u0026rdquo;, they\u0026rsquo;re easily enough to ignore and delete to save space. But when you need it, they\u0026rsquo;re there. I keep 3 around. Increase the number of recent files to show in the \u0026ldquo;File \u0026gt; Open Recent\u0026rdquo; menu. Turn on Auto-Save. Every x minutes, this will save another version of your project to the Temp directory. If Blender crashes, you can recover your project.  "},{"id":58,"href":"/docs/blender/toolbox/quicktips/","title":"Quick Tips","section":"Toolbox","content":"Quick Tips. #  Use The Tilde (~) Key for Camera Control #  The ~ key gives you the camera control options that also live on the number pad. If you don\u0026rsquo;t have a numpad, don\u0026rsquo;t worry - ~ (usually to the left of the number 1 on a keyboard) will help you.\nF9 For Adjust Last Operation #  Many operations give you a little menu to edit their specifics with, in the bottom left corner of the viewport.\nEvery Blender user knows that it goes away a little too easily - clicking off the selection, and just like that the menu is gone! Don\u0026rsquo;t hit Undo just yet. Instead, press the F9 key. (or go to Edit \u0026gt; Adjust Last Operation). This will open the menu back up! All is not lost!\n"},{"id":59,"href":"/docs/programming/architecture/refactoring-a-basic-script-example/","title":"Refactoring a Basic Script Example","section":"Architecture","content":"Refactoring a Basic Script #    "},{"id":60,"href":"/docs/unity/unity-102/scene-switching/","title":"Scene Switching","section":"Systems \u0026 Techniques","content":"Scene Switching and a Basic Level Manager #    The Level Manager Code #  The code for just the level manager is here, and the entire project is available on Github here.\n"},{"id":61,"href":"/docs/unity/3d-models/rig-with-mixamo/","title":"Setting up a Rig with Mixamo","section":"3D Models","content":"Setting up a Rig with Mixamo #  This is an older video, I promise some useful information is hidden in there somewhere.\nThe video got demonitized (it was never monitized) because of an automatic copywrite claim by Katy Perry. So that\u0026rsquo;s fun. You should be able to watch it on youtube.   "},{"id":62,"href":"/docs/unity/toolbox/simple-lerp-with-coroutines/","title":"Simple LERP with Coroutines","section":"Toolbox","content":"Simple Linear Interpolation with Coroutines #  Here is an example script that uses a coroutine to lerp between two provided positions.\nThere is some extra code to allow the script to ping-pong back and forth between the positions.\nIn a real-life usage, you probably don\u0026rsquo;t want to enter world-positions manually in the unity inspector. You might use offsets, calculating the real-world start and and position by adding them to the current position. You also could use empty gameObjects that you position in the scene. Use public Transform properties, drop them in, and reference their .position property.\nusing System.Collections; using System.Collections.Generic; using UnityEngine; public class LerpPositionSimple : MonoBehaviour { public Vector3 startPosition; public Vector3 endPosition; public float timeToMove; public bool pingPong; void Start() { Move(); } public void Move() { StartCoroutine(LerpPos(startPosition,endPosition,timeToMove)); } public void MoveFinished() { if(pingPong) { //Swap thestart/end position \tVector3 temp = startPosition; startPosition = endPosition; endPosition = temp; //restart the move \tMove(); } } IEnumerator LerpPos(Vector3 start, Vector3 end, float timeToMove) { float t = 0; while(t \u0026lt; 1) { transform.position = Vector3.Lerp(start,end,t); t = t + Time.deltaTime / timeToMove; yield return null;//Stops here until right after the next update loop, then continues \t} //t won\u0026#39;t end up exactly at 1, so let\u0026#39;s snap it to be precisely where we want. \ttransform.position = end; //MoveFinished will start the coroutine again if ping-ponging is turned on \tMoveFinished(); } }  Using Speed instead of TimeToMove #  speed is a more useful property than total time to move, because it allows us to adjust our path and not have to re-adjust the total time afterwards. Given a speed, we can calculate a timeToMove value at the start of the coroutine: //\u0026#39;speed\u0026#39; is some float value we need to create. float timeToMove = Vector3.Distance(startPosition,endPosition)/speed; distance is in \u0026lsquo;meters\u0026rsquo;, speed is \u0026lsquo;meters per second\u0026rsquo;. meters divided by (meters divided by second) is seconds. Nice.  Here is the coroutine function with speed being passed in, instead of timeToMove. It\u0026rsquo;s otherwise the same.\nIEnumerator LerpPos(Vector3 start, Vector3 end, float speed) { float t = 0; float timeToMove = Vector3.Distance(startPosition,endPosition)/speed; while(t \u0026lt; 1) { transform.position = Vector3.Lerp(start,end,t); t = t + Time.deltaTime / timeToMove; yield return null; } transform.position = end; MoveFinished(); } "},{"id":63,"href":"/docs/programming/architecture/singleton-pattern/","title":"Singletons","section":"Architecture","content":"Singletons #  Prerequisites #  Understanding Static Objects and having a solid grasp of object oriented principles is a prerequisite for being able to effectively use the Singleton pattern.\nIn my opinion, singleton patters are great for single-scene games, but cause trouble once we start having to load, unload, or manage multiple scenes. I much prefer other approaches over singletons, like scriptableObjects.\nOverview Video #    "},{"id":64,"href":"/docs/programming/advanced/static-objects-and-unity/","title":"Static Objects in C# and Unity","section":"Advanced","content":"Static Objects #    "},{"id":65,"href":"/docs/programming/unity-and-programming/tips-and-tricks/string-formatting/","title":"String Formatting","section":"Tips \u0026 Tricks","content":"String Formatting and Debug.Log: Unity Nice-to-knows #    "},{"id":66,"href":"/docs/programming/unity/tips-and-tricks/string-formatting/","title":"String Formatting","section":"Tips \u0026 Tricks","content":"String Formatting and Debug.Log: Unity Nice-to-knows #    "},{"id":67,"href":"/docs/unity/unity-interface/game-view/","title":"The Game View","section":"Unity Editor Interface","content":"The Game View #  The game view is where we run our games. See the unity manual on the Game View.\nFirst, our scene view camera and our game view camera are two completely separate things. The scene view, and its \u0026lsquo;camera\u0026rsquo; that you control with the mouse, is an editor tool. The camera\u0026rsquo;s location has no impact on the final, finished, game. The game view, then, allows us to see the games current actual state, how it will be rendered.\nWhen you are in play mode, the game view is where we play and test the game. When we are not in play mode, we can get a preview of the active cameras current view, which is helpful for setting up the camera, UI, and other things.\nIn the game view we get to see what actually happens in the game when we test it. It shows us what players will ultimately see.\nIt’s very important to know that while the game is running, any changes we make will not be saved. At first, this can seem frustrating, but it’s for a good reason: The game is running!\nPlayers playing the game are also making changes to properties (like the position of a main character), and it would be really annoying if we had to move them back to the start of a level after every time we tested it.\nEvery beginner will start adjusting settings and forget that Unity is “in play mode” (running the game), and then they will lose their changes. It happens to all of us. One way to help prevent this is with a play mode overlay tint.\nUnity Official video on the Game View #    "},{"id":68,"href":"/docs/unity/unity-interface/hierarchy/","title":"The Hierarchy Window","section":"Unity Editor Interface","content":"The Hierarchy #  The hierarchy window shows us a list of all of our GameObjects in a scene. It\u0026rsquo;s a one-dimensional view of the scene, represented as a list.   It also is where we can group GameObjects together by dragging and dropping them. This is called “parenting”. It’s not just a visual organizational tool, it can have a major impact on how objects in the scene behave.\nSee the official manual on the hierarchy window.\n  "},{"id":69,"href":"/docs/unity/unity-interface/scene-view/","title":"The Scene View","section":"Unity Editor Interface","content":"The Scene View #  The Scene View, or Scene Window, is where we will spend the majority of our time in Unity. It allows us to see our scene, and edit and select objects.\nWhile the scene view has been updated twice since these screenshots have been taken, in different versions of Unity, the buttons have moved around. In 2021.1 most of the tools are now inside of, or along the top of, the scene window itself. They still do the same thing, just a new coat of paint.  The scene View is most closely linked to the Hierarchy – they are both ways to edit a scene, and the Game View.\nRead the page in the Unity Manual on the Scene View, the Scene View Control Bar, and Gizmos.\nCommon Scene View Trouble #  There are a few features in the scene view that can really mess you up if you are not aware of them.\nThe 2D Mode Toggle #  The 2D mode toggle will switch your scene view to 2D mode, the camera will become orthographic and you won\u0026rsquo;t be able to rotate the camera.\nThe ISO/Perspective Gizmo Lock #  This button below the gizmo in the top-right of the scene view will switch the camera between \u0026ldquo;ISO\u0026rdquo;, or orthographic, and \u0026ldquo;Persp\u0026rdquo; or perspective projections. If you are in \u0026ldquo;ISO\u0026rdquo; (which is short for Isometric), it\u0026rsquo;s the same as if the camera were a perspective projection. You can still rotate the scene, but further things won\u0026rsquo;t appear smaller.\nRotation Lock #  To the top right of the gizmo is a small lock icon that can be easy to accidently press, and hard to notice if it has been pressed.\nThe gizmo that lets you rotate the scene will be grayed out.\nUnity Official video on the Scene View #    "},{"id":70,"href":"/docs/programming/fundamentals/types-of-error-messages/","title":"Types of Error Messages","section":"Fundamentals","content":"Types of Error Messages #  Not all error messages are created equally, and understanding the differences is important to being able to hunt down and squash the bugs that are causing the messages.\nAs far as C# is concerned, there are two types of error messages: Compiler Errors and Runtime Errors.\nIn terms of how you will encounter errors, I would like to add a third type: IDE Errors.\nLets go through them.\nCompiler Errors #  When you compile code, it\u0026rsquo;s the computers turn to try to read what you have written. It attempts to parse all of the symbols in all the files and turn them into machine code that it can deliver to the CPU. (This is a horrendously simplified summary).\nIf it can\u0026rsquo;t parse what you have written - it reaches a symbol it doesn\u0026rsquo;t know what to do with, or it doesn\u0026rsquo;t know what a keyword means, or whatever, it will throw a compiler error.\nUnity will not let you enter play mode when you have compiler errors. If you have been doing Unity development for any amount of time, you have probably seen this message before:\nWhen this happens, head to the console:\nThe above errors are caused by a single missing semicolon. The compiler is smart enough to understand that a new expression began before the current one was terminated, so it gives us a fairly useful error message \u0026ldquo;; expected\u0026rdquo;. It\u0026rsquo;s not going to fix it for us, C# makes no assumptions, it doesn\u0026rsquo;t know what your code is on about. If you wrote the code wrong, it\u0026rsquo;s just going to stop and tell you so you can fix it.\nThe following errors are caused by removing the \u0026ldquo;using UnityEngine;\u0026rdquo; line at the top of the file. Suddenly all sorts of classes and functions that are defined in the UnityEngine library (like MonoBehaviour, Transform, Vector3) aren\u0026rsquo;t defined anywhere, and the computer doesn\u0026rsquo;t know what to do. Runtime Errors #  Runtime errors don\u0026rsquo;t happen when the code is compiled. They happen when the game is actually running. The most common are \u0026ldquo;Out of Bounds\u0026rdquo; error, when using lists or arrays, and a \u0026ldquo;Null Reference Exception\u0026rdquo;. Both happen when we ask the computer to go look in memory for some variable, and there is no instance for it to find.\nFor example, in a script that moves an object via a Rigidbody, we often store a reference to the rigidbody component in a variable.\nprivate Rigidbody2D _rigidbody; private void Awake() { _rigidbody = GetComponent\u0026lt;Rigidbody2D\u0026gt;(); } If we forget to type this GetComponent line, we will get the following error the first time the _rigidbody variable is used. There is no problem with the code\u0026rsquo;s ability to compile. It only hits this error when the game is executing.\nDepending on the runtime error, Unity will pause execution right then and there.\nClearing Errors #  Runtime errors happen when the game is running, and they stick around in the console so you can review them, double click them to jump to the problematic line of code, and so on. If you fix the error - the compiler has no idea. This is a runtime error, we are only going to hit it because of some way the code is executing. The computer won\u0026rsquo;t know it\u0026rsquo;s fixed. Because of this, the error is just going to hang out in the console until we clear it.\nWe clear errors by clicking \u0026ldquo;clear\u0026rdquo; in the console. This wipes the slate for us. By default, there is \u0026ldquo;Clear On Play\u0026rdquo; enabled, which will clear previous errors before entering play mode again. I recommend you leave this on.\nA really easy mistake to make is to spend time trying to fix an error message, but no matter what you do, it just wont go away. It might already be fixed - but is a runtime error. So the code re-compiles without error, and you\u0026rsquo;re good\u0026hellip; but you still see a red X in the console. If an unfixable error is driving you mad, try just clicking the clear button and see if it simply goes away.\nNow, that doesn\u0026rsquo;t guarantee that the actual problem is fixed, but at least you can run your game, maybe hit the problem again, and get back on the right track with debugging.\nIDE Errors #  The Unity Console just reports what the Compiler says. You can receive errors from another source: Your IDE (text editor) analyzing your code for you, in order to help out.\nRemember the missing semicolon error?\nThis is what it looks like in the IDE:\nIt gives me a red squiggly line under my code, and the message \u0026ldquo;Unexpected Token\u0026rdquo;. It also gives me a warning that my name is incorrect. It\u0026rsquo;s not how I name functions! Well, it\u0026rsquo;s a variable, not a function (method). The IDE can\u0026rsquo;t tell because of the missing semicolon. So that warning is irrelevant. Sorry IDE, you were trying to be helpful, but aren\u0026rsquo;t as smart as you\u0026rsquo;d like to be.\nI want to stress that \u0026ldquo;; expected\u0026rdquo; and \u0026ldquo;Unexpected Token\u0026rdquo; are different errors, and the compiler error is more useful in it\u0026rsquo;s reporting, but the IDE error is more useful since it\u0026rsquo;s right in context, and can often offer helpful suggestions and fixes. Or completely wrong suggestions and fixes.\nThe compiler error is the real error. It\u0026rsquo;s the actual problem your code has. The IDE is analyzing your code and - before we attempt to compile it - trying to alert your of potential issues and problems. Jetbrains Rider is pretty good at this! Microsoft Visual Studio is also pretty good at it, calling it\u0026rsquo;s solution \u0026ldquo;Intellisense\u0026rdquo; and it\u0026rsquo;s these same code-analysis tools that give us our helpful - or unhelpful - autocompletions.\nThese are just tools of the IDE. They\u0026rsquo;re useful! But they aren\u0026rsquo;t always accurate. Rider, by default, is pretty picky about your code style conventions (which is, to be fair, important and a good thing to be picky about), but it means students learning have lots of errors that super don\u0026rsquo;t matter right now. Just be aware of what is a warning and an error, and make sure you are using a color scheme where it\u0026rsquo;s clear to tell the difference.\nDon\u0026rsquo;t let your IDE get in your way. When you\u0026rsquo;re in the middle of fixing lots of errors, it can be helpful to jump over to Unity, let it attempt to compile, and give you new error messages. Compiler error messages are consistent and usually very helpful.\nVideo Review #    "},{"id":71,"href":"/docs/unity/user-interface/ugui-basics/","title":"UI System Basics","section":"The UI System","content":"Unity UI Basics Overview #    Resources #   Comparison Page Unity UGUI Manual  "},{"id":72,"href":"/docs/programming/unity-and-programming/vectors/","title":"Vectors","section":"Unity Specific Programming","content":"Vectors #  Vectors are a simple data structure that contain a set of floats - numbers. They are incredibly useful!\nAfter looking through this high-level-overview page, I recommend reading this page on Vectors in the Unity manual.\nVector Overview #    Types of Vectors in Unity #  In Unity, we have a number of different \u0026lsquo;vector\u0026rsquo; data structures:\n Vector2 Vector3 Vector4  The number refers to the number of floats that the vector contains. The floats are named in using standard mathematical letters you are likely familiar with from middle school algebra: X, Y, Z, and W. In that order.\nVector2\u0026rsquo;s have an x and a y property.\nVector3\u0026rsquo;s have an x, a y, and a z.\nOrder of Units #  We always use the same order: x then y then z. So if one says, out loud, that an object is at position \u0026ldquo;twelve thirteen zero\u0026rdquo;, we know it has a position vector with x:12, y:13, z:0, often written in parenthesis and separated by commas: (12,13,0). This nomenclature comes from algebra, and should feel familiar.\nWhat Vectors Are #  Vectors are containers for a set of numbers, and a bunch of functions for manipulating and working with these sets of numbers. In mathematics, we might use the idea of a \u0026ldquo;pair\u0026rdquo; or \u0026ldquo;tuple\u0026rdquo; for such containers.\nWhat Vectors Represent #  When I say that vectors are \u0026ldquo;just containers for a set of numbers\u0026rdquo;, this definition probably falls a little flat. We often speak about vectors in the context that we use them, and we use vectors in lots of different ways. This shouldn\u0026rsquo;t come as a surprise, just look at the Wikipedia Disambiguation Page for Vectors. When we speak about vectors, we are probably talking about them in terms of \u0026ldquo;Euclidean Vectors\u0026rdquo;, so give that wikipedia page a skim too.\nSome of the things that vectors commonly represent in Unity:\n A position in a cartesian coordinate system A position on a grid (also see: Vector2Int for this use case) A direction A force A change in position/direction/force An acceleration of (a change in the change in position/direction/force) An orientation (as \u0026ldquo;Euler angles\u0026rdquo;, each property is angles in degrees around axes, executed in a specific order) A rotation (change in orientation) A torque (force applied to rotation) A Scale 2D axes (e.g.: angle of a joystick controller) Surface Normals (often stored for a model as a normal map, not as vectors in C#)  So vectors are pretty useful! Lets think about some common uses a bit more particularly.\nVectors Can Represent Anything #  If I want to use a Vector3 for \u0026ldquo;playerStats\u0026rdquo; and let the x be the players health, y be the players mana, and z be the players charge-o-meter, then sure. Why not?\nWell, because that\u0026rsquo;s silly. If you want to store all these as 1 variable, you can make your own data structure to represent it. Your code data structures should represent what your data is. Don\u0026rsquo;t just use a vector because it\u0026rsquo;s there, and convenient. We want the functions that vectors come with to be useful to us. What would it mean to \u0026ldquo;normalize\u0026rdquo; a health/mana/charge-o-meter vector? It\u0026rsquo;s an incoherent thought.\nBut Vectors, as a data structure, are just a set of floats. They can represent whatever you want them to represent. We commonly use them in contexts that aren\u0026rsquo;t just 3 related values, but where vector-based math is useful. This includes forces, directions, and positions, the most common use cases for Vectors.\nVectors for Position, Rotation, and Scale #  An objects position, rotation, and scale is called it\u0026rsquo;s transform. We edit all of these properties via vectors inside of the transform component.\nThe position is a number of units along each axis of the cartesian coordinate system. Its nice to think or our scenes as cartesian coordinate systems. The gameObjects are some number of units away from that gameObject\u0026rsquo;s parent position, or the origin of the scene).\nThe rotation is stored internally as a Quaternion (a different data structure that is also just 4 numbers) for annoying math and performance reasons, but quaternions are annoying to work with, so we often edit rotations via Euler angles: positive-or-negative degree\u0026rsquo;s around each axis.\nThe scale is a multiplier along each axis from some default scale. A scale of (0,0,0) is infinitely small, and will make almost every object invisible. A scale of (1,1,1) is the default scale of that object. For most objects, like default cubes, this will end up taking up about 1 square (or cubic) unit of the world-grid, but the reality of that entirely depends on your project and your assets. It\u0026rsquo;s all relative.\nVectors for Speed #  Each value is the speed along that axis. We just need to decide on the units.\nMoving past algebra, Vectors can be used to determine speed. What units we use depends on their context. If speed is position-per-time (e.g.: meters per second), we can assume that the position unit is the same as our world space; it\u0026rsquo;s the time unit we have to decide on.\nIt\u0026rsquo;s common to use seconds. This is pretty easy to work with, we just have to convert it from per-second to per-frame before actually moving an object on a specific frame (inside of an Update Loop). We do this by multiplying a per-second unity by Time.deltaTime, and we usually do this at the time of applying the value (ie: use deltaTime inside of the updateLoop, not elsewhere).\nVectors for Direction #  Vectors for position assume are usually relative to the origin of the scene (\u0026ldquo;world\u0026rdquo;). Direction disregards this notion entirely. A direction vector assumes that our object is the position (0,0,0) of the vector. Any values will \u0026ldquo;draw an arrow\u0026rdquo; away from the object - this is now a direction. We can apply it to any object anywhere. (1,0,0) is a direction pointing along the positive x axis. (0.5,0,0) is ALSO a direction pointing along the positive x axis.\nIt\u0026rsquo;s good practice to \u0026ldquo;normalize\u0026rdquo; direction - make the length of the vector equal to 1. This helps us when using the vector for reasons that will be apparent as a bug when you forget to normalize it.\nWe call a vector with the magnitude of 1 a \u0026ldquo;Unit vector\u0026rdquo;.  Similarly, with rotations, Vectors may represent an axis that something rotates around.\nVectors for Force #  A force is a direction and a magnitude. Well, what if we started with a direction, and use the vector\u0026rsquo;s length to represent the magnitude of the force? Done. Brilliant.\nVectors for Rotation #  We generally want to avoid doing this for reasons that will be discussed later. Euler angles are nice for humans to edit, but not so nice for computers to work with. We are programming, so we want to be nice to the computers (so to speak) to help prevent bugs and avoid gimbal lock.\nCommon Mistakes with Vectors #  Losing Context #  The most common way to mess up a vector is to lose context of what the vector is relative to, or forget it\u0026rsquo;s unit. Is this speed a unit per second or unit per time? Is the rotation in degrees or radians? Is this a direction or a force? Is this position relative to the parent, or relative to the world?\nWhich direction is up again? Y, right?\nIt can be easy to forget this, and then one ends up applying the wrong operation to it.\nWhen you create a vector, consider adding a comment that describes the vector and reminds you of its context and units.\nVector2 piecePos;//Chess Pieces position on the chess grid. 0,0 is always A1, bottom left for white. Vector2 playerInput;//Input axis. From arrow keys or joystick, x and y should be in the -1 to 1 range and 0 means no input. Vector3 aimDirection;//World direction the player is aiming in.  Casting A Vector Incorrectly #  You should know if you want to use a Vector2 or a Vector3, because converting between the two implies a loss or gain of data. If you accidentally convert (\u0026ldquo;cast\u0026rdquo;) your vector from the Vector3 data type into a Vector2 data type, the \u0026ldquo;z\u0026rdquo; value will get lost. Going the other way, a default value of \u0026ldquo;0\u0026rdquo; will be provided for the z component.\nMistaking Transform shorthands and Vector3 shorthands #  Vector3.up is an always-readable vector that represents (0,1,0). Vector3 upDir = Vector3.up is much easier to type and read than Vector3 upDir = new Vector3(0,1,0);.\nTransform has similar shorthand vectors. They are not relative to the world, but to the current orientation of that transform. transform.up may not be equal to Vector3.up. Vector3.up will be up in world space, transform.up will be up relative to that transform.\nThese shorthands are very useful, but it\u0026rsquo;s all too easy to type the wrong one, and then be annoyed when the player always shoots their bullets towards the top of the screen instead of the direction they are facing.\nBasics of Vector Math #    Now that we understand how vectors are used, you can go back to the VectorCookbook page in the Unity Manual to review vector math.\nRemember, you shouldn\u0026rsquo;t have to do the vector math. You just need to understand it so you can write the code expressions correctly.\nNormalizing #  In Unity, there are two functions to normalize a vector. One will normalize the vector (Normalize()). The other will give you the normalized vector without changing the values of the original vector (.normalized).\nVector2 someVector; someVector.Normalize();//changes someVector to now be normalized. someVector.normalized;//returns a new vector that is the normalized vector of someVector. Does not modify someVEctor.  Dot Product #  For what it\u0026rsquo;s worth, this is a good video explaining the dot product.   Vocabulary #   Normalize: The process to make the vector have a length of 1. Magnitude: A Vectors length - distance away from (0,0,0). Unit Vector: A vector that has a length of 1. Components: Another term for the numbers that make up a vector. \u0026ldquo;The x component\u0026rdquo; of a vector.  Other Resources #  This video is in Python, not C#, but helpfully gets into the math of unit vectors and explains things well:   This video is useful introduction to understanding how vectors get applied to 2D motion in the context of physics.   "}]