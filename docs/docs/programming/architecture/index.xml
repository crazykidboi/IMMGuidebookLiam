<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Guidebook</title>
    <link>http://guidebook.hdyar.com/docs/programming/architecture/</link>
    <description>Recent content on The Guidebook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://guidebook.hdyar.com/docs/programming/architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Architecture Lecture</title>
      <link>http://guidebook.hdyar.com/docs/programming/architecture/the-architecture-lecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/architecture/the-architecture-lecture/</guid>
      <description>The Architecture Lecture
  </description>
    </item>
    
    <item>
      <title>A Simple State Machine</title>
      <link>http://guidebook.hdyar.com/docs/programming/architecture/simple-state-machine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/architecture/simple-state-machine/</guid>
      <description>Creating a simple state machine in Unity #    Additional Resources #   One Wheel Studio - The State Pattern Habrador - State Pattern Tutorial Game Programming Patterns Book. Chapter on State  </description>
    </item>
    
    <item>
      <title>Accessing Data (from elsewhere)</title>
      <link>http://guidebook.hdyar.com/docs/programming/architecture/accessing-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/architecture/accessing-data/</guid>
      <description>How to Access Data From Another Script in Unity #  To access data that an object has, we need a reference to the appropriate instance of the object. The real challenge is, for the most part, getting the appropriate reference (&amp;ldquo;resolving&amp;rdquo; a &amp;ldquo;dependency&amp;rdquo;), and not actually accessing the data.
Also see: Data-oriented design.
Also see: Event Systems.
Public and Serialized Fields #  The simplest, easiest, minimum-viable option is to make a public field.</description>
    </item>
    
    <item>
      <title>Data-Oriented Design with Scriptable Objects</title>
      <link>http://guidebook.hdyar.com/docs/programming/architecture/data-oriented-design-scriptable-objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/architecture/data-oriented-design-scriptable-objects/</guid>
      <description>Data-oriented Design #  I think one of the best introductions to pragmatic data-oriented design is the 2017 talk that Ryan Hipple gave at the Unity Connect conference. It also introduces the basics of ScriptableObjects.
   After you have watched the above video, I recommend checking out the asset ScriptableObject-Architecture on the asset store. It&amp;rsquo;s an implementation of the ideas of the above talk, but really nicely done. It&amp;rsquo;s open source too.</description>
    </item>
    
    <item>
      <title>Event Systems</title>
      <link>http://guidebook.hdyar.com/docs/programming/architecture/event-systems/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/architecture/event-systems/</guid>
      <description>Event Systems #    A &amp;lsquo;Real Life&amp;rsquo; Example #     The code for this example is part of this project.</description>
    </item>
    
    <item>
      <title>Follow-Along Project</title>
      <link>http://guidebook.hdyar.com/docs/programming/architecture/follow-along-project/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/architecture/follow-along-project/</guid>
      <description>The following project is for students to follow along with and create a project with me, one that focuses on actually making an entire thing that has multiple levels and a game state.
Playlist of videos.
Part 1 #    This part we think of our game, make a todo list, use Unity&amp;rsquo;s tilemap system to create a level, and create a player movement system. We write our first recursive function, and we manage picking up items as we move.</description>
    </item>
    
    <item>
      <title>Namespaces</title>
      <link>http://guidebook.hdyar.com/docs/programming/architecture/namespaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/architecture/namespaces/</guid>
      <description>Namespaces #    </description>
    </item>
    
    <item>
      <title>Refactoring a Basic Script Example</title>
      <link>http://guidebook.hdyar.com/docs/programming/architecture/refactoring-a-basic-script-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/architecture/refactoring-a-basic-script-example/</guid>
      <description>Refactoring a Basic Script #    </description>
    </item>
    
    <item>
      <title>Singletons</title>
      <link>http://guidebook.hdyar.com/docs/programming/architecture/singleton-pattern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/architecture/singleton-pattern/</guid>
      <description>Singletons #  Prerequisites #  Understanding Static Objects and having a solid grasp of object oriented principles is a prerequisite for being able to effectively use the Singleton pattern.
In my opinion, singleton patters are great for single-scene games, but cause trouble once we start having to load, unload, or manage multiple scenes. I much prefer other approaches over singletons, like scriptableObjects.
Overview Video #    </description>
    </item>
    
  </channel>
</rss>
