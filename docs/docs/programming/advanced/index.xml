<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Advanced on The Guidebook</title>
    <link>http://guidebook.hdyar.com/docs/programming/advanced/</link>
    <description>Recent content in Advanced on The Guidebook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://guidebook.hdyar.com/docs/programming/advanced/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Coroutines</title>
      <link>http://guidebook.hdyar.com/docs/programming/advanced/coroutines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/advanced/coroutines/</guid>
      <description>Coroutines Overview Video #    Implementing Coroutines for grid movement in a project. #    Coroutine Syntax #  void Start() { //whenever we want to start a coroutine, we call &amp;#39;StartCoroutine&amp;#39;  StartCoroutine(CoroutineName()); } //a normal function of return type &amp;#34;IEnumerator&amp;#34;. Can take arguments. IEnumerator CoroutineName() { //do something  yield return null;//wait for right after next update loop  yield return new WaitForSeconds(0.5f);//wait for half a second } Movement With Coroutines Example #  public IEnumerator MoveTo(Vector3 destination, float timeToMove) { Vector3 start = transform.</description>
    </item>
    
    <item>
      <title>Interfaces</title>
      <link>http://guidebook.hdyar.com/docs/programming/advanced/interfaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/advanced/interfaces/</guid>
      <description>Interfaces #  Introduction Video #  {{ youtube Qmlik-fBTW4 }}
Further Resources on Interfaces #   MSDN Documentation Page Infallible Code Video on Interfaces  </description>
    </item>
    
    <item>
      <title>Object Oriented Programming</title>
      <link>http://guidebook.hdyar.com/docs/programming/advanced/object-oriented-programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/advanced/object-oriented-programming/</guid>
      <description>Object Oriented Programming #  Object oriented programming is not unique to C# programming. The concepts introduced here are utilized by an incredible number of programming languages. Java, C++, Python, R, Ruby, Swift, and Perl are some other languages that use an object-oriented paradigm.
Object oriented programming is programming around data structures that contain variables and functions.
There are three main &amp;ldquo;pillars&amp;rdquo; of object oriented programming: Encapsulation, Inheritance, and Polymorphism. Depending on who you ask, there is a fourth pillar: Abstraction.</description>
    </item>
    
    <item>
      <title>Object Oriented Syntax</title>
      <link>http://guidebook.hdyar.com/docs/programming/advanced/object-oriented-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/advanced/object-oriented-syntax/</guid>
      <description>Object-Oriented Syntax #  Declaring Classes #  The syntax for declaring a class is as demonstrated:
public class ClassName { } public class ChildClassName : ParentClassName { } We almost always write one class per file. We tend to keep sibling classes as sibling files in our file structure, although this is not necessary. C# does not care where your files are located, so you have the freedom to organize them in a way that makes sense to you, your project, your team, and your source control system.</description>
    </item>
    
    <item>
      <title>Static Objects in C# and Unity</title>
      <link>http://guidebook.hdyar.com/docs/programming/advanced/static-objects-and-unity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/programming/advanced/static-objects-and-unity/</guid>
      <description>Static Objects #    </description>
    </item>
    
  </channel>
</rss>
