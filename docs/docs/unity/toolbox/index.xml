<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Toolbox on The Guidebook</title>
    <link>http://guidebook.hdyar.com/docs/unity/toolbox/</link>
    <description>Recent content in Toolbox on The Guidebook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://guidebook.hdyar.com/docs/unity/toolbox/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A Basic Level Manager</title>
      <link>http://guidebook.hdyar.com/docs/unity/toolbox/basic-level-manager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/unity/toolbox/basic-level-manager/</guid>
      <description>A Basic Level Manager #  For an explanation of this code, see this video on scene switching, where the code is written and explained.
LevelManager.cs #  using UnityEngine; using UnityEngine.SceneManagement; public class LevelManager : MonoBehaviour { public void RestartLevel() { SceneManager.LoadScene(SceneManager.GetActiveScene().name); } public void GoToNextScene() { //Get the current level build Index  int current = SceneManager.GetActiveScene().buildIndex; //increase it by one  int next = current + 1; int total = SceneManager.</description>
    </item>
    
    <item>
      <title>Clicking On Objects in 3D</title>
      <link>http://guidebook.hdyar.com/docs/unity/toolbox/clicking-on-objects-in-3d/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/unity/toolbox/clicking-on-objects-in-3d/</guid>
      <description>Clicking On Objects in 3D #  Clicking on objects is a non-trivial task, despite how often we implement this behavior. Luckily, it&amp;rsquo;s not terribly difficult.
There are two challenges:
 The mouse is in screen-space, calculated in pixel-distance away from the top-left of the screen. Objects, on the other hand, are in world-space: they have a position in the scene. Objects in 3D can overlap each other visually. How do we know which one is &amp;ldquo;under&amp;rdquo; the mouse, and only select it?</description>
    </item>
    
    <item>
      <title>Instantiating GameObjects</title>
      <link>http://guidebook.hdyar.com/docs/unity/toolbox/instantiating/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/unity/toolbox/instantiating/</guid>
      <description>Instantiating Objects #  It is very common to need to create GameObjects during the games runtime.
Creating Objects from Scratch. #  To do that, one way is to simply create a new GameObject like we would any instance of a class. Doing this creates an empty GameObject. From there, we can use the AddComponent functions to set it up.
//Create a GameObject. Store a reference to it in a GameObject variable called &amp;#39;something&amp;#39;.</description>
    </item>
    
    <item>
      <title>Simple LERP with Coroutines</title>
      <link>http://guidebook.hdyar.com/docs/unity/toolbox/simple-lerp-with-coroutines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://guidebook.hdyar.com/docs/unity/toolbox/simple-lerp-with-coroutines/</guid>
      <description>Simple Linear Interpolation with Coroutines #  Here is an example script that uses a coroutine to lerp between two provided positions.
There is some extra code to allow the script to ping-pong back and forth between the positions.
In a real-life usage, you probably don&amp;rsquo;t want to enter world-positions manually in the unity inspector. You might use offsets, calculating the real-world start and and position by adding them to the current position.</description>
    </item>
    
  </channel>
</rss>
